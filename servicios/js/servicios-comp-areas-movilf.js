const data = [
  {
    "ID": 1,
    "ServicesName": "AddEditSolicitudModal",
    "ServicesRoute": "Components/Areas/MovilF/Delineacion/Modals/AddEditSolicitudModal",
    "ServicesDescription":`

    `,
    "Code": `
    @if (PaginatedProyecto != null)
    {
        &lt;form class=&quot;w-full grid grid-cols-12 h-fit p-2 gap-3&quot; @onsubmit=&quot;SaveAsync&quot;&gt;
            &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
                @(IsEdittingSolicitud ? $&quot;Editar solicitud &quot; : &quot;A&ntilde;adir solicitud&quot;)
            &lt;/div&gt;


            @* 
            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Proyectos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot;
                        @bind=&quot;selectedProject&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el proyecto&lt;/option&gt;
                    @foreach (var proyecto in PaginatedProyecto)
                    {

                        &lt;option value=&quot;@proyecto.nombre&quot;&gt;@proyecto.nombre&lt;/option&gt;
                    }
                    @if (AddEditSolicitud.Proyecto != null)
                    {
                        if (!PaginatedProyecto.Select(x =&gt; x.nombre).Contains(AddEditSolicitud.Proyecto.nombre))
                        {
                            &lt;option value=&quot;@selectedProject&quot;&gt;@selectedProject&lt;/option&gt;
                        }
                    }
                &lt;/select&gt;
            &lt;/div&gt; *@



            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Proyectos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot;
                value=&quot;@selectedProjectId&quot; @onchange=&quot;OnProyectoSelected&quot;&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el proyecto&lt;/option&gt;
                    @* @if (AddEditSolicitud.Proyecto == null)
                    { *@
                    @foreach (var v in PaginatedProyecto)
                    {
                        &lt;option value=&quot;@v.Id&quot;&gt;@v.nombre&lt;/option&gt;
                    }
                    @* } *@
                &lt;/select&gt;
            &lt;/div&gt;

            &lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;
            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Obras&lt;/span&gt;
                &lt;select class=&quot;w-full rounded border border-slate-300/50 p-2&quot; @bind=&quot;selectedObraId&quot;&gt;
                    &lt;!-- Opci&oacute;n que indica &quot;No Aplica&quot;. Su valor es cadena vac&iacute;a. --&gt;
                    &lt;option value=&quot;&quot;&gt;No aplica&lt;/option&gt;
                    @if (Seguimientos != null &amp;&amp; Seguimientos.Any())
                    {
                        @foreach (var v in Seguimientos)
                        {
                            &lt;option value=&quot;@v.CodigoLPS&quot;&gt;
                                @($&quot;{v.Nombre} ({v.CodigoLPS}) - {v.CreatedOn:dd/MM/yyyy}&quot;)
                            &lt;/option&gt;
                        }
                    }
                    else
                    {
                        &lt;option disabled&gt;No hay obras disponibles&lt;/option&gt;
                    }
                &lt;/select&gt;
            &lt;/div&gt;
            &lt;/AuthorizedContent&gt;


            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Cliente&lt;/span&gt;
                &lt;span class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;&gt;
                    @if (!string.IsNullOrEmpty(selectedProjectId))
                    {
                        &lt;span&gt;@(AddEditSolicitud.Proyecto.cliente)&lt;/span&gt;
                    }
                    else
                    {
                        &lt;span&gt;Selecciona un proyecto...&lt;/span&gt;
                    }
                &lt;/span&gt;
            &lt;/div&gt;


            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Subproyectos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot;
                @bind=&quot;AddEditSolicitud.Subproyecto&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el subproyecto&lt;/option&gt;
                    @if (!string.IsNullOrEmpty(selectedProjectId))
                    {
                        if (AddEditSolicitud.Proyecto.subproyectos != null)
                        {
                            @foreach (var subproyecto in AddEditSolicitud.Proyecto.subproyectos)
                            {
                                &lt;option value=&quot;@subproyecto&quot;&gt;@subproyecto&lt;/option&gt;
                            }

                            if (!AddEditSolicitud.Proyecto.subproyectos.Contains(AddEditSolicitud.Subproyecto))
                            {
                                &lt;option value=&quot;@AddEditSolicitud.Subproyecto&quot;&gt;@AddEditSolicitud.Subproyecto&lt;/option&gt;
                            }
                        }
                        else
                        {
                            &lt;option value=&quot;@AddEditSolicitud.Subproyecto&quot;&gt;@AddEditSolicitud.Subproyecto&lt;/option&gt;
                        }
                    }
                &lt;/select&gt;
            &lt;/div&gt;


            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Tipo de trabajo&lt;/span&gt;
                &lt;select id=&quot;tipo_trabajo&quot; class=&quot;w-full p-2 rounded border border-slate-300/50&quot; @bind=&quot;AddEditSolicitud.TipoTrabajo&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el tipo de trabajo&lt;/option&gt;
                    &lt;option value=&quot;AsBuilt&quot;&gt;AsBuilt&lt;/option&gt;
                    &lt;option value=&quot;AsBuilt/M2&quot;&gt;AsBuilt/M2&lt;/option&gt;
                    &lt;option value=&quot;Constructivo&quot;&gt;Constructivo&lt;/option&gt;
                    &lt;option value=&quot;Constructivo modificado&quot; disabled&gt;Constructivo modificado&lt;/option&gt;
                    &lt;option value=&quot;Desmontaje&quot;&gt;Desmontaje&lt;/option&gt;
                    &lt;option value=&quot;Digitalizaci&oacute;n&quot;&gt;Digitalizaci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;Fotomontaje&quot;&gt;Fotomontaje&lt;/option&gt;
                    &lt;option value=&quot;Georreferenciaci&oacute;n&quot;&gt;Georreferenciaci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;Inventariado espacios&quot;&gt;Inventariado espacios&lt;/option&gt;
                    &lt;option value=&quot;Inventariado instalaciones&quot;&gt;Inventariado instalaciones&lt;/option&gt;
                    &lt;option value=&quot;Land Project&quot;&gt;Land Project&lt;/option&gt;
                    &lt;option value=&quot;Legalizaci&oacute;n&quot;&gt;Legalizaci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;M2/CAP&quot;&gt;M2/CAP&lt;/option&gt;
                    &lt;option value=&quot;M2/CAP + Constructivo&quot;&gt;M2/CAP + Constructivo&lt;/option&gt;
                    &lt;option value=&quot;Modificaci&oacute;n cliente&quot; disabled&gt;Modificaci&oacute;n cliente&lt;/option&gt;
                    &lt;option value=&quot;Modificaci&oacute;n ingeniero&quot; disabled&gt;Modificaci&oacute;n ingeniero&lt;/option&gt;
                    &lt;option value=&quot;Modificaci&oacute;n delineante&quot; disabled&gt;Modificaci&oacute;n delineante&lt;/option&gt;
                    &lt;option value=&quot;Nueva opci&oacute;n&quot;&gt;Nueva opci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;Otros&quot;&gt;Otros&lt;/option&gt;
                    &lt;option value=&quot;Plano anexo&quot;&gt;Plano anexo&lt;/option&gt;
                    &lt;option value=&quot;Plano previo&quot;&gt;Plano previo&lt;/option&gt;
                    &lt;option value=&quot;Planos detalles&quot;&gt;Planos detalles&lt;/option&gt;
                    &lt;option value=&quot;Preparaci&oacute;n&quot;&gt;Preparaci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;Radioel&eacute;ctrico&quot;&gt;Radioel&eacute;ctrico&lt;/option&gt;
                    &lt;option value=&quot;Requerimiento&quot;&gt;Requerimiento&lt;/option&gt;
                    &lt;option value=&quot;Simulaci&oacute;n instalaci&oacute;n&quot;&gt;Simulaci&oacute;n instalaci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;Simulaci&oacute;n radio&quot;&gt;Simulaci&oacute;n radio&lt;/option&gt;
                    &lt;option value=&quot;Usufructos TDE_Cellnex&quot;&gt;Usufructos TDE_Cellnex&lt;/option&gt;
                    &lt;option value=&quot;Sin definir&quot;&gt;Sin definir&lt;/option&gt;
                &lt;/select&gt;

            &lt;/div&gt;

            &lt;!--&lt;Autocomplete&gt; --&gt;
            &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;, &quot;Delineacion.Ingeniero&quot;])&quot;&gt;
                @if (!string.IsNullOrEmpty(AddEditSolicitud.Id))
                {
                    if (InitialEmailIngeniero.ToLower() == _user.email.ToLower() ||
                    (string.IsNullOrEmpty(InitialEmailIngeniero) &amp;&amp; _user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;)) ||
                    _user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) ||
                    _user.Roles.Contains(&quot;Admin&quot;))
                    {
                        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Ingeniero&lt;/span&gt;
                            @if (AddEditSolicitud.IngenieroAsignado != null)
                            {
                                &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;@((e)=&gt; AddEditSolicitud.IngenieroAsignado = e)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                ToString=&quot;@(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)&quot;
                                InitialTextValue=&quot;@(string.IsNullOrEmpty(AddEditSolicitud.IngenieroAsignado.Name) ? &quot;&quot; :
                    $&quot;{AddEditSolicitud.IngenieroAsignado.Name} {AddEditSolicitud.IngenieroAsignado.LastName}&quot;)&quot;
                                InitialValue=&quot;string.IsNullOrEmpty(AddEditSolicitud.IngenieroAsignado.Name) ? null :
                                AddEditSolicitud.IngenieroAsignado&quot;&gt;

                                &lt;/Autocomplete&gt;
                            }
                            else
                            {
                                &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;@((e)=&gt; AddEditSolicitud.IngenieroAsignado = e)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                ToString=&quot;@(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)&quot;&gt;
                                &lt;/Autocomplete&gt;
                            }
                        &lt;/div&gt;
                    }
                }

                &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;])&quot;&gt;
                    &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                        &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Delineante&lt;/span&gt;
                        @if (AddEditSolicitud.DelineanteAsignado == null)
                        {

                            &lt;Autocomplete T=&quot;E_User&quot; Identifier=&quot;delinenates&quot;
                            SelectOne=&quot;@((e)=&gt; AddEditSolicitud.DelineanteAsignado = e)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            ToString=&quot;@(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)&quot;&gt;

                            &lt;/Autocomplete&gt;

                        }
                        else
                        {
                            &lt;Autocomplete T=&quot;E_User&quot; Identifier=&quot;delinenates&quot;
                            SelectOne=&quot;@((e)=&gt; AddEditSolicitud.DelineanteAsignado = e)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            ToString=&quot;@(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)&quot;
                            InitialTextValue=&quot;@(string.IsNullOrEmpty(AddEditSolicitud.DelineanteAsignado.Id) ? &quot;&quot; :
                    $&quot;{AddEditSolicitud.DelineanteAsignado.Name} {AddEditSolicitud.DelineanteAsignado.LastName}&quot;)&quot;
                            InitialValue=&quot;string.IsNullOrEmpty(AddEditSolicitud.DelineanteAsignado.Id) ? null :
                                AddEditSolicitud.DelineanteAsignado &quot;&gt;

                            &lt;/Autocomplete&gt;

                        }
                    &lt;/div&gt;
                &lt;/AuthorizedContent&gt;


                &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;])&quot;&gt;
                    &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3 flex justify-center&quot;&gt;
                        &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Estados&lt;/span&gt;
                        &lt;select @bind=&quot;Estado&quot; class=&quot;w-full p-2 rounded border border-slate-300/50&quot; required&gt;
                            &lt;option value=&quot;Sin asignaci&oacute;n&quot;&gt; Sin asignaci&oacute;n &lt;/option&gt;
                            &lt;option value=&quot;Pendiente de inicio&quot;&gt; Pendiente de inicio &lt;/option&gt;
                            &lt;option value=&quot;En curso&quot;&gt; En curso &lt;/option&gt;
                            &lt;option value=&quot;Finalizado&quot;&gt; Finalizado &lt;/option&gt;
                            &lt;option value=&quot;Parado&quot;&gt; Parado &lt;/option&gt;
                            &lt;option value=&quot;Cancelado&quot;&gt; Cancelado &lt;/option&gt;
                            &lt;option value=&quot;Caido/no realizar&quot;&gt; Caido/no realizar &lt;/option&gt;
                            &lt;option value=&quot;En previsi&oacute;n&quot;&gt; En previsi&oacute;n &lt;/option&gt;
                            &lt;option value=&quot;Fin jornada&quot;&gt; Fin jornada &lt;/option&gt;
                            &lt;option value=&quot;Pre finalizado&quot;&gt; Pre finalizado &lt;/option&gt;
                            &lt;option value=&quot;Preparado&quot;&gt; Preparado &lt;/option&gt;
                            &lt;option value=&quot;Reactivado&quot;&gt; Reactivado &lt;/option&gt;
                            &lt;option value=&quot;Sin definir&quot;&gt; Sin definir &lt;/option&gt;
                        &lt;/select&gt;
                    &lt;/div&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/AuthorizedContent&gt;

            &lt;div class=&quot;col-span-3 flex justify-center items-end display: inline-block&quot;&gt;
                &lt;div class=&quot;col-span-4 flex items-center flex-wrap justify-center&quot;&gt;
                    &lt;Checkbox Checked=&quot;AddEditSolicitud.PerteneceARepDominicana&quot;
                    ChangeCheck=&quot;@(()=&gt; {AddEditSolicitud.PerteneceARepDominicana =!AddEditSolicitud.PerteneceARepDominicana; if (AddEditSolicitud.PerteneceARepDominicana) AddEditSolicitud.PerteneceAPeru = false; InvokeAsync(StateHasChanged);})&quot;
                    Message=&quot;&iquest;Pertenece a R. Dominicana?&quot;
                    FontSize=&quot;text-base&quot;&gt;

                    &lt;/Checkbox&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-3 flex justify-center items-end display: inline-block&quot;&gt;
                &lt;div class=&quot;col-span-4 flex flex-wrap justify-center&quot;&gt;
                    &lt;Checkbox Checked=&quot;AddEditSolicitud.PerteneceAPeru&quot;
                    ChangeCheck=&quot;@(()=&gt; {AddEditSolicitud.PerteneceAPeru = !AddEditSolicitud.PerteneceAPeru; if (AddEditSolicitud.PerteneceAPeru) AddEditSolicitud.PerteneceARepDominicana = false; InvokeAsync(StateHasChanged);})&quot;
                    Message=&quot;&iquest;Pertenece a Per&uacute;?&quot; FontSize=&quot;text-base&quot;&gt;
                    &lt;/Checkbox&gt;
                &lt;/div&gt;
            &lt;/div&gt;


            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo 1&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.Codigo1&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo 2&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.Codigo2&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Nombre&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.Nombre&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Propietario I&amp;C&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.Propietario&quot; /&gt;
            &lt;/div&gt;


            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha objetivo&lt;/span&gt;
                &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.FechaObjetivo&quot; /&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Ruta archivos&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;RutaArchivos&quot; /&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Ruta PDF finalizado&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;RutaFinalizado&quot; /&gt;
            &lt;/div&gt;


            &lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha planificaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.FechaPlanificacion&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de entrega&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.FechaHito&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de aprobaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.FechaAprobacion&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;

                    @if (AddEditSolicitud.FechaAprobacion == null)
                    {
                        &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de rechazo&lt;/span&gt;
                        &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.FechaRechazo&quot; /&gt;
                    }
                    else
                    {
                        &lt;!-- Espacio reservado vac&iacute;o --&gt;
                        &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
                    }
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;AddEditSolicitud.Facturable&quot; ChangeCheck=&quot;()=&gt; {AddEditSolicitud.Facturable = !AddEditSolicitud.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
                &lt;/div&gt;


                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;AddEditSolicitud.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {AddEditSolicitud.SubirDocs = !AddEditSolicitud.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEditSolicitud.FechaSubidaDocs&quot; /&gt;
                &lt;/div&gt;



            &lt;/AuthorizedContent&gt;


            &lt;div class=&quot;col-span-12 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;div class=&quot;w-full flex flex-wrap items-center&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot; p-2 rounded bg-blue-400 text-white&quot;
                    @onclick=&quot;@(()=&gt;{ AddEditSolicitud.Comentarios.Add(new() {Id = _user.id, Comentario=&quot;&quot;, Fecha=DateTime.Now,Name= $&quot;{_user.name} {_user.surname}&quot;, ProfilePic = _user.profilePic}); InvokeAsync(StateHasChanged);})&quot;&gt;
                        A&ntilde;adir comentario
                    &lt;/button&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-span-12 flex flex-wrap gap-3 py-3&quot;&gt;
                @foreach (var vv in AddEditSolicitud.Comentarios)
                {
                    &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                        @if (!string.IsNullOrEmpty(vv.Id) != null)
                        {
                            if (!string.IsNullOrEmpty(vv.Id))
                            {
                                &lt;span class=&quot;w-full text-blue-400 text-sm flex flex-wrap justify-between items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                        &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(vv.ProfilePic)); background-size: cover;&quot;&gt;
                                        &lt;/div&gt;

                                        @(vv.Name) - @(vv.Fecha.ToRealLocalTime(_main.OffsetHoursTime))
                                    &lt;/div&gt;

                                    &lt;button type=&quot;button&quot; class=&quot;rounded bg-red-600 text-white py-0 px-1 w-fit h-fit&quot; @onclick=&quot;()=&gt; AddEditSolicitud.Comentarios.Remove(vv)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg w-fit h-fit&quot;&gt;
                                            delete
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                &lt;/span&gt;
                            }
                            else
                            {
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(vv.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;

                                    @(vv.Name) - @(vv.Fecha.ToRealLocalTime(_main.OffsetHoursTime))
                                &lt;/div&gt;
                            }
                            &lt;InputTextArea class=&quot;w-full h-[100px] border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;vv.Comentario&quot; readonly=&quot;@(vv.Id != _user.id)&quot;&gt;&lt;/InputTextArea&gt;
                        }
                        else
                        {
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                @($&quot;&quot;) - @(vv.Fecha.ToRealLocalTime(_main.OffsetHoursTime))
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full h-[100px] border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;vv.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        }

                    &lt;/div&gt;
                }
            &lt;/div&gt;




            &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;

                @if (!string.IsNullOrEmpty(AddEditSolicitud.RutaArchivos))
                {
                    try
                    {
                        AddEditSolicitud.RutaArchivos = AddEditSolicitud.RutaArchivos.Replace(&quot;/&quot;, &quot;;&quot;).Replace(@&quot;\&quot;, &quot;;&quot;);

                        &lt;a target=&quot;_blank&quot; download href=&quot;@($&quot;api/Delineacion/{AddEditSolicitud.RutaArchivos}&quot;)&quot; class=&quot;bg-blue-400 hover:bg-blue-600 text-white
    font-bold py-2 px-4 rounded cursor-pointer flex flex-wrap items-center gap-3 justify-center&quot; disabled=&quot;@UploadingFile&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                download
                            &lt;/span&gt;
                            Descargar checklist
                        &lt;/a&gt;
                    }
                    catch (Exception e)
                    {

                        _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditSolicitudModal&quot;, &quot;FRONT Descarga CheckList&quot;, DateTime.UtcNow);
                        throw;
                    }

            
                }

                &lt;label for=&quot;checklist&quot; class=&quot;bg-blue-400 hover:bg-blue-600 text-white
    font-bold py-2 px-4 rounded cursor-pointer flex flex-wrap items-center gap-3 justify-center&quot; disabled=&quot;@UploadingFile&quot;&gt;
                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                        upload
                    &lt;/span&gt;
                    Subir checklist
                &lt;/label&gt;

                &lt;InputFile id=&quot;checklist&quot; OnChange=&quot;SelectChecklist&quot; hidden&gt;&lt;/InputFile&gt;

                @if (AddEditSolicitud.Estados.Last().Estado == &quot;Pendiente de inicio&quot; || AddEditSolicitud.Estados.Last().Estado == &quot;Reactivado&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsSolicitud.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-slate-900 hover:bg-slate-950 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Cancelado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;
                        &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Delineante&quot;, &quot;Delineacion.Supervisor&quot;])&quot;&gt;
                            &lt;button type=&quot;button&quot; class=&quot;bg-blue-500 hover:bg-blue-700 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                            @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;En curso&quot;))&quot;&gt;

                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    save
                                &lt;/span&gt;
                                Iniciar
                            &lt;/button&gt;
                        &lt;/AuthorizedContent&gt;
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddEditSolicitud.Estados.Last().Estado == &quot;En curso&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsSolicitud.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-amber-400 hover:bg-amber-500 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                        @onclick=&quot;@(()=&gt;SaveModificacion())&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            A&ntilde;adir modificaci&oacute;n
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-slate-900 hover:bg-slate-950 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Cancelado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;
                        &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Delineante&quot;, &quot;Delineacion.Supervisor&quot;])&quot;&gt;
                            &lt;button type=&quot;button&quot; class=&quot;bg-amber-500 hover:bg-amber-700 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                            @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Parado&quot;))&quot;&gt;

                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    save
                                &lt;/span&gt;
                                Parado
                            &lt;/button&gt;

                            &lt;button type=&quot;button&quot; class=&quot;bg-green-300 hover:bg-green-500 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                            @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Pre finalizado&quot;))&quot;&gt;

                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    save
                                &lt;/span&gt;
                                Mandar a validar
                            &lt;/button&gt;
                        &lt;/AuthorizedContent&gt;
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddEditSolicitud.Estados.Last().Estado == &quot;Parado&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsSolicitud.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-amber-400 hover:bg-amber-500 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                        @onclick=&quot;@(()=&gt;SaveModificacion())&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            A&ntilde;adir modificaci&oacute;n
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-slate-900 hover:bg-slate-950 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Cancelado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;
                        &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Delineante&quot;, &quot;Delineacion.Supervisor&quot;])&quot;&gt;
                            &lt;button type=&quot;button&quot; class=&quot;bg-blue-500 hover:bg-blue-700 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                            @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;En curso&quot;))&quot;&gt;

                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    save
                                &lt;/span&gt;
                                Reanudar
                            &lt;/button&gt;
                        &lt;/AuthorizedContent&gt;
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddEditSolicitud.Estados.Last().Estado == &quot;Pre finalizado&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsSolicitud.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-amber-400 hover:bg-amber-500 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                        @onclick=&quot;@(()=&gt;SaveModificacion())&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            A&ntilde;adir modificaci&oacute;n
                        &lt;/button&gt;
                        @if (InitialEmailIngeniero.ToLower() == _user.email.ToLower() ||
                                                    (string.IsNullOrEmpty(InitialEmailIngeniero) &amp;&amp; _user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;)) ||
                                                    _user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) ||
                                                    _user.Roles.Contains(&quot;Admin&quot;))
                        {
                            &lt;button type=&quot;button&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                            @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Finalizado&quot;))&quot;&gt;

                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    save
                                &lt;/span&gt;
                                Finalizar
                            &lt;/button&gt;
                        }
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddEditSolicitud.Estados.Last().Estado == &quot;Finalizado&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsSolicitud.GenerateNewVersion)&quot;&gt;
                        @if (InitialEmailIngeniero.ToLower() == _user.email.ToLower() ||
                                                    (string.IsNullOrEmpty(InitialEmailIngeniero) &amp;&amp; _user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;)) ||
                                                    _user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) ||
                                                    _user.Roles.Contains(&quot;Admin&quot;))
                        {
                            &lt;button type=&quot;button&quot; class=&quot;bg-teal-500 hover:bg-teal-600 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                            @onclick=&quot;@(()=&gt; GenerateNewVersion())&quot;&gt;

                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    save
                                &lt;/span&gt;
                                Generar nueva versi&oacute;n
                            &lt;/button&gt;
                        }
                    &lt;/AuthorizedContent&gt;
                }
                &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;
                @onclick=&quot;@(() =&gt; {Close(false);})&quot;&gt;
                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                        cancel
                    &lt;/span&gt;
                    Salir sin guardar
                &lt;/button&gt;

                &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsSolicitud.Edit)&quot;&gt;
                    &lt;button id=&quot;formDelineacion&quot; type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white flex flex-wrap items-center gap-3 justify-center font-bold py-2 px-4 rounded&quot; disabled=&quot;@UploadingFile&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            save
                        &lt;/span&gt;
                        Guardar
                    &lt;/button&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    }

    @code {
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public DelineacionLogic.E_SolicitudDelineacion AddEditSolicitud { get; set; }
        [Parameter] public List&lt;E_Proyecto&gt; PaginatedProyecto { get; set; }
        [Parameter] public string IdSeguimiento { get; set; }

        bool IsEdittingSolicitud =&gt; !string.IsNullOrEmpty(AddEditSolicitud.Id);
        bool UploadingFile = false;
        string RutaArchivos = &quot;&quot;;
        string RutaFinalizado = &quot;&quot;;
        string InitialEmailIngeniero = &quot;&quot;;

        // parametros segumiento
        private GetPaginatedSeguimientoMovilDTORequest filters = new() //// -------------
        {
            PageNumber = 1,
            PageSize = 10000,
            Search = &quot;&quot;
        };

        public E_Seguimiento seguimiento { get; set; }

        private List&lt;E_Seguimiento&gt; Seguimientos = new List&lt;E_Seguimiento&gt;();
        private string selectedProjectId { get; set; } //// -------------
        private string NombreFechaObra { get; set; } //// -------------
        private string selectedObraId { get; set; } //// -------------

        private async Task LoadWorks()
        {
            try
            {
                if (!string.IsNullOrEmpty(filters.IdProyecto))
                {
                    var resultSeguimientos = await _mongoContext.GetPaginatedSeguimientoMovil(filters);
                    Seguimientos = resultSeguimientos.Documents;
                }
                else
                {
                    Seguimientos.Clear();
                }
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditSolicitudModal&quot;, &quot;LoadWorks&quot;, DateTime.UtcNow);
                throw;
            }
        }

        private async Task OnProyectoSelected(ChangeEventArgs e)
        {
            selectedProjectId = e.Value?.ToString() ?? &quot;&quot;;

            // Limpiar la obra seleccionada previamente
            AddEditSolicitud.IdSeguimientoMovil = null;
            selectedObraId = null;

            if (!string.IsNullOrEmpty(selectedProjectId))
            {
                AddEditSolicitud.Proyecto = PaginatedProyecto.FirstOrDefault(p =&gt; p.Id == selectedProjectId);
            }

            //Si no hay proyecto seleccionado, asignar el proyecto por defecto

            if (AddEditSolicitud.Proyecto == null)
            {
                AddEditSolicitud.Proyecto = PaginatedProyecto.FirstOrDefault(p =&gt; p.Id == &quot;67c02969c59e5af3ac0cdf88&quot;);
            }

            filters.IdProyecto = AddEditSolicitud.Proyecto?.Id;

            if (filters.IdProyecto != null)
            {
                // Actualizar solo la lista de obras, sin recargar la visita completa
                await LoadWorks();
            }
            else
            {
                Seguimientos.Clear();
            }

            await InvokeAsync(StateHasChanged);
        }

        private async Task OnObraSelected(ChangeEventArgs e)
        {
            selectedObraId = e.Value?.ToString() ?? &quot;&quot;;

            if (!string.IsNullOrEmpty(selectedObraId))
            {
                seguimiento = Seguimientos.FirstOrDefault(x =&gt; x.CodigoLPS == selectedObraId);
                AddEditSolicitud.IdSeguimientoMovil = seguimiento?.CodigoLPS;
            }
            await InvokeAsync(StateHasChanged);
        }

        string Estado
        {
            get
            {
                return AddEditSolicitud.Estados.Last().Estado;
            }
            set
            {
                AddEditSolicitud.Estados.Add(new()
                    {
                        Estado = value,
                        Fecha = DateTime.Now,
                        UsuarioAsignado = AddEditSolicitud.DelineanteAsignado
                    });
            }
        }



        protected override async Task OnInitializedAsync()
        {
            if (AddEditSolicitud == null)
            {
                AddEditSolicitud = new DelineacionLogic.E_SolicitudDelineacion()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now.AddDays(7),
                    };

                AddEditSolicitud.IngenieroAsignado = await _mongoUsers.Users.Find(x =&gt; x.Email.ToLower() == _user.email.ToLower()).FirstAsync();
            }
            else
            {
                // Cargar rutas primero
                var splitted = AddEditSolicitud.RutaFinalizado.Split(&quot;@@@&quot;);
                RutaArchivos = splitted[0];

                if (splitted.Length &gt; 1)
                {
                    RutaFinalizado = splitted[1];
                }

                // Asignar el proyecto antes de cargar las obras
                if (AddEditSolicitud.Proyecto == null)
                {
                    AddEditSolicitud.Proyecto = PaginatedProyecto.FirstOrDefault(p =&gt; p.Id == &quot;67c02969c59e5af3ac0cdf88&quot;);
                }

                selectedProjectId = AddEditSolicitud.Proyecto?.Id;

                // Cargar obras en segundo plano para no bloquear la UI
                if (!string.IsNullOrEmpty(selectedProjectId))
                {
                    filters.IdProyecto = selectedProjectId;
                    _ = Task.Run(async () =&gt; await LoadWorks()); // Ejecutar LoadWorks en segundo plano
                }

                // Si hay obra seleccionada, asignarla directamente
                if (!string.IsNullOrEmpty(AddEditSolicitud.IdSeguimientoMovil))
                {
                    selectedObraId = AddEditSolicitud.IdSeguimientoMovil;
                }
            }
        }

        void SaveWithEstado(string estado)
        {
            _main.IsLoading = true;
            if (!Validate())
            {
                _main.IsLoading = false;
                return;
            }
            AddEditSolicitud.Estados.Add(new()
                {
                    Estado = estado,
                    Fecha = DateTime.Now,
                    UsuarioAsignado = new()
                    {
                        Name = _user.name,
                        LastName = _user.surname,
                        Email = _user.email,
                        Id = _user.id,
                    }
                });
            _js.InvokeAsync&lt;string&gt;(&quot;SubmitForm&quot;, &quot;formDelineacion&quot;);
        }


        void SaveModificacion()
        {
            var modal = _modal.ShowModal(typeof(AddModificacionDelineacion), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddModificacionDelineacion.Data), AddEditSolicitud}
            }, FixedWidth: 55);

            modal.OnCloseModal += async (b) =&gt;
            {
                if (b)
                {
                    _js.InvokeAsync&lt;string&gt;(&quot;SubmitForm&quot;, &quot;formDelineacion&quot;);
                }
            };
        }

        async Task GenerateNewVersion()
        {
            try
            {
                var dataInJson = JsonSerializer.Serialize(AddEditSolicitud);

                        var solicitudDTODuplicado = JsonSerializer.Deserialize&lt;DelineacionLogic.E_SolicitudDelineacion&gt;(dataInJson);
                        solicitudDTODuplicado.Id = &quot;&quot;;

                        solicitudDTODuplicado.Estados = new()
                        {
                            new()
                            {
                                Estado=&quot;Pendiente de inicio&quot;,
                Fecha = DateTime.Now,
                UsuarioAsignado = solicitudDTODuplicado.DelineanteAsignado
                            }
                        };

                        if (string.IsNullOrEmpty(AddEditSolicitud.IdParentSolicitud))
                        {
                            solicitudDTODuplicado.IdParentSolicitud = AddEditSolicitud.Id;
                        }
                        else
                        {
                            solicitudDTODuplicado.IdParentSolicitud = AddEditSolicitud.IdParentSolicitud;
                        }

                        _main.IsLoading = true;

                        if (!Validate())
                        {
                            _main.IsLoading = false;
                            return;
                        }

                        await _mongoContext.AddSolicitudDelineacion(_mongoUsers, solicitudDTODuplicado);

                        Close(true);
            }
            catch (JsonException ex)
            {

                await _mongoContext.RegistroError(ex.Message, _user.name, _user.id, &quot;AddEditSolicitudModal&quot;, &quot;GenerateNewVersion &gt; JsonException&quot;, DateTime.UtcNow);
                throw;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditSolicitudModal&quot;, &quot;GenerateNewVersion &gt; Exception&quot;, DateTime.UtcNow);
                throw;
            }
        }

        async Task SaveAsync()
        {
            try
            {
                _main.IsLoading = true;

                if (!Validate())
                {
                    _main.IsLoading = false;
                    return;
                }

                AddEditSolicitud.IdSeguimientoMovil = selectedObraId;
                //AddEditSolicitud.RutaArchivos = RutaArchivos;
                AddEditSolicitud.RutaFinalizado = $&quot;{RutaArchivos}@@@{RutaFinalizado}&quot;;

                if (!string.IsNullOrEmpty(selectedProjectId))
                {
                    if (!IsEdittingSolicitud)
                    {
                        await _mongoContext.AddSolicitudDelineacion(_mongoUsers, AddEditSolicitud);
                    }
                    else
                    {
                        await _mongoContext.EditSolicitudDelineacion(_mongoUsers, AddEditSolicitud, _mail);
                    }
                }
                else
                {
                    _snackbar.InsertSnackbar(new(&quot;&iexcl;Hay que a&ntilde;adir alg&uacute;n proyecto!&quot;, &quot;cancel&quot;, 10000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    _main.IsLoading = false;
                }

            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditSolicitudModal&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            Close(true);
        }



        bool Validate()
        {
            if (AddEditSolicitud.Estados.Count == 0)
            {
                _snackbar.InsertSnackbar(new(&quot;&iexcl;Hay que a&ntilde;adir alg&uacute;n estado!&quot;, &quot;cancel&quot;, 10000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                return false;
            }

            return true;
        }

        string getSelectedProject { get; set; } = &quot;&quot;;
        string selectedProject
        {
            get
            {
                return getSelectedProject;
            }
            set
            {
                getSelectedProject = value;
                AddEditSolicitud.Proyecto = PaginatedProyecto.FirstOrDefault(p =&gt; p.nombre == value);
            }
        }

        async Task SelectChecklist(InputFileChangeEventArgs e)
        {
            _main.IsLoading = true;
            if (e.File.Size &gt; 2000000)
            {
                await _snackbar.InsertSnackbar(new($&quot;No se pueden subir archivos de m&aacute;s de 2MB&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                _main.IsLoading = false;
                return;
            }

            if (e.File.Name.Length &gt; 50)
            {
                await _snackbar.InsertSnackbar(new($&quot;El nombre del archivo es muy largo&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                _main.IsLoading = false;
                return;
            }

            UploadingFile = true;
            var idSnackbar = await _snackbar.InsertSnackbar(new($&quot;Subiendo {Path.GetFileName(e.File.Name)}: 0%&quot;, &quot;upload&quot;, int.MaxValue, &quot;bg-blue-400&quot;, &quot;text-white&quot;));

            var buffer = new byte[1024];
            int bytesRead;
            long allBytesRead = 0;

            int offset = 0;
            _main.IsLoading = false;

            var Data = e.File.OpenReadStream(e.File.Size);
            var nameFileFinal = $&quot;{DateTime.Now:dd_MM_yyyy_HH_mm_ss}{Path.GetExtension(e.File.Name)}&quot;;
            var fs = File.Create(Path.Combine(Directory.GetCurrentDirectory(), &quot;Files&quot;, &quot;Bts&quot;, &quot;Delineacion Check List&quot;, nameFileFinal));

            while ((bytesRead = await Data.ReadAsync(buffer, 0, buffer.Length)) &gt; 0)
            {
                await fs.WriteAsync(buffer, 0, bytesRead);

                offset++;
                allBytesRead += bytesRead;

                if (offset % 20 == 0)
                {
                    _snackbar.ModifySnackbarMessage(idSnackbar, $&quot;Subiendo {Path.GetFileName(e.File.Name)}: {(allBytesRead * 100d / e.File.Size).ToString(&quot;F0&quot;)}%&quot;);
                }
            }

            fs.Close();

            AddEditSolicitud.RutaArchivos = $&quot;Files/Bts/Delineacion Check List/{nameFileFinal}&quot;;

            // AddEditSolicitud.RutaArchivos = $&quot;Files;Bts;Delineacion Check List;{nameFileFinal}&quot;;


            _snackbar.ModifySnackbarMessage(idSnackbar, $&quot;Subiendo {Path.GetFileName(e.File.Name)}: 100%&quot;);
            await Task.Delay(2000);
            _snackbar.CloseSnackbar(idSnackbar);
            UploadingFile = false;

        }
    }
    `
  },  
  {
    "ID": 2,
    "ServicesName": "AddModificacionDelineacion",
    "ServicesRoute": "Components/Areas/MovilF/Delineacion/Modals/AddModificacionDelineacion",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;div class=&quot;w-full h-fit p-4 gap-3 flex flex-wrap&quot;&gt;
        &lt;div class=&quot;w-fit h-fit text-blue-400 font-bold&quot;&gt;
            A&ntilde;adir modificaci&oacute;n
        &lt;/div&gt;

        &lt;div class=&quot;w-full h-fit flex flex-wrap justify-between gap-3&quot;&gt;
            &lt;button class=&quot;w-fit h-fit p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(()=&gt; AddModificacion(&quot;Modificaci&oacute;n - Delineante&quot;))&quot;&gt;Modificaci&oacute;n - Delineante&lt;/button&gt;
            &lt;button class=&quot;w-fit h-fit p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(()=&gt; AddModificacion(&quot;Modificaci&oacute;n - Ingeniero&quot;))&quot;&gt;Modificaci&oacute;n - Ingeniero&lt;/button&gt;
            &lt;button class=&quot;w-fit h-fit p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(()=&gt; AddModificacion(&quot;Modificaci&oacute;n - Cliente&quot;))&quot;&gt;Modificaci&oacute;n - Cliente&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;


    @code {
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public E_SolicitudDelineacion Data { get; set; }

        public void AddModificacion(string tipo)
        {
            Data.Modificaciones.Add(DateTime.Now.ToString(), tipo);

            Data.Estados.Add(new()
                {
                    Estado = &quot;Reactivado&quot;,
                    Fecha = DateTime.Now,
                    UsuarioAsignado = Data.DelineanteAsignado
                });

            Close(true);
        }
    }
    `
  },
  {
    "ID": 3,
    "ServicesName": "VerEstadosSolicitud",
    "ServicesRoute": "Components/Areas/MovilF/Delineacion/Modals/VerEstadosSolicitud",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;div class=&quot;w-fit h-fit text-blue-400 font-bold mt-4&quot;&gt;Estados&lt;/div&gt;
    &lt;table class=&quot;w-full h-fit table-auto border border-collapse border-slate-300/50&quot;&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th class=&quot;border border-slate-300/50 p-2&quot;&gt;
                    Estado
                &lt;/th&gt;
                &lt;th class=&quot;border border-slate-300/50 p-2&quot;&gt;
                    Usuario
                &lt;/th&gt;
                &lt;th class=&quot;border border-slate-300/50 p-2&quot;&gt;
                    Fecha
                &lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            @foreach(var v in Estados.OrderBy(x=&gt; x.Fecha))
            {
                &lt;tr&gt;
                    &lt;td class=&quot;border border-slate-300/50 p-2&quot;&gt;
                    @v.Estado
                    &lt;/td&gt;

                    &lt;td class=&quot;border border-slate-300/50 p-2&quot;&gt;
                        @(v.UsuarioAsignado != null ? $&quot;{v.UsuarioAsignado.Name} {v.UsuarioAsignado.LastName}&quot; : &quot;---&quot;)
                    &lt;/td&gt;

                    &lt;td class=&quot;border border-slate-300/50 p-2&quot;&gt;
                        @(v.Fecha.ToRealLocalTime(_main.OffsetHoursTime).ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;))
                    &lt;/td&gt;
                &lt;/tr&gt;
            }
        &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;div class=&quot;w-fit h-fit text-blue-400 font-bold mt-4&quot;&gt;
        Modificaciones
    &lt;/div&gt;
    &lt;table class=&quot;w-full h-fit table-auto border border-collapse border-slate-300/50&quot;&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th class=&quot;border border-slate-300/50 p-2&quot;&gt;
                    Modificaciones
                &lt;/th&gt;
                &lt;th class=&quot;border border-slate-300/50 p-2&quot;&gt;
                    Fecha
                &lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            @foreach (var v in Modificaciones.OrderBy(x =&gt; x.Key))
            {
                &lt;tr&gt;
                    &lt;td class=&quot;border border-slate-300/50 p-2&quot;&gt;
                        @v.Value
                    &lt;/td&gt;
                    &lt;td class=&quot;border border-slate-300/50 p-2&quot;&gt;
                        @(DateTime.Parse(v.Key).ToRealLocalTime(_main.OffsetHoursTime).ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;))
                    &lt;/td&gt;
                &lt;/tr&gt;
            }
        &lt;/tbody&gt;
    &lt;/table&gt;

    @code {
        [CascadingParameter] public Action&lt;bool&gt; OnClose { get; set; }
        [Parameter] public List&lt;E_Estado&gt; Estados { get; set; }
        [Parameter] public Dictionary&lt;string, string&gt; Modificaciones { get; set; }
    }
    `
  },  
  {
    "ID": 4,
    "ServicesName": "TableSolicitud",
    "ServicesRoute": "Components/Areas/MovilF/Delineacion/TableSolicitud",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilDelineacion)&quot;&gt;&lt;/AuthorizePage&gt;
    &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3 z-10&quot; style=&quot;z-index: 10;&quot;&gt;
        &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Solicitudes&lt;/h1&gt;
        &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;En esta p&aacute;gina puedes ver y editar tus solicitudes&lt;/h2&gt;

        &lt;div class=&quot;w-full flex flex-wrap justify-between items-center gap-3&quot;&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilDelineacionAddSolicitud)&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot; @onclick=&quot;()=&gt; OpenModalAddEdit()&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            manage_accounts
                        &lt;/span&gt;
                        A&ntilde;adir solicitud
                    &lt;/button&gt;
                &lt;/AuthorizedContent&gt;

                @*&lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;, &quot;Delineacion.Consultor&quot;])&quot;&gt;*@
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilDelineacionExportSolicitud)&quot;&gt;
                    &lt;a class=&quot;cursor-pointer p-2 rounded bg-blue-400 text-white&quot;
                    href=&quot;api/DelineacionMovil/Export?Password=LPSDelineacionMovil2024&quot; target=&quot;_blank&quot; download @onclick=&quot;MostrarSnackbarCargando&quot;&gt;Exportar solicitudes&lt;/a&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/div&gt;

            &lt;div class=&quot;flex flex-wrap justify-stretch items-center gap-3&quot;&gt;
                @if (PaginatedProyecto != null &amp;&amp; PaginatedSolicitud.Documents != null)
                {
                    &lt;MultiSelect  T=&quot;string&quot; ZIndex=&quot;25&quot;
                                Values=&quot;PaginatedProyecto.GroupBy(x=&gt; x.cliente).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; InitialValues=&quot;PaginatedProyecto.GroupBy(x=&gt; x.cliente).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot; SelectValues=&quot;@((e)=&gt;{filtersSolicitud.Clientes = e; LoadApi();})&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Clientes...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;24&quot; Values=&quot;PaginatedProyecto.Select(x=&gt; x.nombre).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; InitialValues=&quot;PaginatedProyecto.Select(x=&gt; x.nombre).OrderBy(x=&gt; x).ToList()&quot; SelectValues=&quot;@((e)=&gt;{filtersSolicitud.Proyecto = e; LoadApi();})&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Proyectos...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;23&quot; Values=&quot;PaginatedProyecto.SelectMany(x=&gt; x.subproyectos).GroupBy(x=&gt; x).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; InitialValues=&quot;PaginatedProyecto.SelectMany(x=&gt; x.subproyectos).GroupBy(x=&gt; x).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot; SelectValues=&quot;@((e)=&gt;{filtersSolicitud.Subproyecto = e; LoadApi();})&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Subproyectos...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;22&quot; Values=&quot;@(new(){&quot;AsBuilt&quot;,&quot;AsBuilt/M2&quot;,&quot;Constructivo&quot;,&quot;Desmontaje&quot;,&quot;Digitalizaci&oacute;n&quot;,&quot;Fotomontaje&quot;,&quot;Georreferenciaci&oacute;n&quot;,&quot;Inventariado espacios&quot;,
                    &quot;Inventariado instalaciones&quot;,&quot;Land Project&quot;,&quot;Legalizaci&oacute;n&quot;,&quot;M2/CAP&quot;,&quot;M2/CAP + Constructivo&quot;,
                    &quot;Nueva opci&oacute;n&quot;,&quot;Otros&quot;,&quot;Plano anexo&quot;,&quot;Plano previo&quot;,&quot;Planos detalles&quot;,&quot;Preparaci&oacute;n&quot;,&quot;Radioel&eacute;ctrico&quot;,&quot;Requerimiento&quot;,&quot;Simulaci&oacute;n instalaci&oacute;n&quot;,&quot;Simulaci&oacute;n radio&quot;,&quot;Usufructos TDE_Cellnex&quot;,&quot;Sin definir&quot;})&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; InitialValues=&quot;@(new(){&quot;AsBuilt&quot;,&quot;AsBuilt/M2&quot;,&quot;Constructivo&quot;,&quot;Desmontaje&quot;,&quot;Digitalizaci&oacute;n&quot;,&quot;Fotomontaje&quot;,&quot;Georreferenciaci&oacute;n&quot;,&quot;Inventariado espacios&quot;,
                    &quot;Inventariado instalaciones&quot;,&quot;Land Project&quot;,&quot;Legalizaci&oacute;n&quot;,&quot;M2/CAP&quot;,&quot;M2/CAP + Constructivo&quot;,
                    &quot;Nueva opci&oacute;n&quot;,&quot;Otros&quot;,&quot;Plano anexo&quot;,&quot;Plano previo&quot;,&quot;Planos detalles&quot;,&quot;Preparaci&oacute;n&quot;,&quot;Radioel&eacute;ctrico&quot;,&quot;Requerimiento&quot;,&quot;Simulaci&oacute;n instalaci&oacute;n&quot;,&quot;Simulaci&oacute;n radio&quot;,&quot;Usufructos TDE_Cellnex&quot;,&quot;Sin definir&quot;})&quot; SelectValues=&quot;@((e)=&gt;{filtersSolicitud.TipoTrabajo = e; LoadApi();})&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Tipo de trabajo...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;21&quot; Values=&quot;@(new(){&quot;Sin asignaci&oacute;n&quot;, &quot;Reactivado&quot;, &quot;Pendiente de inicio&quot;, &quot;En curso&quot;, &quot;Parado&quot;, &quot;&quot;, &quot;Cancelado&quot;, &quot;Finalizado&quot;, &quot;Ca&iacute;do/No realizar&quot;, &quot;En previsi&oacute;n&quot;,&quot;Fin jornada&quot;, &quot;Pausado&quot;, &quot;Pre finalizado&quot;,&quot;Preparado&quot;,&quot;Sin deninir&quot;})&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; InitialValues=&quot;@(new(){&quot;Sin asignaci&oacute;n&quot;, &quot;Reactivado&quot;, &quot;Pendiente de inicio&quot;, &quot;En curso&quot;, &quot;Parado&quot;, &quot;&quot;, &quot;Cancelado&quot;, &quot;Finalizado&quot;, &quot;Ca&iacute;do/No realizar&quot;, &quot;En previsi&oacute;n&quot;,&quot;Fin jornada&quot;, &quot;Pausado&quot;, &quot;Pre finalizado&quot;,&quot;Preparado&quot;,&quot;Sin deninir&quot;})&quot; SelectValues=&quot;@((e)=&gt;{filtersSolicitud.Estados = e; LoadApi();})&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Estados...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;E_User&quot; ZIndex=&quot;20&quot; Values=&quot;Usuarios.OrderBy(x=&gt; x.Name).ToList()&quot;
                                OptionValue=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                InitialValues=&quot;Usuarios.OrderBy(x=&gt; x.Name).ToList()&quot;
                                SelectValues=&quot;@((e)=&gt;{filtersSolicitud.DelineanteAsignado = e.Select(c=&gt; c.Id).ToList(); LoadApi();})&quot;
                                WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; e.Count &gt; 0 ? string.Join(&quot;, &quot;, e.Select(c=&gt; $&quot;{c.Name} {c.LastName}&quot;)) : &quot;&quot;)&quot; Placeholder=&quot;Delineante...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;E_User&quot; ZIndex=&quot;19&quot; Values=&quot;Usuarios.OrderBy(x=&gt; x.Name).ToList()&quot;
                                InitialValues=&quot;Usuarios.OrderBy(x=&gt; x.Name).ToList()&quot;
                                OptionValue=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                SelectValues=&quot;@((e)=&gt;{filtersSolicitud.IngenieroAsignado = e.Select(c=&gt; c.Id).ToList(); LoadApi();})&quot;
                                WidthClass=&quot;w-[15.5vw]&quot;
                                ToString=&quot;@((e)=&gt; e.Count &gt; 0 ? string.Join(&quot;, &quot;, e.Select(c=&gt; $&quot;{c.Name} {c.LastName}&quot;)) : &quot;&quot;)&quot; Placeholder=&quot;Ingeniero...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;Checkbox Checked=filtersSolicitud.MisSolicitudes
                            ChangeCheck=&quot;@(()=&gt; {filtersSolicitud.MisSolicitudes = !filtersSolicitud.MisSolicitudes; LoadApi();})&quot;
                            Message=&quot;Mis solicitudes&quot;&gt;&lt;/Checkbox&gt;
                }

                &lt;input type=&quot;search&quot; placeholder=&quot;Buscar...&quot; class=&quot;p-2 text-sm rounded border border-slate-300&quot; @bind-value=&quot;searchSet&quot; /&gt;

                &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                    &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilDelineacionPausar)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;p-2 rounded @(CountFinJornada ? &quot;bg-blue-400&quot; : &quot;bg-red-600&quot;) text-white flex flex-wrap items-center gap-3&quot; @onclick=&quot;CambiarEstado&quot;&gt;
                            @(CountFinJornada ? &quot;Reanudar&quot; : &quot;Pausar&quot;)
                        &lt;/button&gt;
                    &lt;/AuthorizedContent&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot; w-full h-fit flex flex-wrap gap-3&quot;&gt;
            &lt;table class=&quot;table-auto overflow-x-auto w-full h-fit text-sm rounded border border-slate-300/50&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                    @*  &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;])&quot;&gt; *@
                            &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                                Acciones
                            &lt;/th&gt;
                        @*&lt;/AuthorizedContent&gt;*@

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            C&oacute;digo 1
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            C&oacute;digo 2
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Nombre
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Cliente
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Proyecto
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Subproyecto
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[250px]&quot;&gt;
                            Estado
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Tipo trabajo
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Delineante
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Ingeniero
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Fecha solicitud
                        &lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @if (PaginatedSolicitud.Documents != null)
                    {
                        @foreach (var v in PaginatedSolicitud.Documents)
                        {

                            &lt;tr class=&quot;p-2&quot;&gt;

                                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilDelineacionDellSolicitud)&quot;&gt;
            
                                    @*&lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;])&quot;&gt;*@ 
                                    &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                        &lt;div class=&quot;w-full h-fit flex flex-col gap-3&quot;&gt;
                                            &lt;button class=&quot;w-fit h-fit p-2 rounded bg-red-600 text-white&quot;
                                                    @onclick=&quot;@(()=&gt; OpenModalDelete(v.Id, v.Codigo1))&quot;&gt;
                                                Borrar solicitud
                                            &lt;/button&gt;
                                        &lt;/div&gt;
                                    &lt;/td&gt;
                                &lt;/AuthorizedContent&gt;
                                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilDelineacionEditar)&quot;&gt;
            
                                    &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                        &lt;div class=&quot;w-full h-fit flex flex-col gap-3&quot;&gt;
                                            &lt;span class=&quot;text-blue-600 hover:underline cursor-pointer&quot; @onclick=&quot;()=&gt; OpenModalAddEdit(v)&quot;&gt;@v?.Codigo1&lt;/span&gt;
                                        &lt;/div&gt;
                                    &lt;/td&gt;
                                &lt;/AuthorizedContent&gt;

                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Codigo2)
                                &lt;/td&gt;

                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Nombre)
                                &lt;/td&gt;
                                
                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Proyecto?.cliente ?? &quot;No asociado&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Proyecto?.nombre ?? &quot;No asociado&quot;)
                                &lt;/td&gt;

                                &lt;td class=&quot;p-4 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Subproyecto)
                                &lt;/td&gt;

                                &lt;td class=&quot;p-1 text-sm border border-slate-300/50&quot;&gt;

                                    &lt;div class=&quot;w-full h-fit flex flex-col gap-3&quot;&gt;
                                        &lt;span class=&quot;w-fit h-fit py-2 px-4 rounded-full text-white text-xs @(ColorEstados(v.Estados.Last().Estado))&quot;&gt;
                                            @(v.Estados.Last().Estado)
                                        &lt;/span&gt;

                                        @if (!string.IsNullOrEmpty(v.IdParentSolicitud))
                                        {
                                            &lt;span class=&quot;w-fit h-fit py-2 px-4 rounded-full text-white text-xs bg-green-600 cursor-pointer&quot;
                                                @onclick=&quot;()=&gt; ModifyOriginalSolicitud(v.IdParentSolicitud)&quot;&gt;
                                                Ver solicitud original
                                            &lt;/span&gt;
                                        }

                                        &lt;AuthorizedContent Roles=&quot;@([&quot;Delineacion.Supervisor&quot;])&quot;&gt;
                                            &lt;span class=&quot;w-fit h-fit py-2 px-4 rounded-full text-white text-xs bg-fuchsia-400 cursor-pointer&quot;
                                                @onclick=&quot;()=&gt;OpenModalEstados(v.Estados, v.Modificaciones)&quot;&gt;
                                                Ver detalle
                                            &lt;/span&gt;
                                        &lt;/AuthorizedContent&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.TipoTrabajo ?? &quot;&quot;)
                                &lt;/td&gt;

                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @if (v.DelineanteAsignado == null)
                                    {
                                        &lt;span&gt;@(&quot;Sin asignaci&oacute;n&quot;)&lt;/span&gt;
                                    }
                                    else
                                    {
                                        @($&quot;{v.DelineanteAsignado.Name} {v.DelineanteAsignado.LastName}&quot;)
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(string.IsNullOrWhiteSpace($&quot;{v.IngenieroAsignado.Name} {v.IngenieroAsignado.LastName}&quot;) ? v.CreatedByName : $&quot;{v.IngenieroAsignado.Name} {v.IngenieroAsignado.LastName}&quot;)
                                &lt;/td&gt;

                                &lt;td class=&quot;p-3 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.CreatedOn.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;
            @if (PaginatedSolicitud.Documents != null)
            {
                &lt;Paginator countAllDocuments=&quot;(int)PaginatedSolicitud.CountAllDocuments&quot; countPages=&quot;PaginatedSolicitud.PageCount&quot; filters=&quot;filtersSolicitud&quot; ReloadData=&quot;()=&gt;LoadApi()&quot;&gt;
                &lt;/Paginator&gt;
            }
        &lt;/div&gt;
    &lt;/div&gt;

    @code {
        string IdSeguimiento = &quot;&quot;;

        PaginatedResult&lt;DelineacionLogic.E_SolicitudDelineacion&gt; PaginatedSolicitud = new();
        List&lt;E_Proyecto&gt; PaginatedProyecto = null;
        List&lt;E_User&gt; Usuarios = new();

        GetPaginatedSolicitud filtersSolicitud = new()
        {
            Search = &quot;&quot;,
            PageNumber = 1,
            PageSize = 10 
        };

        bool CountFinJornada = false;

        protected override async Task OnInitializedAsync()
        {
            _main.BackgroundImage = &quot;&quot;;
            PaginatedProyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();

            Usuarios = await _mongoContext.Data&lt;E_User&gt;(DatabaseIdentifiers.Main).Find(x =&gt; x.Roles.Any(c =&gt; c.Name == &quot;Delineacion.Ingeniero&quot; ||
            c.Name == &quot;Delineacion.Delineante&quot; || c.Name == &quot;Delineacion.Supervisor&quot;)).ToListAsync();
            await LoadApi();

            if (!string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;idseguimiento&quot;]))
            {
                IdSeguimiento = _main.QueryParameters(_nav)[&quot;idseguimiento&quot;];
                OpenModalAddEdit();
                return;
            }
        }

        private void MostrarSnackbarCargando()

        {
            _snackbar.InsertSnackbar(new($&quot;Cargando...&quot;, &quot;pending&quot;, 5000, &quot;bg-blue-400&quot;, &quot;text-white&quot;));

        }

        public async Task CambiarEstado()
        {
            await _mongoContext.SetFinJornadaDelineacion(_user.id);
            await LoadApi();
        }

        string searchSet
        {
            get
            {
                return filtersSolicitud.Search;
            }
            set
            {
                filtersSolicitud.Search = value;
                LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;
                var pageSize = _main.QueryParameters(_nav)[&quot;pageSize&quot;];
                var pageNumber = _main.QueryParameters(_nav)[&quot;pageNumber&quot;];

                if (!string.IsNullOrEmpty(pageSize) &amp;&amp; !string.IsNullOrEmpty(pageNumber))
                {
                    filtersSolicitud.PageNumber = int.Parse(pageNumber);
                    filtersSolicitud.PageSize = int.Parse(pageSize);
                }

                filtersSolicitud.MyId = _user.id;
                PaginatedSolicitud = await _mongoContext.GetPaginatedSolicitudDelineacion(_mongoUsers, filtersSolicitud);
                CountFinJornada = await _mongoContext.Data&lt;DelineacionLogic.E_SolicitudDelineacion&gt;(DatabaseIdentifiers.Movil)
                        .Find(x =&gt; x.DelineanteAsignado.Id == _user.id &amp;&amp; (x.Estados.Last().Estado == &quot;Fin jornada&quot; || x.Estados.Last().Estado == &quot;Pausado&quot;)).AnyAsync();

                await InvokeAsync(StateHasChanged);
                _main.IsLoading = false;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;TableSolicitud&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);
                throw;
            }
            
        }

        async Task ModifyOriginalSolicitud(string id)
        {
            var data = await _mongoContext.GetOneSolicitudDelineacion(id);
            OpenModalAddEdit(data.Value);
        }

        public string ColorEstados(string estado) =&gt; estado switch
        {
            &quot;Sin asignaci&oacute;n&quot; =&gt; &quot;bg-slate-300&quot;,
            &quot;Pendiente de inicio&quot; =&gt; &quot;bg-cyan-600&quot;,
            &quot;En curso&quot; =&gt; &quot;bg-blue-500&quot;,
            &quot;Parado&quot; =&gt; &quot;bg-amber-600&quot;,
            &quot;Ca&iacute;do/No realizar&quot; =&gt; &quot;bg-slate-950&quot;,
            &quot;Cancelado&quot; =&gt; &quot;bg-slate-950&quot;,
            &quot;Finalizado&quot; =&gt; &quot;bg-emerald-500&quot;,
            &quot;En previsi&oacute;n&quot; =&gt; &quot;bg-yellow-400&quot;,
            &quot;Fin jornada&quot; =&gt; &quot;bg-pink-300&quot;,
            &quot;Pausado&quot; =&gt; &quot;bg-pink-300&quot;,
            &quot;Pre finalizado&quot; =&gt; &quot;bg-teal-300&quot;,
            &quot;Preparado&quot; =&gt; &quot;bg-lime-300&quot;,
            &quot;Sin definir&quot; =&gt; &quot;bg-orange-300&quot;,
            &quot;Reactivado&quot; =&gt; &quot;bg-orange-600&quot;,
            _ =&gt; &quot;&quot;
        };

        void OpenModalEstados(List&lt;E_Estado&gt; estados, Dictionary&lt;string, string&gt; modificaciones)
        {
            var modal = _modal.ShowModal(typeof(VerEstadosSolicitud), new Dictionary&lt;string, object&gt;
            {
                {nameof(VerEstadosSolicitud.Estados), estados},
                {nameof(VerEstadosSolicitud.Modificaciones), modificaciones},
            }, FixedWidth: 50, MaxHeight: 80);

            modal.OnCloseModal += (b) =&gt;
            {
            };
        }

        //Modal AddEdit

        void OpenModalAddEdit(DelineacionLogic.E_SolicitudDelineacion edit = null)
        {
            if (edit != null)
            {
                if (edit.DelineanteAsignado == null)
                {
                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }
                }
                else
                {
                    if ((string.IsNullOrEmpty(edit.DelineanteAsignado.Name)) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }

                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;) &amp;&amp; _user.email.ToLower() != edit.DelineanteAsignado.Name &amp;&amp;
                    _user.email.ToLower() != edit.DelineanteAsignado.Email)
                    {
                        return;
                    }
                }
            }

            var modal = _modal.ShowModal(typeof(AddEditSolicitudModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditSolicitudModal.AddEditSolicitud), edit},
                {nameof(AddEditSolicitudModal.IdSeguimiento), IdSeguimiento},
                {nameof(AddEditSolicitudModal.PaginatedProyecto), PaginatedProyecto},
            }, FixedWidth: 80);

            modal.OnCloseModal += async (b) =&gt;
            {
                await ResponseModalAddEdit(b);
            };
        }

        public  async Task OpenModalDelete(string id, string CodigoDelete)
        {
            try
            {
                var modal = _modal.ShowModal(typeof(ConfirmationModal), new Dictionary&lt;string, object&gt;
                {
                { nameof(ConfirmationModal.Title), &quot;Eliminar solicitud&quot;},
                { nameof(ConfirmationModal.Message), $&quot;&iquest;Eliminar la solicitud {CodigoDelete}?&quot;},
                }, FixedWidth: 60);

                modal.OnCloseModal += async (b) =&gt;
                {
                    if (b)
                    {
                        await _mongoContext.DeleteSolicitudDelineacion(id);
                        await LoadApi();
                    }
                };
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;TableSolicitud&quot;, &quot;OpenModalDelete&quot;, DateTime.UtcNow);
                throw;
            }
        }

        async Task ResponseModalAddEdit(bool success)
        {
            IdSeguimiento = &quot;&quot;;
            await LoadApi();
        }
    }
    `
  },
  {
    "ID": 5,
    "ServicesName": "AddEditTrabajoModal",
    "ServicesRoute": "Components/Areas/MovilF/Radioelectrico/Modals/AddEditTrabajoModal",
    "ServicesDescription":`
    `,
    "Code": `
    @if (Proyectos != null)
    {
        &lt;form class=&quot;w-full grid grid-cols-12 h-fit p-2 gap-3&quot; @onsubmit=&quot;SaveAsync&quot;&gt;
            &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
                @(!string.IsNullOrEmpty(AddTrabajo.Id) ? $&quot;Editar trabajo&quot; : &quot;A&ntilde;adir trabajo&quot;)
            &lt;/div&gt;

            @*     &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Proyectos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot;
                        @bind=&quot;selectedProject&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el proyecto&lt;/option&gt;
                    @foreach (var proyecto in Proyectos)
                    {
                        &lt;option value=&quot;@proyecto.nombre&quot;&gt;@proyecto.nombre&lt;/option&gt;
                    }
                &lt;/select&gt;
            &lt;/div&gt; *@

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Proyectos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot;
                value=&quot;@selectedProjectId&quot; @onchange=&quot;OnProyectoSelected&quot;&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el proyecto&lt;/option&gt;
                    @* @if (AddEditSolicitud.Proyecto == null)
                    { *@
                    @foreach (var v in Proyectos)
                    {
                        &lt;option value=&quot;@v.Id&quot;&gt;@v.nombre&lt;/option&gt;
                    }
                    @* } *@
                &lt;/select&gt;
            &lt;/div&gt;

            &lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;
                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Obras&lt;/span&gt;
                    &lt;select class=&quot;w-full rounded border border-slate-300/50 p-2&quot; @bind=&quot;selectedObraId&quot;&gt;
                        &lt;!-- Opci&oacute;n que indica &quot;No Aplica&quot;. Su valor es cadena vac&iacute;a. --&gt;
                        &lt;option value=&quot;&quot;&gt;No aplica&lt;/option&gt;
                        @if (Seguimientos != null &amp;&amp; Seguimientos.Any())
                        {
                            @foreach (var v in Seguimientos)
                            {
                                &lt;option value=&quot;@v.CodigoLPS&quot;&gt;
                                    @($&quot;{v.Nombre} ({v.CodigoLPS}) - {v.CreatedOn:dd/MM/yyyy}&quot;)
                                &lt;/option&gt;
                            }
                        }
                        else
                        {
                            &lt;option disabled&gt;No hay obras disponibles&lt;/option&gt;
                        }
                    &lt;/select&gt;
                &lt;/div&gt;
            &lt;/AuthorizedContent&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Subproyectos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot;
                @bind=&quot;AddTrabajo.Subproyecto&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el subproyecto&lt;/option&gt;
                    @if (!string.IsNullOrEmpty(selectedProjectId))
                    {
                        @foreach (var subproyecto in AddTrabajo.Proyecto.subproyectos.Where(x =&gt; !string.IsNullOrEmpty(x)))
                        {
                            &lt;option value=&quot;@subproyecto&quot;&gt;@subproyecto&lt;/option&gt;
                        }
                    }
                &lt;/select&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Tipo de trabajos&lt;/span&gt;
                &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50&quot; @bind=&quot;AddTrabajo.TipoTrabajo&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Selecciona el tipo de trabajo&lt;/option&gt;
                    &lt;option value=&quot;Simulaci&oacute;n PLL&quot;&gt; Simulaci&oacute;n PLL &lt;/option&gt;
                    &lt;option value=&quot;Simulaci&oacute;n Cono-Esfera&quot;&gt;Simulaci&oacute;n Cono-Esfera&lt;/option&gt;
                    &lt;option value=&quot;Proyecto Radioel&eacute;ctrico&quot;&gt;Proyecto Radioel&eacute;ctrico&lt;/option&gt;
                    &lt;option value=&quot;PSC&quot;&gt;PSC&lt;/option&gt;
                    &lt;option value=&quot;Requerimiento&quot;&gt;Requerimiento&lt;/option&gt;
                &lt;/select&gt;
            &lt;/div&gt;

            &lt;!--&lt;Autocomplete&gt; --&gt;
            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Ingeniero&lt;/span&gt;
                @if (AddTrabajo.IngenieroAsignado != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot; Identifier=&quot;ingenieros&quot;
                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                    SelectOne=&quot;@((e)=&gt;{ if(e==null){AddTrabajo.IngenieroAsignado=new();} else AddTrabajo.IngenieroAsignado = e;})&quot;
                    ToString=&quot;@(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)&quot;
                    InitialTextValue=&quot;@(string.IsNullOrEmpty(AddTrabajo.IngenieroAsignado.Id) ? &quot;&quot; :
                    $&quot;{AddTrabajo.IngenieroAsignado.Name} {AddTrabajo.IngenieroAsignado.LastName}&quot;)&quot;
                    InitialValue=&quot;string.IsNullOrEmpty(AddTrabajo.IngenieroAsignado.Id) ? new() :
                    AddTrabajo.IngenieroAsignado &quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; Identifier=&quot;ingenieros&quot;
                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                    SelectOne=&quot;@((e)=&gt;{ if(e==null){AddTrabajo.IngenieroAsignado=new();} else AddTrabajo.IngenieroAsignado = e;})&quot;
                    ToString=&quot;@(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
            &lt;/div&gt;
            @if (Tecnologias != null)
            {
                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Tecnolog&iacute;a 1&lt;/span&gt;
                    &lt;MultiSelect T=&quot;E_Tecnologias&quot; Values=&quot;Tecnologias&quot; ZIndex=25 WidthClass=&quot;w-full&quot; Placeholder=&quot;...&quot;
                    ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e.Select(x=&gt; x.Abreviatura1).ToList()))&quot; OptionValue=&quot;@((e)=&gt; e.Nombre)&quot;
                    InitialValues=&quot;AddTrabajo.Tecnologias1&quot; SelectValues=&quot;@((e)=&gt; {AddTrabajo.Tecnologias1=e;})&quot;&gt;&lt;/MultiSelect&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Tecnolog&iacute;a 2&lt;/span&gt;
                    &lt;MultiSelect T=&quot;E_Tecnologias&quot; Values=&quot;Tecnologias&quot; ZIndex=24 WidthClass=&quot;w-full&quot; Placeholder=&quot;...&quot;
                    ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e.Select(x=&gt; x.Abreviatura2).ToList()))&quot; OptionValue=&quot;@((e)=&gt; e.Nombre)&quot;
                    InitialValues=&quot;AddTrabajo.Tecnologias2&quot; SelectValues=&quot;@((e)=&gt; {AddTrabajo.Tecnologias2=e;})&quot;&gt;&lt;/MultiSelect&gt;
                &lt;/div&gt;
            }

            &lt;AuthorizedContent Roles=&quot;@(new(){&quot;Radioelectrico.Supervisor&quot;})&quot;&gt;
                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3 flex justify-center&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Estados&lt;/span&gt;
                    &lt;select @bind=&quot;Estado&quot; class=&quot;w-full p-2 rounded border border-slate-300/50&quot; required&gt;
                        &lt;option value=&quot;Sin asignaci&oacute;n&quot;&gt; Sin asignaci&oacute;n &lt;/option&gt;
                        &lt;option value=&quot;Pendiente de inicio&quot;&gt; Pendiente de inicio &lt;/option&gt;
                        &lt;option value=&quot;En curso&quot;&gt; En curso &lt;/option&gt;
                        &lt;option value=&quot;Finalizado&quot;&gt; Finalizado &lt;/option&gt;
                        &lt;option value=&quot;Parado lps&quot;&gt; Parado lps &lt;/option&gt;
                        &lt;option value=&quot;Parado cliente&quot;&gt; Parado cliente &lt;/option&gt;
                        &lt;option value=&quot;Cancelado&quot;&gt; Cancelado &lt;/option&gt;
                    &lt;/select&gt;
                &lt;/div&gt;
            &lt;/AuthorizedContent&gt;

            &lt;div class=&quot;col-span-6 grid grid-cols-12 justify-center items-center&quot;&gt;
                &lt;div class=&quot;col-span-4 flex flex-wrap justify-center p-2 gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full opacity-0&quot;&gt;.&lt;/span&gt;
                    &lt;Checkbox Checked=&quot;AddTrabajo.VisitaRealizada&quot;
                    ChangeCheck=&quot;@(()=&gt; {AddTrabajo.VisitaRealizada = !AddTrabajo.VisitaRealizada; InvokeAsync(StateHasChanged);})&quot;
                    Message=&quot;&iquest;Visita realizada?&quot;&gt;
                    &lt;/Checkbox&gt;

                &lt;/div&gt;
                &lt;div class=&quot;col-span-4 p-2 flex flex-wrap  gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Persona Visita&lt;/span&gt;
                    &lt;input type=&quot;text&quot; class=&quot;w-30/4 p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.UsuarioVisita&quot; /&gt;
                &lt;/div&gt;
                &lt;div class=&quot;col-span-4 p-2 flex flex-wrap  gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha visita&lt;/span&gt;
                    &lt;InputDate TValue=&quot;DateTime?&quot; class=&quot;w-30/4 p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;AddTrabajo.FechaVisita&quot; /&gt;
                &lt;/div&gt;

            &lt;/div&gt;
            &lt;div class=&quot;col-span-6 grid grid-cols-12 justify-center items-center&quot;&gt;
                &lt;div class=&quot;col-span-4 flex flex-wrap justify-center p-2 gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full opacity-0&quot;&gt;.&lt;/span&gt;
                    &lt;Checkbox Checked=&quot;AddTrabajo.PlanoRealizado&quot;
                    ChangeCheck=&quot;@(()=&gt; {AddTrabajo.PlanoRealizado= !AddTrabajo.PlanoRealizado; InvokeAsync(StateHasChanged);})&quot;
                    Message=&quot;&iquest;Plano realizado?&quot;&gt;
                    &lt;/Checkbox&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-4 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Persona plano&lt;/span&gt;
                    &lt;input type=&quot;text&quot; class=&quot;w-30/4 p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.UsuarioPlano&quot; /&gt;
                &lt;/div&gt;
                &lt;div class=&quot;col-span-4 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha plano&lt;/span&gt;
                    &lt;InputDate TValue=&quot;DateTime?&quot; class=&quot;w-30/4 p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;AddTrabajo.FechaPlano&quot; /&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo 1 Op. 1&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.Codigo1Operador1&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo 2 Op. 1&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.Codigo2Operador1&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo 1 Op. 2&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.Codigo1Operador2&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo 2 Op. 2&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.Codigo2Operador2&quot; /&gt;
            &lt;/div&gt;


            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha objetivo&lt;/span&gt;
                &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.FechaObjetivo&quot; /&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Ruta archivos&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.RutaArchivos&quot; /&gt;
            &lt;/div&gt;

            &lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha planificaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.FechaPlanificacion&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de entrega&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.FechaHito&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de aprobaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.FechaAprobacion&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;

                    @if (AddTrabajo.FechaAprobacion == null)
                    {
                        &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de rechazo&lt;/span&gt;
                        &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.FechaRechazo&quot; /&gt;
                    }
                    else
                    {
                        &lt;!-- Espacio reservado vac&iacute;o --&gt;
                        &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
                    }
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;AddTrabajo.Facturable&quot; ChangeCheck=&quot;()=&gt; {AddTrabajo.Facturable = !AddTrabajo.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
                &lt;/div&gt;


                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;AddTrabajo.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {AddTrabajo.SubirDocs = !AddTrabajo.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
                    &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddTrabajo.FechaSubidaDocs&quot; /&gt;
                &lt;/div&gt;
            &lt;/AuthorizedContent&gt;

            &lt;div class=&quot;col-span-12 p-2 flex flex-wrap gap-3&quot;&gt;
                &lt;div class=&quot;w-full flex flex-wrap items-center&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot; p-2 rounded bg-blue-400 text-white&quot;
                    @onclick=&quot;@(()=&gt;{ AddTrabajo.Comentarios.Add(new() {Id = _user.id, Comentario=&quot;&quot;, Fecha=DateTime.Now,Name= $&quot;{_user.name} {_user.surname}&quot;, ProfilePic = _user.profilePic}); InvokeAsync(StateHasChanged);})&quot;&gt;
                        A&ntilde;adir comentario
                    &lt;/button&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-span-12 flex flex-wrap gap-3 py-3&quot;&gt;
                @foreach (var vv in AddTrabajo.Comentarios)
                {
                    &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                        @if (!string.IsNullOrEmpty(vv.Id) != null)
                        {
                            if (!string.IsNullOrEmpty(vv.Id))
                            {
                                &lt;span class=&quot;w-full text-blue-400 text-sm flex flex-wrap justify-between items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                        &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(vv.ProfilePic)); background-size: cover;&quot;&gt;
                                        &lt;/div&gt;

                                        @(vv.Name)
                                    &lt;/div&gt;

                                    &lt;button type=&quot;button&quot; class=&quot;rounded bg-red-600 text-white py-0 px-1 w-fit h-fit&quot; @onclick=&quot;()=&gt; AddTrabajo.Comentarios.Remove(vv)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg w-fit h-fit&quot;&gt;
                                            delete
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                &lt;/span&gt;
                            }
                            else
                            {
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(vv.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;

                                    @(vv.Name)
                                &lt;/div&gt;
                            }
                            &lt;InputTextArea class=&quot;w-full h-[100px] border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;vv.Comentario&quot; readonly=&quot;@(vv.Id != _user.id)&quot;&gt;&lt;/InputTextArea&gt;
                        }
                        else
                        {
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                @($&quot;&quot;)
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full h-[100px] border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;vv.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        }

                    &lt;/div&gt;
                }
            &lt;/div&gt;

            &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
                @if (AddTrabajo.Estados.Last().Estado == &quot;Pendiente de inicio&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsTrabajoRadio.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-slate-900 hover:bg-slate-950 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Cancelado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;En curso&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Iniciar
                        &lt;/button&gt;
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddTrabajo.Estados.Last().Estado == &quot;En curso&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsTrabajoRadio.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-slate-900 hover:bg-slate-950 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Cancelado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-amber-500 hover:bg-amber-700 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Parado lps&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Parar LPS
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-amber-500 hover:bg-amber-700 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Parado cliente&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Parar Cliente
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Finalizado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Finalizar
                        &lt;/button&gt;
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddTrabajo.Estados.Last().Estado == &quot;Parado cliente&quot; ||
                AddTrabajo.Estados.Last().Estado == &quot;Parado lps&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsTrabajoRadio.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-slate-900 hover:bg-slate-950 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;Cancelado&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt;SaveWithEstado(&quot;En curso&quot;))&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Reanudar
                        &lt;/button&gt;
                    &lt;/AuthorizedContent&gt;
                }
                else if (AddTrabajo.Estados.Last().Estado == &quot;Finalizado&quot;)
                {
                    &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsTrabajoRadio.Edit)&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded&quot;
                        @onclick=&quot;@(()=&gt; GenerateNewVersion())&quot;&gt;

                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Generar nueva versi&oacute;n
                        &lt;/button&gt;
                    &lt;/AuthorizedContent&gt;
                }
                &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot;
                @onclick=&quot;@(() =&gt; {getSelectedProject=&quot;&quot;; Close(false);})&quot;&gt;
                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                        cancel
                    &lt;/span&gt;
                    Cancelar
                &lt;/button&gt;

                &lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsTrabajoRadio.Edit)&quot;&gt;
                    &lt;button id=&quot;formTrabajo&quot; type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            save
                        &lt;/span&gt;
                        Guardar
                    &lt;/button&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    }

    @code {
        [Parameter] public bool IsOpen { get; set; }
        [Parameter] public bool Saved { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public string IdSeguimiento { get; set; }
        [Parameter] public E_Trabajo AddTrabajo { get; set; }
        [Parameter] public List&lt;E_Proyecto&gt; Proyectos { get; set; }
        [Parameter] public List&lt;E_Tecnologias&gt; Tecnologias { get; set; }

        public string proyecto { get; set; }

        // parametros segumiento
        private GetPaginatedSeguimientoMovilDTORequest filters = new() //// -------------
            {
                PageNumber = 1,
                PageSize = 10000,
                Search = &quot;&quot;
            };


        public E_Seguimiento seguimiento { get; set; }
        private List&lt;E_Seguimiento&gt; Seguimientos = new List&lt;E_Seguimiento&gt;();
        private string selectedProjectId { get; set; } //// -------------
        private string NombreFechaObra { get; set; } //// -------------
        private string selectedObraId { get; set; } //// -------------

        private async Task LoadWorks()
        {
            try
            {
                if (!string.IsNullOrEmpty(filters.IdProyecto))
                {
                    var resultSeguimientos = await _mongoContext.GetPaginatedSeguimientoMovil(filters);
                    Seguimientos = resultSeguimientos.Documents;
                }
                else
                {
                    Seguimientos.Clear();
                }
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTrabajoModal&quot;, &quot;LoadWorks&quot;, DateTime.UtcNow);
                throw;
            }
        }

        private async Task OnProyectoSelected(ChangeEventArgs e)
        {
            selectedProjectId = e.Value?.ToString() ?? &quot;&quot;;
            // Limpiar la obra seleccionada previamente
            AddTrabajo.IdSeguimientoMovil = null;
            selectedObraId = null;

            if (!string.IsNullOrEmpty(selectedProjectId))
            {
                AddTrabajo.Proyecto = Proyectos.FirstOrDefault(p =&gt; p.Id == selectedProjectId);
                filters.IdProyecto = selectedProjectId;
                // Actualizar solo la lista de obras, sin recargar la visita completa
                await LoadWorks();
                // Recargar los datos, incluyendo la lista de obras para el proyecto seleccionado
            }
            else
            {
                AddTrabajo.Proyecto = null;
                filters.IdProyecto = null;
                Seguimientos.Clear();
                await InvokeAsync(StateHasChanged);
            }
        }

        protected override async Task OnInitializedAsync()
        {
            if (string.IsNullOrEmpty(AddTrabajo.Id) &amp;&amp; !Saved)
            {
                getSelectedProject = &quot;&quot;;
                AddTrabajo = new E_Trabajo()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now
                    };
            }
            else
            {
                // AddTrabajo.Proyecto = Proyectos.FirstOrDefault(p =&gt; p.Id == AddTrabajo.Proyecto.Id);
                if (AddTrabajo.Proyecto != null)
                {
                    selectedProjectId = AddTrabajo.Proyecto.Id;
                    filters.IdProyecto = selectedProjectId;
                    await LoadWorks();
                }

                if (!string.IsNullOrEmpty(AddTrabajo.IdSeguimientoMovil))
                {
                    selectedObraId = AddTrabajo.IdSeguimientoMovil;
                    seguimiento = Seguimientos.FirstOrDefault(x =&gt; x.CodigoLPS == selectedObraId);
                }
                // getSelectedProject = AddTrabajo.Proyecto.nombre;
            }
        }

        private async Task OnObraSelected(ChangeEventArgs e)
        {
            selectedObraId = e.Value?.ToString() ?? &quot;&quot;;
            if (!string.IsNullOrEmpty(selectedObraId))
            {
                seguimiento = Seguimientos.FirstOrDefault(x =&gt; x.CodigoLPS == selectedObraId);
                AddTrabajo.IdSeguimientoMovil = seguimiento?.CodigoLPS;
            }
            await InvokeAsync(StateHasChanged);
        }

        IEnumerable&lt;E_Tecnologias&gt; Tecnologias1
        {
            get
            {
                return AddTrabajo.Tecnologias1;
            }
            set
            {
                AddTrabajo.Tecnologias1 = value.ToList();
                StateHasChanged();
            }
        }

        string TextMultiselect(List&lt;string&gt; data)
        {
            return string.Join(&quot;, &quot;, Tecnologias1, Tecnologias2);
        }

        IEnumerable&lt;E_Tecnologias&gt; Tecnologias2
        {
            get
            {
                return AddTrabajo.Tecnologias2;
            }
            set
            {
                AddTrabajo.Tecnologias2 = value.ToList();
                StateHasChanged();
            }
        }

        string Estado
        {
            get
            {
                return AddTrabajo.Estados.Last().Estado;
            }
            set
            {
                AddTrabajo.Estados.Add(new()
                    {
                        Estado = value,
                        Fecha = DateTime.Now,
                        UsuarioAsignado = AddTrabajo.IngenieroAsignado
                    });
            }
        }
            
        protected override async Task OnAfterRenderAsync(bool firstFrame)
        {
            if (!firstFrame) return;

            _disconnection.SaveStatus += (async () =&gt;
            {
                try
                {
                    if (AddTrabajo != null)
                    {
                        await _localStorage.SetItemAsync(&quot;radioelectricoadd&quot;, AddTrabajo);
                    }
                    else
                    {
                        await _localStorage.RemoveItemAsync(&quot;radioelectricoadd&quot;);
                    }
                }
                catch (Exception e)
                {
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTrabajoModal&quot;, &quot;OnAfterRenderAsync&quot;, DateTime.UtcNow);
                    throw;
                }
            });
        }

        protected override async Task OnParametersSetAsync()
        {
            if (string.IsNullOrEmpty(AddTrabajo.Id) &amp;&amp; !Saved)
            {
                getSelectedProject = &quot;&quot;;
                AddTrabajo = new E_Trabajo()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now
                    };
            }
            else if (Saved)
            {
                AddTrabajo.Proyecto = Proyectos.FirstOrDefault(p =&gt; p.Id == AddTrabajo.Proyecto.Id);

                if (AddTrabajo.Proyecto != null)
                {
                    selectedProjectId = AddTrabajo.Proyecto.Id;
                    filters.IdProyecto = selectedProjectId;
                    await LoadWorks();
                }

                if (!string.IsNullOrEmpty(AddTrabajo.IdSeguimientoMovil))
                {
                    selectedObraId = AddTrabajo.IdSeguimientoMovil;
                    seguimiento = Seguimientos.FirstOrDefault(x =&gt; x.CodigoLPS == selectedObraId);
                }

                // getSelectedProject = AddTrabajo.Proyecto.nombre;

                if (AddTrabajo.Tecnologias1.Count &gt; 0)
                {
                    for (int i = 0; i &lt;= AddTrabajo.Tecnologias1.Count - 1; i++)
                    {
                        if (string.IsNullOrEmpty(AddTrabajo.Tecnologias1[i].Id) &amp;&amp; !string.IsNullOrEmpty(AddTrabajo.Tecnologias1[i].Abreviatura1))
                        {
                            AddTrabajo.Tecnologias1[i] = Tecnologias.First(x =&gt; x.Abreviatura1.ToLower() ==
                            AddTrabajo.Tecnologias1[i].Abreviatura1.ToLower());
                        }
                    }
                }

                if (AddTrabajo.Tecnologias2.Count &gt; 0)
                {
                    for (int i = 0; i &lt;= AddTrabajo.Tecnologias2.Count - 1; i++)
                    {
                        if (string.IsNullOrEmpty(AddTrabajo.Tecnologias2[i].Id) &amp;&amp; !string.IsNullOrEmpty(AddTrabajo.Tecnologias2[i].Abreviatura2))
                        {
                            AddTrabajo.Tecnologias2[i] = Tecnologias.First(x =&gt; x.Abreviatura2.ToLower() ==
                            AddTrabajo.Tecnologias2[i].Abreviatura2.ToLower());
                        }
                    }
                }
            }
            else
            {
                getSelectedProject = AddTrabajo.Proyecto.nombre;

                for (int i = 0; i &lt;= AddTrabajo.Tecnologias1.Count - 1; i++)
                {
                    if (string.IsNullOrEmpty(AddTrabajo.Tecnologias1[i].Id) &amp;&amp; !string.IsNullOrEmpty(AddTrabajo.Tecnologias1[i].Abreviatura1))
                    {
                        AddTrabajo.Tecnologias1[i] = Tecnologias.First(x =&gt; x.Abreviatura1.ToLower() ==
                        AddTrabajo.Tecnologias1[i].Abreviatura1.ToLower());
                    }
                }

                for (int i = 0; i &lt;= AddTrabajo.Tecnologias2.Count - 1; i++)
                {
                    if (string.IsNullOrEmpty(AddTrabajo.Tecnologias2[i].Id) &amp;&amp; !string.IsNullOrEmpty(AddTrabajo.Tecnologias2[i].Abreviatura2))
                    {
                        AddTrabajo.Tecnologias2[i] = Tecnologias.First(x =&gt; x.Abreviatura2.ToLower() ==
                        AddTrabajo.Tecnologias2[i].Abreviatura2.ToLower());
                    }
                }
            }

            await InvokeAsync(StateHasChanged);
        }

        void SaveWithEstado(string estado)
        {
            _main.IsLoading = true;
            if (!Validate())
            {
                _main.IsLoading = false;
                return;
            }
            AddTrabajo.Estados.Add(new()
                {
                    Estado = estado,
                    Fecha = DateTime.Now,
                    UsuarioAsignado = AddTrabajo.IngenieroAsignado
                });
            _js.InvokeAsync&lt;string&gt;
            (&quot;SubmitForm&quot;, &quot;formTrabajo&quot;);
        }

        async Task GenerateNewVersion()
        {
            try
            {
                var dataInJson = JsonSerializer.Serialize(AddTrabajo);
                var trabajoDTODuplicado = JsonSerializer.Deserialize&lt;E_Trabajo&gt;
                (dataInJson);
                
                trabajoDTODuplicado.Id = &quot;&quot;;
                trabajoDTODuplicado.Estados = new()
                {
                    new()
                    {
                        Fecha=DateTime.Now,
                        UsuarioAsignado=new(),
                        Estado = &quot;Sin asignaci&oacute;n&quot;
                    }
                };

                trabajoDTODuplicado.Comentarios = new();
                _main.IsLoading = true;
                
                if (!Validate())
                {
                    _main.IsLoading = false;
                    return;
                }

                await _mongoContext.AddTrabajoRadio(trabajoDTODuplicado);
                _main.IsLoading = false;
            }
            catch (JsonException e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTrabajoModal&quot;, &quot;GenerateNewVersion &gt; JsonException&quot;, DateTime.UtcNow);
                throw;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTrabajoModal&quot;, &quot;GenerateNewVersion &gt; Exception&quot;, DateTime.UtcNow);
                throw;
            }
            
            Close(true);
        }

        async Task SaveAsync()
        {
            try
            {
                _main.IsLoading = true;

                if (!Validate())
                {
                    _main.IsLoading = false;
                    return;
                }

                AddTrabajo.IdSeguimientoMovil = selectedObraId;

                // AddTrabajo.IdSeguimientoMovil = IdSeguimiento;

                if (string.IsNullOrEmpty(AddTrabajo.Id))
                {
                    await _mongoContext.AddTrabajoRadio(AddTrabajo);
                }
                else
                {
                    await _mongoContext.EditTrabajoRadio(AddTrabajo);
                }

                getSelectedProject = &quot;&quot;;
                _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTrabajoModal&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close(true);
        }

        bool Validate()
        {
            return true;
        }

        string getSelectedProject { get; set; } = &quot;&quot;;
        string selectedProject
        {
            get
            {
                return getSelectedProject;
            }
            set
            {
                getSelectedProject = value;
                AddTrabajo.Proyecto = Proyectos.FirstOrDefault(p =&gt; p.nombre == value);
            }
        }
    }
    `
  },  
  {
    "ID": 6,
    "ServicesName": "TableTrabajo",
    "ServicesRoute": "Components/Areas/MovilF/RadioElectrico/TableTrabajo",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilRadioElectrico)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3&quot;&gt;
        &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Trabajos&lt;/h1&gt;
        &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;En esta p&aacute;gina puedes ver y editar tus trabajos asignados&lt;/h2&gt;
        &lt;div class=&quot;w-full flex flex-wrap justify-between items-center gap-3&quot;&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilRadioElectricoAddTrabajo)&quot;&gt;
                    @*&lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsTrabajoRadio.Add)&quot;&gt;*@
                    &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot; @onclick=&quot;()=&gt;{IsSaved=false; OpenModalAddEdit();}&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            manage_accounts
                        &lt;/span&gt;
                        A&ntilde;adir trabajo
                    &lt;/button&gt;
                &lt;/AuthorizedContent&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilRadioElectricoExportTrabajo)&quot;&gt;
                    @*&lt;AuthorizedContent Roles=&quot;@([&quot;Radioelectrico.Supervisor&quot;])&quot;&gt;*@
                    &lt;a class=&quot;cursor-pointer p-2 rounded bg-blue-400 text-white&quot; href=&quot;api/Radioelectrico/Export?Password=LPSRadioelectrico2024&quot; target=&quot;_blank&quot; @onclick=&quot;MostrarSnackbarCargando&quot; download&gt;Exportar trabajos&lt;/a&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/div&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                @if (Proyectos != null &amp;&amp; Tecnologias != null)
                {
                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;25&quot;
                                Values=&quot;Proyectos.GroupBy(x=&gt; x.cliente).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot; InitialValues=&quot;Proyectos.GroupBy(x=&gt; x.cliente).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.Clientes = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Clientes...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;24&quot; Values=&quot;Proyectos.Select(x=&gt; x.nombre).OrderBy(x=&gt; x).ToList()&quot; InitialValues=&quot;Proyectos.Select(x=&gt; x.nombre).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.Proyecto = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Proyectos...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;23&quot; Values=&quot;Proyectos.SelectMany(x=&gt; x.subproyectos).GroupBy(x=&gt; x).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot; InitialValues=&quot;Proyectos.SelectMany(x=&gt; x.subproyectos).GroupBy(x=&gt; x).Select(x=&gt; x.Key).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.Subproyecto = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Subproyectos...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;22&quot; Values=&quot;Tecnologias.Select(x=&gt; x.Abreviatura1).OrderBy(x=&gt; x).ToList()&quot; InitialValues=&quot;Tecnologias.Select(x=&gt; x.Abreviatura1).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.Tecnologia1 = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Tecnolog&iacute;as 1...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;21&quot; Values=&quot;Tecnologias.Select(x=&gt; x.Abreviatura2).OrderBy(x=&gt; x).ToList()&quot; InitialValues=&quot;Tecnologias.Select(x=&gt; x.Abreviatura2).OrderBy(x=&gt; x).ToList()&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.Tecnologia2 = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Tecnolog&iacute;as 2...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;20&quot; Values=&quot;@(new(){&quot;Sin asignaci&oacute;n&quot;, &quot;Pendiente de inicio&quot;, &quot;En curso&quot;, &quot;Parado lps&quot;, &quot;Parado cliente&quot;, &quot;Cancelado&quot;, &quot;Finalizado&quot;})&quot;
                                InitialValues=&quot;@(new(){&quot;Sin asignaci&oacute;n&quot;, &quot;Pendiente de inicio&quot;, &quot;En curso&quot;, &quot;Parado lps&quot;, &quot;Parado cliente&quot;, &quot;Cancelado&quot;, &quot;Finalizado&quot;})&quot; OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.Estados = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Estados...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; ZIndex=&quot;19&quot;  Values=&quot;@(new(){&quot;Simulaci&oacute;n PLL&quot;, &quot;Simulaci&oacute;n Cono-Esfera&quot;, &quot;Proyecto Radioel&eacute;ctrico&quot;, &quot;PSC&quot;, &quot;Requerimiento&quot;})&quot; 
                    InitialValues=&quot;@(new(){&quot;Simulaci&oacute;n PLL&quot;, &quot;Simulaci&oacute;n Cono-Esfera&quot;, &quot;Proyecto Radioel&eacute;ctrico&quot;, &quot;PSC&quot;, &quot;Requerimiento&quot;})&quot;
                                OptionValue=&quot;(e)=&gt; e&quot; SelectValues=&quot;@((e)=&gt;{filtersTrabajo.TipoTrabajo = e; LoadApi();})&quot; WidthClass=&quot;min-w-[300px] max-w-[400px]&quot;
                                ToString=&quot;@((e)=&gt; string.Join(&quot;, &quot;, e))&quot; Placeholder=&quot;Tipo de trabajo...&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;Checkbox Checked=filtersTrabajo.MisAsignaciones
                            ChangeCheck=&quot;@(()=&gt; {filtersTrabajo.MisAsignaciones = !filtersTrabajo.MisAsignaciones; LoadApi();})&quot;
                            Message=&quot;Mis asignaciones&quot;&gt;&lt;/Checkbox&gt;

                    &lt;Checkbox Checked=filtersTrabajo.MisCreaciones
                            ChangeCheck=&quot;@(()=&gt; {filtersTrabajo.MisCreaciones = !filtersTrabajo.MisCreaciones; LoadApi();})&quot;
                            Message=&quot;Mis creaciones&quot;&gt;&lt;/Checkbox&gt;
                    &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilRadioElectricoImportTrabajo)&quot;&gt;

                        &lt;label for=&quot;massiveload&quot; class=&quot;rounded p-2 bg-blue-400 text-white shadow-md&quot;&gt;Importar trabajos&lt;/label&gt;

                        &lt;InputFile id=&quot;massiveload&quot; hidden OnChange=&quot;MassiveLoad&quot;&gt;&lt;/InputFile&gt;
                    &lt;/AuthorizedContent&gt;
                }
                &lt;input type=&quot;search&quot; placeholder=&quot;Buscar...&quot; class=&quot;p-2 text-sm rounded border border-slate-300&quot; @bind-value=&quot;searchSet&quot; /&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full h-fit flex flex-wrap gap-3&quot;&gt;
            &lt;table class=&quot;table-auto overflow-x-auto w-full text-sm rounded border border-slate-300/50&quot;&gt;
                &lt;thead&gt;
                    &lt;tr class=&quot;p-2&quot;&gt;

                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            C&oacute;digo 1 Op. 1
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            C&oacute;digo 2 Op. 1
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            C&oacute;digo 1 Op. 2
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            C&oacute;digo 2 Op. 2
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Estado
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Tipo de trabajo
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Tecnolog&iacute;as operador 1
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Tecnolog&iacute;as operador 2
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Proyecto
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Subproyecto
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Ingeniero asignado
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Creado en...
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Creador
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[200px]&quot;&gt;
                            Fecha objetivo
                        &lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @if (Trabajos.Documents != null)
                    {
                        @foreach (var v in Trabajos.Documents)
                        {
                            &lt;tr class=&quot;p-2&quot;&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    &lt;div class=&quot;w-full flex flex-col gap-3&quot;&gt;
                                            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilRadioElectricoEditar)&quot;&gt;

                                                &lt;span class=&quot;text-blue-600 hover:underline cursor-pointer&quot; @onclick=&quot;()=&gt; OpenModalAddEdit(v)&quot;&gt;@(v.Codigo1Operador1)&lt;/span&gt;
                                            &lt;/AuthorizedContent&gt;

                                            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilRadioElectricoDellTrabajo)&quot;&gt;

                                                @*&lt;AuthorizedContent Roles=&quot;@([&quot;Radioelectrico.Supervisor&quot;])&quot;&gt;*@
                                                &lt;button type=&quot;button&quot; class=&quot;rounded w-fit p-2 flex flex-wrap items-center justify-center bg-red-600 text-white&quot;
                                                @onclick=&quot;()=&gt;DeleteTrabajo(v.Id)&quot;&gt;Eliminar&lt;/button&gt;
                                            &lt;/AuthorizedContent&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Codigo2Operador1)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Codigo1Operador2)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Codigo2Operador2)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-4 text-sm border border-slate-300/50&quot;&gt;
                                    &lt;span class=&quot;w-fit h-fit py-2 px-4 rounded-full text-white @(ColorEstados(v.Estados.Last().Estado ?? &quot;Sin asignaci&oacute;n&quot;))&quot;&gt;
                                        @(v.Estados.Last().Estado ?? &quot;Estado corrupto&quot;)
                                    &lt;/span&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.TipoTrabajo ?? &quot;&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(string.Join(&quot;, &quot;, v.Tecnologias1.Select(x =&gt; x.Abreviatura1)) ?? &quot;Tecnolog&iacute;a 1 corrupto&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(string.Join(&quot;, &quot;, v.Tecnologias2.Select(x =&gt; x.Abreviatura2)) ?? &quot;Tecnolog&iacute;a 2 corrupto&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Proyecto.nombre ?? &quot;Proyecto corrupto&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.Subproyecto ?? &quot;&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @if (v.IngenieroAsignado == null)
                                    {
                                        &lt;span&gt;@(&quot;Sin asignaci&oacute;n&quot;)&lt;/span&gt;
                                    }
                                    else
                                    {

                                        @($&quot;{v.IngenieroAsignado.Name} {v.IngenieroAsignado.LastName}&quot;)
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @($&quot;{v.CreatedOn.ToString(&quot;dd&quot;)} de {v.CreatedOn.ToString(&quot;MMMM&quot;)} de {v.CreatedOn.ToString(&quot;yyyy&quot;)}&quot;)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.CreatedByName)
                                &lt;/td&gt;
                                &lt;td class=&quot;p-2 text-sm border border-slate-300/50&quot;&gt;
                                    @(v.FechaObjetivo.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;
            @if (Trabajos.Documents != null)
            {
                &lt;Paginator countAllDocuments=&quot;(int)Trabajos.CountAllDocuments&quot; countPages=&quot;Trabajos.PageCount&quot; filters=&quot;filtersTrabajo&quot;
                        ReloadData=&quot;()=&gt;LoadApi()&quot;&gt;
                &lt;/Paginator&gt;
            }
        &lt;/div&gt;
    &lt;/div&gt;


    @code {
        List&lt;E_Tecnologias&gt; Tecnologias { get; set; }
        List&lt;E_Proyecto&gt; Proyectos { get; set; }
        PaginatedResult&lt;E_Trabajo&gt; Trabajos { get; set; } = new();

        GetPaginatedTrabajo filtersTrabajo = new()
            {
                PageNumber = 1,
                PageSize = 10,
                Search = &quot;&quot;
            };

        string IdSeguimiento = &quot;&quot;;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender) return;

            if (await _localStorage.ContainKeyAsync(&quot;radioelectricoadd&quot;) &amp;&amp; string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;idseguimiento&quot;]))
            {
                AddEditTrabajo = await _localStorage.GetItemAsync&lt;E_Trabajo&gt;(&quot;radioelectricoadd&quot;);
                await _localStorage.RemoveItemAsync(&quot;radioelectricoadd&quot;);
                IsSaved = true;
                OpenModalAddEdit(AddEditTrabajo);
                await InvokeAsync(StateHasChanged);
                return;
            };
        }

        protected override async Task OnInitializedAsync()
        {
            _main.BackgroundImage = &quot;&quot;;
            await LoadApi();
            if (!string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;idseguimiento&quot;]))
            {
                IdSeguimiento = _main.QueryParameters(_nav)[&quot;idseguimiento&quot;];
                OpenModalAddEdit();
                return;
            }
        }

        string searchSet
        {
            get
            {
                return filtersTrabajo.Search;
            }
            set
            {
                filtersTrabajo.Search = value;
                LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;
                filtersTrabajo.MyId = _user.id;

                var pageSize = _main.QueryParameters(_nav)[&quot;pageSize&quot;];
                var pageNumber = _main.QueryParameters(_nav)[&quot;pageNumber&quot;];

                if (!string.IsNullOrEmpty(pageSize) &amp;&amp; !string.IsNullOrEmpty(pageNumber))
                {
                    filtersTrabajo.PageNumber = int.Parse(pageNumber);
                    filtersTrabajo.PageSize = int.Parse(pageSize);
                }

                if (Proyectos == null || Tecnologias == null)
                {
                    Proyectos = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                    Tecnologias = await _mongoContext.Data&lt;E_Tecnologias&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                }

                Trabajos = await _mongoContext.GetPaginatedTrabajoRadio(filtersTrabajo);
                await InvokeAsync(StateHasChanged);
                _main.IsLoading = false;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;TableTrabajo&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);
                throw;
            }
        }

        private void MostrarSnackbarCargando()
        {
            _snackbar.InsertSnackbar(new($&quot;Cargando...&quot;, &quot;pending&quot;, 5000, &quot;bg-blue-400&quot;, &quot;text-white&quot;));

        }

        public string ColorEstados(string estado) =&gt; estado switch
        {
            &quot;Sin asignaci&oacute;n&quot; =&gt; &quot;bg-slate-300&quot;,
            &quot;Pendiente de inicio&quot; =&gt; &quot;bg-cyan-400&quot;,
            &quot;En curso&quot; =&gt; &quot;bg-blue-500&quot;,
            &quot;Parado lps&quot; =&gt; &quot;bg-amber-500&quot;,
            &quot;Parado cliente&quot; =&gt; &quot;bg-amber-500&quot;,
            &quot;Cancelado&quot; =&gt; &quot;bg-slate-950&quot;,
            &quot;Finalizado&quot; =&gt; &quot;bg-emerald-500&quot;,
            _ =&gt; &quot;&quot;
        };

        async Task MassiveLoad(InputFileChangeEventArgs e)
        {
            try
            {
                _main.IsLoading = true;
                var ms = new MemoryStream();

                await e.File.OpenReadStream(e.File.Size).CopyToAsync(ms);
                await _mongoContext.Import(ms.ToArray(), _mongoUsers);

                _main.IsLoading = false;
            }
            catch (Exception ex)
            {
                await _mongoContext.RegistroError(ex.Message, _user.name, _user.id, &quot;TableTrabajo&quot;, &quot;MassiveLoad&quot;, DateTime.UtcNow);
                throw;
            }
        }

        //Modal AddEdit
        bool IsSaved = false;

        E_Trabajo AddEditTrabajo = new()
            {
                Comentarios = new(),
                FechaObjetivo = DateTime.Now
            };

        void OpenModalAddEdit(E_Trabajo edit = null)
        {
            if (edit != null)
            {
                AddEditTrabajo = edit;
            }
            else
            {
                AddEditTrabajo = new()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now
                    };
            }

            var modal = _modal.ShowModal(typeof(AddEditTrabajoModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditTrabajoModal.AddTrabajo), AddEditTrabajo},
                {nameof(AddEditTrabajoModal.Saved),IsSaved},
                {nameof(AddEditTrabajoModal.IdSeguimiento),IdSeguimiento},
                {nameof(AddEditTrabajoModal.Proyectos),Proyectos},
                {nameof(AddEditTrabajoModal.Tecnologias),Tecnologias},
            }, FixedWidth: 80);

            modal.OnCloseModal += ResponseModalAddEdit;
        }


        async Task DeleteTrabajo(string id)
        {
                var modal = _modal.ShowModal(typeof(ConfirmationModal), new Dictionary&lt;string, object&gt;()
                {
                    {nameof(ConfirmationModal.Message), &quot;&iquest;Eliminar este trabajo?&quot;},
                    {nameof(ConfirmationModal.Title), &quot;Eliminar trabajo&quot;},
                }, FixedWidth: 50);

                modal.OnCloseModal += async (b) =&gt; {
                    if(b)
                    {
                        try
                        {
                            await _mongoContext.DeleteRadioelectrico(id);
                        }
                        catch (Exception e)
                        {
                            
                            await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;TableTrabajo&quot;, &quot;DeleteTrabajo&quot;, DateTime.UtcNow);
                            throw;
                        }
                    
                    await LoadApi();
                    }
                };
        }

        async void ResponseModalAddEdit(bool success)
        {
            AddEditTrabajo = new E_Trabajo()
            {
                Comentarios = new(),
                FechaObjetivo = DateTime.Now
            };
            
            IsSaved = false;
            IdSeguimiento = &quot;&quot;;

            if(success)
            {
                await LoadApi();
            }

            await _localStorage.RemoveItemAsync(&quot;radioelectricoadd&quot;);
            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 7,
    "ServicesName": "PredicatedFindAllExcel",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Data/Helpers/PredicatedFindAllExcel",
    "ServicesDescription":`
    `,
    "Code": `
    //Sin contenido
    `
  },
  {
    "ID": 8,
    "ServicesName": "HitosNombres",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Data/HitosNombres",
    "ServicesDescription":`
    `,
    "Code": `
    public static class HitosNombres
    {
        public static List&lt;string&gt; Hitos = new()
            {
                //&quot;Acceso Documentaci&oacute;n y Visita&quot;, &quot;Acta Replanteo&quot;, &quot;CVE&quot;, &quot;C&aacute;lculo PLL&quot;, &quot;Plano PLL&quot;, &quot;Memoria Radioel&eacute;ctrico&quot;, &quot;Fotomontaje&quot;,
                //&quot;Proyecto&quot;, &quot;Plano constructivo&quot;, &quot;Coordinaci&oacute;n&quot;, &quot;Legalizaci&oacute;n AYTO&quot;, &quot;DF&quot;, &quot;Puesta en servicio&quot;, &quot;CFO&quot;, &quot;ASBuilt&quot;, &quot;Plano ASBuilt&quot;, &quot;Plano M2 CAP&quot;
                &quot;Acta Replanteo&quot;, &quot;Plano M2 CAP&quot;, &quot;Plano constructivo&quot;, &quot;Coordinaci&oacute;n&quot;, &quot;Memoria Radioel&eacute;ctrico&quot;, &quot;ASBuilt&quot;, &quot;Legalizaci&oacute;n AYTO&quot;
            };
    }
    `
  },
  {
    "ID": 9,
    "ServicesName": "TarjetaAccesoDocumentacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/TarjetaAccesoDocumentacion",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;div class=&quot;min-w-[400px] h-fit flex flex-col p-2 gap-3 rounded bg-slate-50 shadow-md&quot;&gt;
        &lt;div class=&quot;w-full ml-2 text-blue-400 text-xl font-bold flex flex-wrap items-center gap-3&quot;&gt;
            @($&quot;Visitas y acceso {identifier}&quot;) -

            @if (data != null)
            {
                &lt;span class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(data[selectedVisita].Estados.Last().Index)) text-white text-sm&quot;&gt;
                    @(data[selectedVisita].Estados.Last().Nombre)
                &lt;/span&gt;
            }
        &lt;/div&gt;

        @if (data != null)
        {
            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Selecciona una visita&lt;/span&gt;

                &lt;select type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind=&quot;selectedVisita&quot;&gt;
                    @foreach (var v in data)
                    {
                        &lt;option value=&quot;@(data.IndexOf(v))&quot;&gt;@($&quot;{v.CreatedOn:dd/MM/yyyy}&quot;)&lt;/option&gt;
                    }
                &lt;/select&gt;
            &lt;/div&gt;

            @if (data[selectedVisita].AccesoDocumentacion != null)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de solicitud de acceso&lt;/span&gt;

                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                        value=&quot;@(data[selectedVisita].AccesoDocumentacion.FechaSolicitado != null ?data[selectedVisita].AccesoDocumentacion.FechaSolicitado.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)&quot; readonly /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Autorizado&lt;/span&gt;

                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                        value=&quot;@(data[selectedVisita].AccesoDocumentacion.Autorizado != null ?data[selectedVisita].AccesoDocumentacion.Autorizado : &quot;&quot;)&quot; readonly /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de inicio de acceso&lt;/span&gt;

                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                        value=&quot;@(data[selectedVisita].AccesoDocumentacion.FechaInicioAutorizado != null ?data[selectedVisita].AccesoDocumentacion.FechaInicioAutorizado.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)&quot; readonly /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de fin de acceso&lt;/span&gt;

                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                        value=&quot;@(data[selectedVisita].AccesoDocumentacion.FechaFinAutorizado!= null ?data[selectedVisita].AccesoDocumentacion.FechaFinAutorizado.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)&quot; readonly /&gt;
                &lt;/div&gt;
            }

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                    value=&quot;@(data[selectedVisita].FechaEstimadaVisita != null ?data[selectedVisita].FechaEstimadaVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)&quot; readonly /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnicos asignados&lt;/span&gt;

                &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                    value=&quot;@(data[selectedVisita].AsignadoA != null ? string.Join(&quot;, &quot;, data[selectedVisita].AsignadoA.Select(x=&gt; $&quot;{x.Name} {x.LastName}&quot;).ToArray()) : &quot;&quot;)&quot; readonly /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de visita&lt;/span&gt;

                &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot;
                    value=&quot;@(data[selectedVisita].FechaRealVisita != null ?data[selectedVisita].FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)&quot; readonly /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios&lt;/span&gt;

                @foreach (var v in data[selectedVisita].Comentarios)
                {
                    &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                        &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                            &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                            &lt;/div&gt;

                            @v.Name
                        &lt;/div&gt;

                        &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                    &lt;/div&gt;
                }
            &lt;/div&gt;
        }

        @ChildContent

    &lt;/div&gt;

    @code {
        [Parameter] public List&lt;E_Visitas&gt; data { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public string identifier { get; set; } = &quot;&quot;;

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },  
  {
    "ID": 10,
    "ServicesName": "TarjetaActaReplanteo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/TarjetaActaReplanteo",
    "ServicesDescription":`
    `,
    "Code": `
    @using Microsoft.IdentityModel.Tokens
    @typeparam T where T : BaseDataSeguimientoMovil

    &lt;div class=&quot;min-w-[400px] h-fit flex flex-col p-2 gap-3 rounded bg-slate-50 shadow-md&quot;&gt;
        &lt;div class=&quot;w-full ml-2 text-blue-400 text-xl font-bold flex flex-wrap items-center gap-3&quot;&gt;
            @identifier
        &lt;/div&gt;

        &lt;button type=&quot;button&quot; class=&quot;w-fit h-fit p-2 bg-blue-400 text-white rounded&quot; @onclick=&quot;@(async ()=&gt; {await CreateVersion.InvokeAsync(); StateHasChanged();})&quot;&gt;
            A&ntilde;adir versi&oacute;n de @(identifier)
        &lt;/button&gt;

        @AplicaSection

        @if (CountData != 0)
        {
            &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50 shadow-md&quot; @bind=&quot;SelectedOne&quot;&gt;
                @foreach (var v in data)
                {
                    &lt;option value=&quot;@(data.IndexOf(v))&quot;&gt;@($&quot;{v.FechaCreacionData.ToString(&quot;dd&quot;)} de {v.FechaCreacionData.ToString(&quot;MMMM&quot;)} de {v.FechaCreacionData.ToString(&quot;yyyy&quot;)}, {v.FechaCreacionData.ToString(&quot;HH:mm:ss&quot;)}&quot;)&lt;/option&gt;
                }
            &lt;/select&gt;
        }

        @if (SelectedOne != -1)
        {

            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=data[SelectedOne].Facturable ChangeCheck=&quot;()=&gt; {data[SelectedOne].Facturable = !data[SelectedOne].Facturable; InvokeAsync(StateHasChanged);}&quot;&gt;

            &lt;/Checkbox&gt;

            @if (data[SelectedOne].Facturable)
            {
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-Value=&quot;data[SelectedOne].CantidadAFacturar&quot; /&gt;
            }

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaPlanificacion&quot; /&gt;
            &lt;/div&gt;

            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=data[SelectedOne].TecnicoExterno ChangeCheck=&quot;()=&gt; {data[SelectedOne].TecnicoExterno = !data[SelectedOne].TecnicoExterno; InvokeAsync(StateHasChanged);}&quot;&gt;

            &lt;/Checkbox&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;

                @if (!data[SelectedOne].TecnicoExterno)
                {
                    @if (data[SelectedOne].Tecnico != null)
                    {
                        &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data[SelectedOne].Tecnico = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                    InitialTextValue=&quot;@($&quot;{data[SelectedOne].Tecnico.Name} {data[SelectedOne].Tecnico.LastName}&quot;)&quot; InitialValue=&quot;data[SelectedOne].Tecnico&quot;&gt;&lt;/Autocomplete&gt;
                    }
                    else
                    {
                        &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data[SelectedOne].Tecnico = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;&lt;/Autocomplete&gt;
                    }
                }
                else
                {
                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].TecnicoExternoNombre&quot; /&gt;
                }
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de entrega&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaHito&quot; /&gt;
            &lt;/div&gt;
        
            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaAprobacion&quot; /&gt;
            &lt;/div&gt;
            @if (data[SelectedOne].FechaAprobacion == null)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de negaci&oacute;n&lt;/span&gt;

                    &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            

            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=data[SelectedOne].SubirDocs ChangeCheck=&quot;()=&gt; {data[SelectedOne].SubirDocs= !data[SelectedOne].SubirDocs; InvokeAsync(StateHasChanged);}&quot;&gt;

            &lt;/Checkbox&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaSubidaDocs&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario&lt;/span&gt;

                &lt;textarea class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind=&quot;data[SelectedOne].Comentario&quot; /&gt;
            &lt;/div&gt;

            @ChildContent

    @*         &lt;div class=&quot;w-full p-2 flex flex-wrap justify-end items-center gap-2&quot;&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-black text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;Parado&quot;))&quot;&gt;Parar&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;En curso&quot;))&quot;&gt;En curso&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-red-600 text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;Cancelado&quot;))&quot;&gt;Cancelar&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-teal-400 text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;Finalizado&quot;))&quot;&gt;Finalizar&lt;/button&gt;
            &lt;/div&gt; *@
        }

    &lt;/div&gt;

    @code {
        [Parameter] public List&lt;T&gt; data { get; set; }
        [Parameter] public int CountData { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public string identifier { get; set; }
        [Parameter] public EventCallback CreateVersion { get; set; }
        [Parameter] public RenderFragment AplicaSection { get; set; }
        public int SelectedOne = -1;

        protected override async Task OnInitializedAsync()
        {
            if (CountData &gt; 0 &amp;&amp; data[0].FechaCreacionData &gt; new DateTime(2018, 1, 1))
            {
                SelectedOne = CountData - 1;
            }
        }

        public string ColorEstado(string estado) =&gt; estado switch
        {
            &quot;Sin iniciar&quot; =&gt; &quot;bg-slate-600&quot;,
            &quot;Parado&quot; =&gt; &quot;bg-amber-400&quot;,
            &quot;En curso&quot; =&gt; &quot;bg-blue-400&quot;,
            &quot;Cancelado&quot; =&gt; &quot;bg-black&quot;,
            &quot;Finalizado&quot; =&gt; &quot;bg-teal-400&quot;,
            _ =&gt; &quot;bg-blue-400&quot;
        };
    }
    `
  },
  {
    "ID": 11,
    "ServicesName": "TarjetaBaseData",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/TarjetaBaseData",
    "ServicesDescription":`
    `,
    "Code": `
    @typeparam T where T : BaseDataSeguimientoMovil

    &lt;div class=&quot;min-w-[400px] h-fit flex flex-col p-2 gap-3 rounded bg-slate-50 shadow-md&quot;&gt;
        &lt;div class=&quot;w-full ml-2 text-blue-400 text-xl font-bold flex flex-wrap items-center gap-3&quot;&gt;
            @identifier
        &lt;/div&gt;

        &lt;button type=&quot;button&quot; class=&quot;w-fit h-fit p-2 bg-blue-400 text-white rounded&quot; @onclick=&quot;@(async ()=&gt; {await CreateVersion.InvokeAsync(); InvokeAsync(StateHasChanged);})&quot;&gt;
            A&ntilde;adir versi&oacute;n de @(identifier)
        &lt;/button&gt;

        @AplicaSection

        @if (CountData != 0)
        {
            &lt;select class=&quot;w-full p-2 rounded border border-slate-300/50 shadow-md&quot; @bind=&quot;SelectedOne&quot;&gt;
                @foreach (var v in data)
                {
                    &lt;option value=&quot;@(data.IndexOf(v))&quot;&gt;@($&quot;{v.FechaCreacionData.ToString(&quot;dd&quot;)} de {v.FechaCreacionData.ToString(&quot;MMMM&quot;)} de {v.FechaCreacionData.ToString(&quot;yyyy&quot;)}, {v.FechaCreacionData.ToString(&quot;HH:mm:ss&quot;)}&quot;)&lt;/option&gt;
                }
            &lt;/select&gt;
        }


        @if (SelectedOne != -1)
        {
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=data[SelectedOne].Facturable ChangeCheck=&quot;()=&gt; {data[SelectedOne].Facturable = !data[SelectedOne].Facturable; InvokeAsync(StateHasChanged);}&quot;&gt;

            &lt;/Checkbox&gt;

            @if (data[SelectedOne].Facturable)
            {
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-Value=&quot;data[SelectedOne].CantidadAFacturar&quot; /&gt;
            }

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaPlanificacion&quot; /&gt;
            &lt;/div&gt;

            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=data[SelectedOne].TecnicoExterno ChangeCheck=&quot;()=&gt; {data[SelectedOne].TecnicoExterno = !data[SelectedOne].TecnicoExterno; InvokeAsync(StateHasChanged);}&quot;&gt;

            &lt;/Checkbox&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;

                @if (!data[SelectedOne].TecnicoExterno)
                {
                    @if (data[SelectedOne].Tecnico != null)
                    {
                        &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data[SelectedOne].Tecnico = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                    InitialTextValue=&quot;@($&quot;{data[SelectedOne].Tecnico.Name} {data[SelectedOne].Tecnico.LastName}&quot;)&quot; InitialValue=&quot;data[SelectedOne].Tecnico&quot;&gt;&lt;/Autocomplete&gt;
                    }
                    else
                    {
                        &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data[SelectedOne].Tecnico = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;&lt;/Autocomplete&gt;
                    }
                }
                else
                {
                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].TecnicoExternoNombre&quot; /&gt;
                }
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de entrega&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaHito&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaAprobacion&quot; /&gt;
            &lt;/div&gt;

            @if(data[SelectedOne].FechaAprobacion == null)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de negaci&oacute;n&lt;/span&gt;

                    &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }

            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=data[SelectedOne].SubirDocs ChangeCheck=&quot;()=&gt; {data[SelectedOne].SubirDocs= !data[SelectedOne].SubirDocs; InvokeAsync(StateHasChanged);}&quot;&gt;

            &lt;/Checkbox&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/span&gt;

                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data[SelectedOne].FechaSubidaDocs&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario&lt;/span&gt;

                &lt;textarea class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind=&quot;data[SelectedOne].Comentario&quot; /&gt;
            &lt;/div&gt;

            @ChildContent

    @*         &lt;div class=&quot;w-full p-2 flex flex-wrap justify-end items-center gap-2&quot;&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-black text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;Parado&quot;))&quot;&gt;Parar&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;En curso&quot;))&quot;&gt;En curso&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-red-600 text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;Cancelado&quot;))&quot;&gt;Cancelar&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-teal-400 text-white&quot; @onclick=&quot;@(()=&gt; data[SelectedOne].Estados.Add(DateTime.Now.ToString(), &quot;Finalizado&quot;))&quot;&gt;Finalizar&lt;/button&gt;
            &lt;/div&gt; *@
        }

    &lt;/div&gt;

    @code {
        [Parameter] public List&lt;T&gt; data { get; set; }
        [Parameter] public int CountData { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public string identifier { get; set; }
        [Parameter] public EventCallback CreateVersion { get; set; }
        [Parameter] public RenderFragment AplicaSection { get; set; }

        public int SelectedOne = -1;

        protected override async Task OnInitializedAsync()
        {
            if (CountData &gt; 0 &amp;&amp; data[0].FechaCreacionData &gt; new DateTime(2018, 1, 1))
            {
                SelectedOne = CountData-1;
            }
        }

        public string ColorEstado(string estado) =&gt; estado switch
        {
            &quot;Sin iniciar&quot; =&gt; &quot;bg-slate-600&quot;,
            &quot;Parado&quot; =&gt; &quot;bg-amber-400&quot;,
            &quot;En curso&quot; =&gt; &quot;bg-blue-400&quot;,
            &quot;Cancelado&quot; =&gt; &quot;bg-black&quot;,
            &quot;Finalizado&quot; =&gt; &quot;bg-teal-400&quot;,
            _ =&gt; &quot;bg-blue-400&quot;
        };
    }
    `
  },
  {
    "ID": 12,
    "ServicesName": "TarjetaCoordinacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/TarjetaCoordinacion",
    "ServicesDescription":`
    `,
    "Code": `
    @using SeguimientoMovilLogic.Extra.DataSeguimiento
    <div class="min-w-[400px] h-fit flex flex-col p-2 gap-3 rounded bg-slate-50 shadow-md">
        <div class="w-full ml-2 text-blue-400 text-xl font-bold flex flex-wrap items-center gap-3">
            @identifier
        </div>

        <button type="button" class="w-fit h-fit p-2 bg-blue-400 text-white rounded" @onclick="@(async ()=> {await CreateVersion.InvokeAsync(); StateHasChanged();})">
            Añadir versión de @(identifier)
        </button>

        @AplicaSection

        @if (CountData != 0)
        {
            <select class="w-full p-2 rounded border border-slate-300/50 shadow-md" @bind="SelectedOne">
                @foreach (var v in data)
                {
                    <option value="@(data.IndexOf(v))">@($"{v.FechaCreacionData.ToString("dd")} de {v.FechaCreacionData.ToString("MMMM")} de {v.FechaCreacionData.ToString("yyyy")}, {v.FechaCreacionData.ToString("HH:mm:ss")}")</option>
                }
            </select>
        }
        @if (SelectedOne != -1)
        {

            <Checkbox Message="¿Facturable?" Checked=data[SelectedOne].Facturable ChangeCheck="()=> {data[SelectedOne].Facturable = !data[SelectedOne].Facturable; InvokeAsync(StateHasChanged);}">

            </Checkbox>

            @if (data[SelectedOne].Facturable)
            {
                <InputNumber TValue="float" step="0.01" class="w-full rounded border boder-slate-300/50 p-2" @bind-Value="data[SelectedOne].CantidadAFacturar" />
            }

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de planificación</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaPlanificacion" />
            </div>

            <Checkbox Message="¿Técnico externo?" Checked=data[SelectedOne].TecnicoCSSExterno ChangeCheck="()=> {data[SelectedOne].TecnicoCSSExterno= !data[SelectedOne].TecnicoCSSExterno; InvokeAsync(StateHasChanged);}">

            </Checkbox>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Técnico</span>

                @if (!data[SelectedOne].TecnicoCSSExterno)
                {
                    @if (data[SelectedOne].TecnicoCSS != null)
                    {
                        <Autocomplete T="E_User" SelectOne="(e)=> data[SelectedOne].TecnicoCSS = e" ToString="@((e)=> $"{e.Name} {e.LastName}")"
                                    Database="@DatabaseIdentifiers.Main"
                                    FilterMongo="@((s)=> Builders<E_User>.Filter.Regex(x=> x.Name, new BsonRegularExpression(s, "i")))"
                                    InitialTextValue="@($"{data[SelectedOne].TecnicoCSS.Name} {data[SelectedOne].TecnicoCSS.LastName}")" InitialValue="data[SelectedOne].TecnicoCSS"></Autocomplete>
                    }
                    else
                    {
                        <Autocomplete T="E_User" SelectOne="(e)=> data[SelectedOne].TecnicoCSS = e" ToString="@((e)=> $"{e.Name} {e.LastName}")"
                                    Database="@DatabaseIdentifiers.Main"
                                    FilterMongo="@((s)=> Builders<E_User>.Filter.Regex(x=> x.Name, new BsonRegularExpression(s, "i")))"></Autocomplete>
                    }
                }
                else
                {
                    <input type="text" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].TecnicoCSSExternoNombre" />
                }
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de nombramiento</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaNombramiento" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de aprobación PSS</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaAprobacionPSS" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de OK doc contrata</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaOkDocContrata" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de visado</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaVisado" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de visita</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaVisita1" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de visita 2</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaVisita2" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de visita 3</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaVisita3" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de visita 4</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaVisita4" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de fin de obra</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaFinObra" />
            </div>

            <Checkbox Message="¿Subir documentación?" Checked=data[SelectedOne].SubirDocs ChangeCheck="()=> {data[SelectedOne].SubirDocs= !data[SelectedOne].SubirDocs; InvokeAsync(StateHasChanged);}">

            </Checkbox>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Fecha de subida de documentación</span>

                <input type="date" class="w-full rounded border boder-slate-300/50 p-2" @bind-value="data[SelectedOne].FechaSubidaDocs" />
            </div>

            <div class="w-full p-2 flex flex-wrap gap-2">
                <span class="w-full text-blue-400">Comentario</span>

                <textarea class="w-full rounded border boder-slate-300/50 p-2" @bind="data[SelectedOne].Comentario" />
            </div>

            @ChildContent

    @*         <div class="w-full p-2 flex flex-wrap justify-end items-center gap-2">
                <button type="button" class="p-2 rounded bg-black text-white" @onclick="@(()=> data[SelectedOne].Estados.Add(DateTime.Now.ToString(), "Parado"))">Parar</button>
                <button type="button" class="p-2 rounded bg-blue-400 text-white" @onclick="@(()=> data[SelectedOne].Estados.Add(DateTime.Now.ToString(), "En curso"))">En curso</button>
                <button type="button" class="p-2 rounded bg-red-600 text-white" @onclick="@(()=> data[SelectedOne].Estados.Add(DateTime.Now.ToString(), "Cancelado"))">Cancelar</button>
                <button type="button" class="p-2 rounded bg-teal-400 text-white" @onclick="@(()=> data[SelectedOne].Estados.Add(DateTime.Now.ToString(), "Finalizado"))">Finalizar</button>
            </div> *@
        }

    </div>

    @code {
        [Parameter] public List<DataCoordinacion> data { get; set; }
        [Parameter] public int CountData { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public string identifier { get; set; }
        [Parameter] public EventCallback CreateVersion { get; set; }
        [Parameter] public RenderFragment AplicaSection { get; set; }
        public int SelectedOne = -1;

        protected override async Task OnInitializedAsync()
        {
            if (CountData > 0 && data[0].FechaCreacionData > new DateTime(2018, 1, 1))
            {
                SelectedOne = CountData - 1;
            }
        }

        public string ColorEstado(string estado) => estado switch
        {
            "Sin iniciar" => "bg-slate-600",
            "Parado" => "bg-amber-400",
            "En curso" => "bg-blue-400",
            "Cancelado" => "bg-black",
            "Finalizado" => "bg-teal-400",
            _ => "bg-blue-400"
        };
    }
    `
  },
  {
    "ID": 13,
    "ServicesName": "TarjetaInformacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/TarjetaInformacion",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;div class=&quot;min-w-[400px] h-fit flex flex-col p-2 gap-3 rounded bg-slate-50 shadow-md&quot;&gt;
        &lt;span class=&quot;w-full ml-2 text-blue-400 text-xl font-bold&quot;&gt;Informaci&oacute;n&lt;/span&gt;

        &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
            &lt;button type=&quot;submit&quot; class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;Guardar&lt;/button&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoInformacionAddVisita)&quot;&gt;
                
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={seg.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;

            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoInformacionAddTrabajoRadio)&quot;&gt;
            
            &lt;a href=&quot;@($&quot;radioelectrico?idseguimiento={seg.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir trabajo Radio&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo LPS&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.CodigoLPS&quot; required readonly /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;CECO&lt;/span&gt;

            &lt;select @bind=&quot;seg.Ceco&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; required&gt;
                &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                &lt;option value=&quot;BTS&quot;&gt;BTS&lt;/option&gt;
                &lt;option value=&quot;Radio&quot;&gt;Radio&lt;/option&gt;
            &lt;/select&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo propietario&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.Codigo1&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo operador&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.Codigo2&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo seguimiento&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.CodigoOtros&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Nombre&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.Nombre&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Localidad&lt;/span&gt;

            @if (seg.Municipio != null)
            {
                &lt;Autocomplete T=&quot;E_Localidades&quot; SelectOne=&quot;(e)=&gt; seg.Municipio = e&quot; ToString=&quot;(e)=&gt; e.Localidad&quot;
                Database=&quot;@DatabaseIdentifiers.Movil&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_Localidades&gt;.Filter.Regex(x=&gt; x.Localidad, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            InitialTextValue=&quot;@seg.Municipio.Localidad&quot; InitialValue=&quot;seg.Municipio&quot;&gt;
                &lt;/Autocomplete&gt;
            }
            else
            {
                &lt;Autocomplete T=&quot;E_Localidades&quot; SelectOne=&quot;(e)=&gt; seg.Municipio = e&quot; ToString=&quot;(e)=&gt; e.Localidad&quot;
                            Database=&quot;@DatabaseIdentifiers.Movil&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_Localidades&gt;.Filter.Regex(x=&gt; x.Localidad, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;
                &lt;/Autocomplete&gt;
            }
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Subproyecto&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.Subproyecto&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Contrata&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.Contrata&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha de asignaci&oacute;n del cliente&lt;/span&gt;

            &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.FechaAsignacionCliente&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico cliente&lt;/span&gt;

            &lt;input type=&quot;string&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;seg.TecnicoCliente&quot; required /&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    @code {
        [Parameter] public E_Seguimiento seg { get; set; } 
    }
    `
  },  
  {
    "ID": 14,
    "ServicesName": "TarjetaPedidoo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/TarjetaPedidoo",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;div class=&quot;min-w-[700px] h-fit flex flex-col p-2 gap-3 rounded bg-slate-50 shadow-md&quot;&gt;
        &lt;div class=&quot;w-full ml-2 text-blue-400 text-xl font-bold flex flex-wrap items-center gap-3&quot;&gt;
            @identifier
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full font-bold text-blue-400&quot;&gt;
                Se han facturado &lt;span class=&quot;text-emerald-400&quot;&gt;@(data.Facturas.Sum(c =&gt; c.DineroFactura).ToString(&quot;F2&quot;))&euro;&lt;/span&gt;
                de &lt;span class=&quot;text-emerald-400&quot;&gt;@(data.CantidadAFacturar.ToString(&quot;F2&quot;))&euro;&lt;/span&gt; totales &lt;br /&gt;
                @if (data.Facturas.Sum(c =&gt; c.DineroFactura) &lt; data.CantidadAFacturar)
                {
                    &lt;span&gt;Faltan &lt;span class=&quot;text-red-400&quot;&gt;@((data.CantidadAFacturar - data.Facturas.Sum(c =&gt; c.DineroFactura)).ToString(&quot;F2&quot;))&euro;&lt;/span&gt; por facturar&lt;/span&gt;
                }
                else
                {
                    &lt;span class=&quot;text-emerald-400&quot;&gt;Se ha facturado la obra&lt;/span&gt;
                }
            &lt;/span&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; de pedido&lt;/span&gt;

            &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;data.NumeroPedido&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Dinero a facturar completo (&euro;)&lt;/span&gt;

            &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-Value=&quot;data.CantidadAFacturar&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
            &lt;div class=&quot;w-full flex flex-wrap items-center&quot;&gt;
                &lt;button type=&quot;button&quot; class=&quot;w-fit h-fit p-2 rounded bg-blue-400 flex flex-wrap items-center text-white&quot;
                        @onclick=&quot;@(()=&gt;data.Facturas.Add(new(){FechaFactura = DateTime.Now, DineroFactura=0f, TrabajoFacturado=&quot;&quot;}))&quot;&gt;
                    A&ntilde;adir factura
                &lt;/button&gt;
            &lt;/div&gt;

            &lt;table class=&quot;w-full table-auto border border-collapse border-slate-300/50&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2&quot;&gt;
                            Fecha factura
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2&quot;&gt;
                            Trabajo facturado
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2&quot;&gt;
                            Cantidad facturada (&euro;)
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2&quot;&gt;
                            Acciones
                        &lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var v in data.Facturas)
                    {
                        &lt;tr&gt;
                            &lt;td class=&quot;p-2&quot;&gt;
                                &lt;input type=&quot;date&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;v.FechaFactura&quot; /&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2&quot;&gt;
                                &lt;input type=&quot;text&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-value=&quot;v.TrabajoFacturado&quot; /&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2&quot;&gt;
                                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-Value=&quot;v.DineroFactura&quot; /&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2&quot;&gt;
                                &lt;div class=&quot;w-full flex flex-wrap p-2&quot;&gt;
                                    &lt;button type=&quot;button&quot; class=&quot;w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap items-center justify-center&quot;
                                    @onclick=&quot;@(()=&gt; {data.Facturas.Remove(v); InvokeAsync(StateHasChanged);})&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            delete
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                &lt;/div&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;

    @code {
        [Parameter] public DataPedido data { get; set; }
        [Parameter] public string identifier { get; set; }

        public string ColorEstado(string estado) =&gt; estado switch
        {
            &quot;Sin iniciar&quot; =&gt; &quot;bg-slate-600&quot;,
            &quot;Parado&quot; =&gt; &quot;bg-amber-400&quot;,
            &quot;En curso&quot; =&gt; &quot;bg-blue-400&quot;,
            &quot;Cancelado&quot; =&gt; &quot;bg-black&quot;,
            &quot;Finalizado&quot; =&gt; &quot;bg-teal-400&quot;,
            _ =&gt; &quot;bg-blue-400&quot;
        };
    }
    `
  },
  {
    "ID": 15,
    "ServicesName": "THTableObras",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Helpers/THTableObras",
    "ServicesDescription":`
    `,
    "Code": `
    @typeparam T

    &lt;th class=&quot;relative p-2 border border-slate-300/50 bg-slate-50 min-w-[200px]&quot;&gt;
        &lt;div class=&quot;flex justify-between items-center gap-3&quot;&gt;
            &lt;span&gt;@THValue&lt;/span&gt;
            @if (valuesFilter != null)
            {
                &lt;button class=&quot;flex flex-wrap place-items-center p-2&quot; @onclick=&quot;()=&gt; ShowFilters = !ShowFilters&quot;&gt;
                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                        @(ShowFilters ? &quot;filter_alt_off&quot; : &quot;filter_alt&quot;)
                    &lt;/span&gt;
                &lt;/button&gt;
            }
        &lt;/div&gt;

        @if (valuesFilter != null)
        {
            &lt;div class=&quot;absolute w-full max-h-[500px] left-0 top-[100%] p-2 gap-3 overflow-y-auto flex flex-col bg-slate-100 @(ShowFilters ? &quot;h-fit&quot;: &quot;h-0 opacity-0 pointer-events-none&quot;)&quot;&gt;
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 padding rounded border border-slate-300/50&quot; @oninput=&quot;(e)=&gt;{if(e.Value!= null){SetSearch = e.Value.ToString();}}&quot; placeholder=&quot;Buscar filtro...&quot; /&gt;

                @foreach (var v in valuesFilter.Where(x =&gt; string.IsNullOrEmpty(SetSearch) || (x?.ToString() ?? &quot;Sin dato&quot;).ToLower().Contains(SetSearch.ToLower())))
                {
                    &lt;Checkbox Checked=&quot;@(ValuesSelected.Contains(v))&quot;
                            ChangeCheck=&quot;()=&gt; ClickFilter(v)&quot;
                            Message=&quot;@(v == null
            ? &quot;Sin dato&quot;
            : v is DateTime fecha
                ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                : v.ToString())&quot;&gt;
                    &lt;/Checkbox&gt;

                }


            &lt;/div&gt;
        }
    &lt;/th&gt;

    @code {
        [Parameter] public T bindValue { get; set; }
        [Parameter] public string THValue { get; set; }
        [Parameter] public List&lt;T&gt; valuesFilter { get; set; }
        [Parameter] public EventCallback&lt;List&lt;T&gt;&gt; FiltersChanged { get; set; }

        List&lt;T&gt; ValuesSelected = new();

        bool ShowFilters = false;

        private string Search { get; set; } = &quot;&quot;;

        public string SetSearch
        {
            get
            {
                return Search;
            }
            set
            {
                Search = value;
                InvokeAsync(StateHasChanged);
            }
        }

        void ClickFilter(T v)
        {
            if (ValuesSelected.Contains(v))
            {
                ValuesSelected.Remove(v);
            }
            else
            {
                ValuesSelected.Add(v);
            }

            FiltersChanged.InvokeAsync(ValuesSelected);

            InvokeAsync(StateHasChanged);
        }

        string TypeInput(string value) =&gt; value switch
        {
            &quot;DateTime&quot; =&gt; &quot;date&quot;,
            &quot;int&quot; =&gt; &quot;number&quot;,
            &quot;float&quot; =&gt; &quot;number&quot;,
            &quot;double&quot; =&gt; &quot;number&quot;,
            _ =&gt; &quot;text&quot;
        };
    }
    `
  },
  {
    "ID": 16,
    "ServicesName": "AddEditActaRecepcion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditActaRecepcion",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditActaRecepcion{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltActaRecepcionObraAddPPI)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar acta recepci&oacute;n obra&quot; : &quot;A&ntilde;adir acta recepci&oacute;n obra&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_localActa.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_localActa.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_localActa.TecnicoExterno = !_localActa.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_localActa.TecnicoExterno)
            {
                @if (_localActa.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _localActa.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_localActa.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_localActa.Tecnico?.Name} {_localActa.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _localActa.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_localActa.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_localActa.Facturable&quot; ChangeCheck=&quot;()=&gt; {_localActa.Facturable = !_localActa.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_localActa.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_localActa.SubirDocs= !_localActa.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_localActa.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataRecepcionObras?.Any(c =&gt; c.FechaCreacionData == _localActa.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataActaRecepcionObra _localActa { get; set; } = new DataActaRecepcionObra();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            if (!string.IsNullOrEmpty(SeguimientoId))
            {

                if (_localActa != null)
                {
                    comentarioOriginal = _localActa.Comentario; // Guardar el comentario original
                }

                // Cargar el seguimiento desde la base de datos
                var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                if (seguimiento?.Value != null)
                {
                    Seg = seguimiento.Value;

                    // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                    if (Seg.DataRecepcionObras != null &amp;&amp; Seg.DataRecepcionObras.Count &gt; 0)
                    {
                        // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                        var actaExistente = Seg.DataRecepcionObras.FirstOrDefault(a =&gt;
                            a.FechaCreacionData == _localActa.FechaCreacionData);

                        if (actaExistente != null)
                        {
                            // Cargar los datos del acta existente
                            _localActa = actaExistente;

                            comentarioOriginal = _localActa.Comentario;
                        }
                        else
                        {
                            // Crear un nuevo acta si no se encuentra uno que coincida
                            _localActa = new DataActaRecepcionObra
                                {
                                    FechaCreacionData = DateTime.Now
                                };
                            comentarioOriginal = string.Empty; // No hay comentario original
                        }
                    }
                    else
                    {
                        // Si no hay actas existentes, inicializar un nuevo acta
                        _localActa = new DataActaRecepcionObra
                            {
                                FechaCreacionData = DateTime.Now
                            };
                        comentarioOriginal = string.Empty; // No hay comentario original
                    }
                }
            }
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_localActa.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataRecepcionObras.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _localActa.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_localActa.Comentario) &amp;&amp; _localActa.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_localActa.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _localActa.Facturable;
                                    actaExistente.CantidadAFacturar = _localActa.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _localActa.FechaCreacionData;
                                    actaExistente.Aplica = _localActa.Aplica;
                                    actaExistente.FechaPlanificacion = _localActa.FechaPlanificacion;
                                    actaExistente.Tecnico = _localActa.Tecnico;
                                    actaExistente.TecnicoExterno = _localActa.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _localActa.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _localActa.FechaHito;
                                    actaExistente.FechaAprobacion = _localActa.FechaAprobacion;
                                    actaExistente.FechaRechazo = _localActa.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _localActa.Estados;
                                    actaExistente.SubirDocs = _localActa.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _localActa.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_localActa.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _localActa.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_localActa.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataRecepcionObras.Add(_localActa);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditActaRecepcion&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }


    }

    `
  },
  {
    "ID": 17,
    "ServicesName": "AddEditActaReplanteo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditActaReplanteo",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditActaReplanteo{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoActaReplanteoAddActa)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Acta Replanteo&quot; : &quot;A&ntilde;adir Acta Replanteo&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_localActa.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_localActa.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_localActa.TecnicoExterno = !_localActa.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_localActa.TecnicoExterno)
            {
                @if (_localActa.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _localActa.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_localActa.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_localActa.Tecnico?.Name} {_localActa.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _localActa.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
    @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_localActa.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_localActa.Facturable&quot; ChangeCheck=&quot;()=&gt; {_localActa.Facturable = !_localActa.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_localActa.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_localActa.SubirDocs= !_localActa.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_localActa.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataActaReplanteos?.Any(c =&gt; c.FechaCreacionData == _localActa.FechaCreacionData) == true;
        public string comentarioSeleccionado;
        
        [Parameter] public DataActaReplanteo _localActa { get; set; } = new DataActaReplanteo();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_localActa != null)
                            {
                                comentarioOriginal = _localActa.Comentario; // Guardar el comentario original
                            }
                
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataActaReplanteos != null &amp;&amp; Seg.DataActaReplanteos.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataActaReplanteos.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _localActa.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _localActa = actaExistente;

                                        comentarioOriginal = _localActa.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _localActa = new DataActaReplanteo
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _localActa = new DataActaReplanteo
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditActaReplanteo&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }

        

        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_localActa.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataActaReplanteos.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _localActa.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_localActa.Comentario) &amp;&amp; _localActa.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_localActa.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }
                        
                                    actaExistente.Facturable = _localActa.Facturable;
                                    actaExistente.CantidadAFacturar = _localActa.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _localActa.FechaCreacionData;
                                    actaExistente.Aplica = _localActa.Aplica;
                                    actaExistente.FechaPlanificacion = _localActa.FechaPlanificacion;
                                    actaExistente.Tecnico = _localActa.Tecnico;
                                    actaExistente.TecnicoExterno = _localActa.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _localActa.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _localActa.FechaHito;
                                    actaExistente.FechaAprobacion = _localActa.FechaAprobacion;
                                    actaExistente.FechaRechazo = _localActa.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _localActa.Estados;
                                    actaExistente.SubirDocs = _localActa.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _localActa.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_localActa.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _localActa.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_localActa.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataActaReplanteos.Add(_localActa);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }
                        Saved = true;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditActaReplanteo&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 18,
    "ServicesName": "AddEditAYTO",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditAYTO",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditAYTO{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraLicenciasAddLegalizacion)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar legal&quot; : &quot;A&ntilde;adir legal&quot;)
        &lt;/div&gt;

        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_AYTO.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_AYTO.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_AYTO.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AYTO.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_AYTO.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_AYTO.TecnicoExterno = !_AYTO.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_AYTO.TecnicoExterno)
            {
                @if (_AYTO.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _AYTO.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_AYTO.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_AYTO.Tecnico?.Name} {_AYTO.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _AYTO.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AYTO.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AYTO.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AYTO.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_AYTO.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AYTO.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_AYTO.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_AYTO.SubirDocs= !_AYTO.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;
        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_AYTO.Facturable&quot; ChangeCheck=&quot;()=&gt; {_AYTO.Facturable = !_AYTO.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AYTO.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_AYTO.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataLegalizacionAYTOs?.Any(c =&gt; c.FechaCreacionData == _AYTO.FechaCreacionData) == true;

        [Parameter] public DataLegalizacionAYTO _AYTO { get; set; } = new DataLegalizacionAYTO();

        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {

                if (!string.IsNullOrEmpty(SeguimientoId))
                {
                    // Cargar el seguimiento desde la base de datos
                    var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                    if (seguimiento?.Value != null)
                    {
                        Seg = seguimiento.Value;

                        // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                        if (Seg.DataLegalizacionAYTOs != null &amp;&amp; Seg.DataLegalizacionAYTOs.Count &gt; 0)
                        {
                            // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                            var AYTOExist = Seg.DataLegalizacionAYTOs.FirstOrDefault(a =&gt;
                                a.FechaCreacionData == _AYTO.FechaCreacionData);

                            if (AYTOExist != null)
                            {
                                // Cargar los datos del acta existente
                                _AYTO = AYTOExist;
                                comentarioOriginal = _AYTO.Comentario;
                            }
                            else
                            {
                                // Crear un nuevo acta si no se encuentra uno que coincida
                                _AYTO = new DataLegalizacionAYTO
                                    {
                                        FechaCreacionData = DateTime.Now
                                    };
                                comentarioOriginal = string.Empty; // No hay comentario original
                            }
                        }
                        else
                        {
                            // Si no hay actas existentes, inicializar un nuevo acta
                            _AYTO = new DataLegalizacionAYTO
                                {
                                    FechaCreacionData = DateTime.Now
                                };
                            comentarioOriginal = string.Empty; // No hay comentario original
                        }
                    }
                }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditAYTO&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

        }




        async Task SaveAsync()
        {
            try
            {

                if (!string.IsNullOrEmpty(SeguimientoId))
                {
                    // Cargar el seguimiento desde la base de datos
                    var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                    if (seguimiento?.Value != null)
                    {
                        // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                        var AYTOExist = seguimiento.Value.DataLegalizacionAYTOs.FirstOrDefault(a =&gt;
                            a.FechaCreacionData == _AYTO.FechaCreacionData);

                        if (AYTOExist != null)
                        {
                            // Si el plano existe, actualizamos sus datos
                            if (!string.IsNullOrWhiteSpace(_AYTO.Comentario) &amp;&amp; _AYTO.Comentario != comentarioOriginal)
                            {
                                string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                // Crear el comentario formateado
                                AYTOExist.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_AYTO.Comentario}&quot;;
                            }
                            AYTOExist.Facturable = _AYTO.Facturable;
                            AYTOExist.CantidadAFacturar = _AYTO.CantidadAFacturar;
                            AYTOExist.FechaCreacionData = _AYTO.FechaCreacionData;
                            AYTOExist.Aplica = _AYTO.Aplica;
                            AYTOExist.FechaPlanificacion = _AYTO.FechaPlanificacion;
                            AYTOExist.Tecnico = _AYTO.Tecnico;
                            AYTOExist.TecnicoExterno = _AYTO.TecnicoExterno;
                            AYTOExist.TecnicoExternoNombre = _AYTO.TecnicoExternoNombre;
                            AYTOExist.FechaHito = _AYTO.FechaHito;
                            AYTOExist.FechaAprobacion = _AYTO.FechaAprobacion;
                            AYTOExist.FechaRechazo = _AYTO.FechaRechazo;
                            //AYTOExist.Comentario = _AYTO.Comentario;
                            AYTOExist.Estados = _AYTO.Estados;
                            AYTOExist.SubirDocs = _AYTO.SubirDocs;
                            AYTOExist.FechaSubidaDocs = _AYTO.FechaSubidaDocs;
                        }
                        else
                        {
                            // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento

                            if (!string.IsNullOrWhiteSpace(_AYTO.Comentario))
                            {
                                string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                _AYTO.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_AYTO.Comentario}&quot;;
                            }

                            seguimiento.Value.DataLegalizacionAYTOs.Add(_AYTO);
                        }

                        // Guardar el seguimiento actualizado en la base de datos
                        await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                    }
                }

                Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditAYTO&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 19,
    "ServicesName": "AddEditBoletin",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditBoletin",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditBoletin{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraBoletinElectricoAddBoletinElectrico)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar bolet&iacute;n&quot; : &quot;A&ntilde;adir bolet&iacute;n&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_boletin.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_boletin.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_boletin.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_boletin.TecnicoExterno = !_boletin.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_boletin.TecnicoExterno)
            {
                @if (_boletin.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _boletin.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_boletin.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_boletin.Tecnico?.Name} {_boletin.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _boletin.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_boletin.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_boletin.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_boletin.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_boletin.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_boletin.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_boletin.Facturable&quot; ChangeCheck=&quot;()=&gt; {_boletin.Facturable = !_boletin.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_boletin.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_boletin.SubirDocs= !_boletin.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_boletin.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_boletin.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataBoletinElectricos?.Any(c =&gt; c.FechaCreacionData == _boletin.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataBoletinElectrico _boletin { get; set; } = new DataBoletinElectrico();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_boletin != null)
                            {
                                comentarioOriginal = _boletin.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataBoletinElectricos != null &amp;&amp; Seg.DataBoletinElectricos.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataBoletinElectricos.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _boletin.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _boletin = actaExistente;

                                        comentarioOriginal = _boletin.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _boletin = new DataBoletinElectrico
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _boletin = new DataBoletinElectrico
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditBoletin&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_boletin.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataBoletinElectricos.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _boletin.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_boletin.Comentario) &amp;&amp; _boletin.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_boletin.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _boletin.Facturable;
                                    actaExistente.CantidadAFacturar = _boletin.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _boletin.FechaCreacionData;
                                    actaExistente.Aplica = _boletin.Aplica;
                                    actaExistente.FechaPlanificacion = _boletin.FechaPlanificacion;
                                    actaExistente.Tecnico = _boletin.Tecnico;
                                    actaExistente.TecnicoExterno = _boletin.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _boletin.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _boletin.FechaHito;
                                    actaExistente.FechaAprobacion = _boletin.FechaAprobacion;
                                    actaExistente.FechaRechazo = _boletin.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _boletin.Estados;
                                    actaExistente.SubirDocs = _boletin.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _boletin.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_boletin.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _boletin.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_boletin.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataBoletinElectricos.Add(_boletin);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditBoletin&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 20,
    "ServicesName": "AddEditCalculo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditCalculo",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditCalculo{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoCalculoPLLAddTrabajo)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;
        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar c&aacute;lculo PLL&quot; : &quot;A&ntilde;adir c&aacute;lculo PLL&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Calculo.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;


        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_Calculo.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_Calculo.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Calculo.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_Calculo.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_Calculo.TecnicoExterno = !_Calculo.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_Calculo.TecnicoExterno)
            {
                @if (_Calculo.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                    SelectOne=&quot;(e)=&gt; _Calculo.Tecnico = e&quot;
                    ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                    InitialValue=&quot;@_Calculo.Tecnico&quot;
                    InitialTextValue=&quot;@($&quot;{_Calculo.Tecnico?.Name} {_Calculo.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _Calculo.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Calculo.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Calculo.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Calculo.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_Calculo.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Calculo.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;
        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_Calculo.Facturable&quot; ChangeCheck=&quot;()=&gt; {_Calculo.Facturable = !_Calculo.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_Calculo.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_Calculo.SubirDocs= !_Calculo.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Calculo.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Calculo.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataCalculoPLLs?.Any(c =&gt; c.FechaCreacionData == _Calculo.FechaCreacionData) == true;
        public string comentarioSeleccionado;
        private string comentarioOriginal;
        [Parameter] public DataCalculoPLL _Calculo { get; set; } = new DataCalculoPLL();

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_Calculo != null)
                            {
                                comentarioOriginal = _Calculo.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataCalculoPLLs != null &amp;&amp; Seg.DataCalculoPLLs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var calculoExist = Seg.DataCalculoPLLs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _Calculo.FechaCreacionData);

                                    if (calculoExist != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _Calculo = calculoExist;
                                        comentarioOriginal = _Calculo.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _Calculo = new DataCalculoPLL
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };

                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _Calculo = new DataCalculoPLL
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCalculo&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_Calculo.Comentario}&quot;;

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataCalculoPLLs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _Calculo.FechaCreacionData);

                                if (actaExistente != null)
                                {

                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_Calculo.Comentario) &amp;&amp; _Calculo.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Calculo.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }
                                    // Si el plano existe, actualizamos sus datos
                                    actaExistente.Facturable = _Calculo.Facturable;
                                    actaExistente.CantidadAFacturar = _Calculo.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _Calculo.FechaCreacionData;
                                    actaExistente.Aplica = _Calculo.Aplica;
                                    actaExistente.FechaPlanificacion = _Calculo.FechaPlanificacion;
                                    actaExistente.Tecnico = _Calculo.Tecnico;
                                    actaExistente.TecnicoExterno = _Calculo.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _Calculo.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _Calculo.FechaHito;
                                    actaExistente.FechaAprobacion = _Calculo.FechaAprobacion;
                                    actaExistente.FechaRechazo = _Calculo.FechaRechazo;
                                    // actaExistente.Comentario = _Calculo.Comentario;
                                    actaExistente.Estados = _Calculo.Estados;
                                    actaExistente.SubirDocs = _Calculo.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _Calculo.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_Calculo.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _Calculo.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Calculo.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataCalculoPLLs.Add(_Calculo);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCalculo&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            

            Saved = true;
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 21,
    "ServicesName": "AddEditCertResiduos",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditCertResiduos",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditCertResiduos{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCerTratamientoResiduosAddCertTratamiento)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Cert. Residuos&quot; : &quot;A&ntilde;adir Cert. Residuos&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_certResiduos.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_certResiduos.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_certResiduos.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_certResiduos.TecnicoExterno = !_certResiduos.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_certResiduos.TecnicoExterno)
            {
                @if (_certResiduos.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _certResiduos.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_certResiduos.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_certResiduos.Tecnico?.Name} {_certResiduos.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _certResiduos.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_certResiduos.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_certResiduos.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_certResiduos.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_certResiduos.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_certResiduos.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_certResiduos.Facturable&quot; ChangeCheck=&quot;()=&gt; {_certResiduos.Facturable = !_certResiduos.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_certResiduos.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_certResiduos.SubirDocs= !_certResiduos.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_certResiduos.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_certResiduos.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataCertsResiduos?.Any(c =&gt; c.FechaCreacionData == _certResiduos.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataCertResiduos _certResiduos { get; set; } = new DataCertResiduos();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_certResiduos != null)
                            {
                                comentarioOriginal = _certResiduos.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataCertsResiduos != null &amp;&amp; Seg.DataCertsResiduos.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataCertsResiduos.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _certResiduos.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _certResiduos = actaExistente;

                                        comentarioOriginal = _certResiduos.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _certResiduos = new DataCertResiduos
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _certResiduos = new DataCertResiduos
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCertResiduos&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_certResiduos.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataCertsResiduos.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _certResiduos.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_certResiduos.Comentario) &amp;&amp; _certResiduos.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_certResiduos.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _certResiduos.Facturable;
                                    actaExistente.CantidadAFacturar = _certResiduos.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _certResiduos.FechaCreacionData;
                                    actaExistente.Aplica = _certResiduos.Aplica;
                                    actaExistente.FechaPlanificacion = _certResiduos.FechaPlanificacion;
                                    actaExistente.Tecnico = _certResiduos.Tecnico;
                                    actaExistente.TecnicoExterno = _certResiduos.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _certResiduos.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _certResiduos.FechaHito;
                                    actaExistente.FechaAprobacion = _certResiduos.FechaAprobacion;
                                    actaExistente.FechaRechazo = _certResiduos.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _certResiduos.Estados;
                                    actaExistente.SubirDocs = _certResiduos.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _certResiduos.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_certResiduos.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _certResiduos.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_certResiduos.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataCertsResiduos.Add(_certResiduos);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCertResiduos&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 22,
    "ServicesName": "AddEditCFO",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditCFO",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditCFO{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCFOAddCFO)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 text-xl font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar CFO&quot; : &quot;A&ntilde;adir CFO&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_CFO.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
    @* 	@if (_CFO.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_CFO.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_CFO.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_CFO.TecnicoExterno = !_CFO.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_CFO.TecnicoExterno)
            {
                @if (_CFO.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _CFO.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_CFO.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_CFO.Tecnico?.Name} {_CFO.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _CFO.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_CFO.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_CFO.Facturable&quot; ChangeCheck=&quot;()=&gt; {_CFO.Facturable = !_CFO.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_CFO.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_CFO.SubirDocs= !_CFO.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_CFO.NumVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CFO.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_CFO.FacturaVisado&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_CFO.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        

        [Parameter] public DataCFO _CFO { get; set; } = new DataCFO();
        bool IsEdit =&gt; Seg?.DataCFOs?.Any(c =&gt; c.FechaCreacionData == _CFO.FechaCreacionData) == true;
        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataCFOs != null &amp;&amp; Seg.DataCFOs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var fotoExist = Seg.DataCFOs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _CFO.FechaCreacionData);

                                    if (fotoExist != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _CFO = fotoExist;
                                        comentarioOriginal = _CFO.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _CFO = new DataCFO
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = _CFO.Comentario;
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _CFO = new DataCFO
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCFO&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var CfoExist = seguimiento.Value.DataCFOs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _CFO.FechaCreacionData);

                                if (CfoExist != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    if (!string.IsNullOrWhiteSpace(_CFO.Comentario) &amp;&amp; _CFO.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        CfoExist.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_CFO.Comentario}&quot;;
                                    }
                                    CfoExist.Facturable = _CFO.Facturable;
                                    CfoExist.CantidadAFacturar = _CFO.CantidadAFacturar;
                                    CfoExist.FechaCreacionData = _CFO.FechaCreacionData;
                                    CfoExist.Aplica = _CFO.Aplica;
                                    CfoExist.FechaPlanificacion = _CFO.FechaPlanificacion;
                                    CfoExist.Tecnico = _CFO.Tecnico;
                                    CfoExist.TecnicoExterno = _CFO.TecnicoExterno;
                                    CfoExist.TecnicoExternoNombre = _CFO.TecnicoExternoNombre;
                                    CfoExist.FechaHito = _CFO.FechaHito;
                                    CfoExist.FechaAprobacion = _CFO.FechaAprobacion;
                                    CfoExist.FechaRechazo = _CFO.FechaRechazo;
                                    /* CfoExist.Comentario = _CFO.Comentario */;
                                    CfoExist.Estados = _CFO.Estados;
                                    CfoExist.SubirDocs = _CFO.SubirDocs;
                                    CfoExist.FechaSubidaDocs = _CFO.FechaSubidaDocs;
                                    CfoExist.NumVisado = _CFO.NumVisado;
                                    CfoExist.FechaVisado = _CFO.FechaVisado;
                                    CfoExist.FacturaVisado = _CFO.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_CFO.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _CFO.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_CFO.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataCFOs.Add(_CFO);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCFO&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 23,
    "ServicesName": "AddEditCoordinacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditCoordinacion",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditCoordinacion{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionCoordinacionAddCoordinacion)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Coordinador&quot; : &quot;A&ntilde;adir Coordinador&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Coordinacion.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_Coordinacion.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_Coordinacion.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@
        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_Coordinacion.TecnicoCSSExterno&quot; ChangeCheck=&quot;()=&gt; {_Coordinacion.TecnicoCSSExterno = !_Coordinacion.TecnicoCSSExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_Coordinacion.TecnicoCSSExterno)
            {
                @if (_Coordinacion.TecnicoCSS != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                    SelectOne=&quot;(e)=&gt; _Coordinacion.TecnicoCSS = e&quot;
                    ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                    InitialValue=&quot;@_Coordinacion.TecnicoCSS&quot;
                    InitialTextValue=&quot;@($&quot;{_Coordinacion.TecnicoCSS?.Name} {_Coordinacion.TecnicoCSS?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _Coordinacion.TecnicoCSS = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.TecnicoCSSExterno&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_Coordinacion.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        @* &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaNombramiento&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaAprobacionPSS&quot; /&gt;
        &lt;/div&gt;
    *@
        @* 
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha OK contrata&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaOkDocContrata&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaVisado&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visita 1&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaVisita1&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visita 2&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaVisita2&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visita 3&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaVisita3&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visita 4&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaVisita4&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha fin de obra&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaFinObra&quot; /&gt;
        &lt;/div&gt; *@

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_Coordinacion.Facturable&quot; ChangeCheck=&quot;()=&gt; {_Coordinacion.Facturable = !_Coordinacion.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;
        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_Coordinacion.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_Coordinacion.SubirDocs= !_Coordinacion.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Coordinacion.NumVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Coordinacion.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Coordinacion.FacturaVisado&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Coordinacion.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataCoordinacions?.Any(c =&gt; c.FechaCreacionData == _Coordinacion.FechaCreacionData) == true;

        [Parameter] public DataCoordinacion _Coordinacion { get; set; } = new DataCoordinacion();

        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataCoordinacions != null &amp;&amp; Seg.DataCoordinacions.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var CVEExiste = Seg.DataCoordinacions.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _Coordinacion.FechaCreacionData);

                                    if (CVEExiste != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _Coordinacion = CVEExiste;
                                        comentarioOriginal = _Coordinacion.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _Coordinacion = new DataCoordinacion
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _Coordinacion = new DataCoordinacion
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCoordinacion&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataCoordinacions.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _Coordinacion.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_Coordinacion.Comentario) &amp;&amp; _Coordinacion.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        actaExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Coordinacion.Comentario}&quot;;
                                    }
                                    actaExistente.Facturable = _Coordinacion.Facturable;
                                    actaExistente.CantidadAFacturar = _Coordinacion.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _Coordinacion.FechaCreacionData;
                                    actaExistente.Aplica = _Coordinacion.Aplica;
                                    actaExistente.FechaPlanificacion = _Coordinacion.FechaPlanificacion;
                                    actaExistente.TecnicoCSS = _Coordinacion.TecnicoCSS;
                                    actaExistente.TecnicoCSSExterno = _Coordinacion.TecnicoCSSExterno;
                                    actaExistente.TecnicoCSSExternoNombre = _Coordinacion.TecnicoCSSExternoNombre;
                                    actaExistente.FechaHito = _Coordinacion.FechaHito;
                                    actaExistente.FechaAprobacion = _Coordinacion.FechaAprobacion;
                                    actaExistente.FechaRechazo = _Coordinacion.FechaRechazo;
                                    // actaExistente.Comentario = _CVE.Comentario;
                                    actaExistente.Estados = _Coordinacion.Estados;
                                    actaExistente.SubirDocs = _Coordinacion.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _Coordinacion.FechaSubidaDocs;
                                    actaExistente.NumVisado = _Coordinacion.NumVisado;
                                    actaExistente.FechaVisado = _Coordinacion.FechaVisado;
                                    actaExistente.FacturaVisado = _Coordinacion.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_Coordinacion.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _Coordinacion.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Coordinacion.Comentario}&quot;;
                                    }



                                    seguimiento.Value.DataCoordinacions.Add(_Coordinacion);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }
            Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCoordinacion&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            

            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 24,
    "ServicesName": "AddEditCVE",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditCVE",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditCVE{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastilVisitaMastilAddSoliciVisitaMastil)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;
        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar CVE M&aacute;stil&quot; : &quot;A&ntilde;adir CVE M&aacute;stil&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_CVE.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;
        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_CVE.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_CVE.TecnicoExterno = !_CVE.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_CVE.TecnicoExterno)
            {
                @if (_CVE.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _CVE.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_CVE.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_CVE.Tecnico?.Name} {_CVE.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _CVE.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_CVE.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_CVE.Facturable&quot; ChangeCheck=&quot;()=&gt; {_CVE.Facturable = !_CVE.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_CVE.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_CVE.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@




        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_CVE.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_CVE.SubirDocs= !_CVE.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_CVE.NumVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_CVE.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_CVE.FacturaVisado&quot; /&gt;
        &lt;/div&gt; 

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_CVE.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataCVEs?.Any(c =&gt; c.FechaCreacionData == _CVE.FechaCreacionData) == true;

        [Parameter] public DataCVE _CVE { get; set; } = new DataCVE();

        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataCVEs != null &amp;&amp; Seg.DataCVEs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var CVEExiste = Seg.DataCVEs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _CVE.FechaCreacionData);

                                    if (CVEExiste != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _CVE = CVEExiste;
                                        comentarioOriginal = _CVE.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _CVE = new DataCVE
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _CVE = new DataCVE
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {


                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCVE&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataCVEs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _CVE.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_CVE.Comentario) &amp;&amp; _CVE.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        actaExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_CVE.Comentario}&quot;;
                                    }
                                    actaExistente.Facturable = _CVE.Facturable;
                                    actaExistente.CantidadAFacturar = _CVE.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _CVE.FechaCreacionData;
                                    actaExistente.Aplica = _CVE.Aplica;
                                    actaExistente.FechaPlanificacion = _CVE.FechaPlanificacion;
                                    actaExistente.Tecnico = _CVE.Tecnico;
                                    actaExistente.TecnicoExterno = _CVE.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _CVE.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _CVE.FechaHito;
                                    actaExistente.FechaAprobacion = _CVE.FechaAprobacion;
                                    actaExistente.FechaRechazo = _CVE.FechaRechazo;
                                    // actaExistente.Comentario = _CVE.Comentario;
                                    actaExistente.Estados = _CVE.Estados;
                                    actaExistente.SubirDocs = _CVE.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _CVE.FechaSubidaDocs;
                                    actaExistente.NumVisado = _CVE.NumVisado;
                                    actaExistente.FechaVisado = _CVE.FechaVisado;
                                    actaExistente.FacturaVisado = _CVE.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_CVE.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _CVE.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_CVE.Comentario}&quot;;
                                    }
                        

                    
                                    seguimiento.Value.DataCVEs.Add(_CVE);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditCVE&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 25,
    "ServicesName": "AddEditCVETorre",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditCVETorre",
    "ServicesDescription":`
    `,
    "Code": `
    @page "/AddEditCVETorre{id}"
    <AuthorizePage Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorreVisitaTorreAddSoliciVisitaTorre)"></AuthorizePage>

    <form class="w-full grid grid-cols-12 gap-4" @onsubmit="SaveAsync">

        <div class="col-span-12 text-blue-400 font-bold p-2">
            @(IsEdit ? $"Editar CVE Torre" : "Añadir CVE Torre")
        </div>
        <!-- Fecha de Creación -->
        <div class="col-span-6 p-2">
            <label for="fecha" class="block text-blue-400">Fecha de creación</label>
            <input type="datetime-local" class="w-full p-2 border border-slate-300/50 shadow-md" @bind="_CVE.FechaCreacionData" required />
        </div>
        <!-- Fecha de planificación -->
        <div class="col-span-6 p-2">
            <label for="fechaPlanificacion" class="block text-blue-400">Fecha de planificación</label>
            <input type="date" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.FechaPlanificacion" />
        </div>

        <!-- ¿Técnico Externo? Checkbox -->
        <div class="col-span-6 p-2">
            <Checkbox Message="¿Técnico externo?" Checked="_CVE.TecnicoExterno" ChangeCheck="()=> {_CVE.TecnicoExterno = !_CVE.TecnicoExterno; InvokeAsync(StateHasChanged);}" />
        </div>


        <!-- Técnico -->
        <div class="col-span-6 p-2">
            <span class="w-full text-blue-400">Técnico</span>
            @if (!_CVE.TecnicoExterno)
            {
                @if (_CVE.Tecnico != null)
                {
                    <Autocomplete T="E_User"
                    SelectOne="(e)=> _CVE.Tecnico = e"
                    ToString="@((e)=> $"{e.Name} {e.LastName}")"
                    Database="@DatabaseIdentifiers.Main"
                    FilterMongo="@((s)=> Builders<E_User>.Filter.Regex(x=> x.Name, new BsonRegularExpression(s, "i")))"
                    InitialValue="@_CVE.Tecnico"
                    InitialTextValue="@($"{_CVE.Tecnico?.Name} {_CVE.Tecnico?.LastName}")">
                    </Autocomplete>
                }
                else
                {
                    <Autocomplete T="E_User" SelectOne="(e)=> { _CVE.Tecnico = e; InvokeAsync(StateHasChanged); }" ToString="@((e)=> $"{e.Name} {e.LastName}")"
                    Database="@DatabaseIdentifiers.Main"
                    FilterMongo="@((s)=> Builders<E_User>.Filter.Regex(x=> x.Name, new BsonRegularExpression(s, "i")))">

                    </Autocomplete>
                }
            }
            else
            {
                <input type="text" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.TecnicoExternoNombre" />
            }
        </div>

        <!-- Fechas de entrega y aprobación -->
        <div class="col-span-6 p-2">
            <label for="fechaEntrega" class="block text-blue-400">Fecha de entrega</label>
            <input type="date" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.FechaHito" />
        </div>

        <div class="col-span-6 p-2">
            <label for="fechaAprobacion" class="block text-blue-400">Fecha de aprobación</label>
            <input type="date" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.FechaAprobacion" />
        </div>

        <!-- Contenedor para Fecha rechazo -->
        <div class="col-span-6 p-2">
            @if (_CVE.FechaAprobacion == null)
            {
                <div>
                    <label for="fechaRechazo" class="block text-blue-400">Fecha de rechazo</label>
                    <input type="date" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.FechaRechazo" />
                </div>
            }
            else
            {
                <!-- Espacio reservado vacío -->
                <div class="h-[72px]"></div>
            }
        </div>

        <!-- ¿Facturable? Checkbox -->
        <div class="col-span-6 p-2">
            <Checkbox Message="¿Facturable?" Checked="_CVE.Facturable" ChangeCheck="()=> {_CVE.Facturable = !_CVE.Facturable; InvokeAsync(StateHasChanged);}" />
        </div>

        <!-- Cantidad a Facturar -->
        @* @if (_CVE.Facturable)
        {
            <div class="col-span-6 p-2">
                <label class="text-blue-400">Cantidad a Facturar</label>
                <InputNumber TValue="float" step="0.01" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-Value="_CVE.CantidadAFacturar" />
            </div>
        }
    *@




        <!-- ¿Subir documentación? Checkbox -->
        <div class="col-span-6 p-2">
            <Checkbox Message="¿Subir documentación?" Checked="_CVE.SubirDocs" ChangeCheck="()=> {_CVE.SubirDocs= !_CVE.SubirDocs; InvokeAsync(StateHasChanged);}" />
        </div>

        <!-- Fecha de subida de documentación -->
        <div class="col-span-6 p-2">
            <label for="fechaSubidaDocs" class="block text-blue-400">Fecha de subida de documentación</label>
            <input type="date" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.FechaSubidaDocs" />
        </div>

        <!-- visado -->

        <div class="col-span-6 p-2">
            <span class="w-full text-blue-400">Nº Visado</span>
            <input type="text" class="p-2 w-full rounded border border-slate-300/50" @bind-value="_CVE.NumVisado" />
        </div>

        <div class="col-span-6 p-2">
            <label for="fechaVisado" class="block text-blue-400">Fecha visado</label>
            <input type="date" class="w-full p-2 border border-slate-300/50 shadow-md" @bind-value="_CVE.FechaVisado" />
        </div>

        <div class="col-span-6 p-2">
            <span class="w-full text-blue-400">Factura Visado</span>
            <input type="text" class="p-2 w-full rounded border border-slate-300/50" @bind-value="_CVE.FacturaVisado" />
        </div> 

        <!-- Comentario -->
        <div class="col-span-12 p-2">
            <label for="comentario" class="block text-blue-400">Comentario</label>
            <textarea class="w-full p-2 border border-slate-300/50 shadow-md" @bind="_CVE.Comentario"></textarea>
        </div>

        <!-- Botones -->
        <div class="col-span-12 flex flex-wrap justify-end items-end p-2 gap-3">
            <button type="button" class="col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3" @onclick="()=> Close(false)">Cancelar</button>
            <button type="submit" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Guardar</button>
        </div>
    </form>

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action<bool> Close { get; set; }
        [Parameter] public bool Saved { get; set; }


        [Parameter] public DataCVETorre _CVE { get; set; } = new DataCVETorre();

        bool IsEdit => Seg?.DataCVEsTorre?.Any(c => c.FechaCreacionData == _CVE.FechaCreacionData) == true;


        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta específica basada en una condición única
                                if (Seg.DataCVEsTorre != null && Seg.DataCVEsTorre.Count > 0)
                                {
                                    // Por ejemplo, aquí usamos FechaCreacionData como identificador único
                                    var CVEExiste = Seg.DataCVEsTorre.FirstOrDefault(a =>
                                        a.FechaCreacionData == _CVE.FechaCreacionData);

                                    if (CVEExiste != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _CVE = CVEExiste;
                                        comentarioOriginal = _CVE.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _CVE = new DataCVETorre
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _CVE = new DataCVETorre
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "AddEditCVETorre", "OnInitializedAsync", DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio único
                                var actaExistente = seguimiento.Value.DataCVEsTorre.FirstOrDefault(a =>
                                    a.FechaCreacionData == _CVE.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_CVE.Comentario) && _CVE.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
                                        // Crear el comentario formateado
                                        actaExistente.Comentario = $"{_user.name} {_user.surname} ({fechaActual}): {_CVE.Comentario}";
                                    }
                                    actaExistente.Facturable = _CVE.Facturable;
                                    actaExistente.CantidadAFacturar = _CVE.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _CVE.FechaCreacionData;
                                    actaExistente.Aplica = _CVE.Aplica;
                                    actaExistente.FechaPlanificacion = _CVE.FechaPlanificacion;
                                    actaExistente.Tecnico = _CVE.Tecnico;
                                    actaExistente.TecnicoExterno = _CVE.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _CVE.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _CVE.FechaHito;
                                    actaExistente.FechaAprobacion = _CVE.FechaAprobacion;
                                    actaExistente.FechaRechazo = _CVE.FechaRechazo;
                                    // actaExistente.Comentario = _CVE.Comentario;
                                    actaExistente.Estados = _CVE.Estados;
                                    actaExistente.SubirDocs = _CVE.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _CVE.FechaSubidaDocs;
                                    actaExistente.NumVisado = _CVE.NumVisado;
                                    actaExistente.FechaVisado = _CVE.FechaVisado;
                                    actaExistente.FacturaVisado = _CVE.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la añadimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_CVE.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
                                        _CVE.Comentario = $"{_user.name} {_user.surname} ({fechaActual}): {_CVE.Comentario}";
                                    }



                                    seguimiento.Value.DataCVEsTorre.Add(_CVE);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "AddEditCVETorre", "SaveAsync", DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 26,
    "ServicesName": "AddEditDF",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditDF",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditDF{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraVisitaDFAddVisitaDF)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar DF &quot; : &quot;A&ntilde;adir DF&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_DF.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
    @* 	@if (_DF.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_DF.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_DF.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_DF.TecnicoExterno = !_DF.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_DF.TecnicoExterno)
            {
                @if (_DF.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _DF.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_DF.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_DF.Tecnico?.Name} {_DF.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _DF.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_DF.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_DF.Facturable&quot; ChangeCheck=&quot;()=&gt; {_DF.Facturable = !_DF.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;
        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_DF.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_DF.SubirDocs= !_DF.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_DF.NumVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DF.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_DF.FacturaVisado&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_DF.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataDFs?.Any(c =&gt; c.FechaCreacionData == _DF.FechaCreacionData) == true;

        [Parameter] public DataDF _DF { get; set; } = new DataDF();
        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataDFs != null &amp;&amp; Seg.DataDFs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var DFExist = Seg.DataDFs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _DF.FechaCreacionData);

                                    if (DFExist != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _DF = DFExist;
                                        comentarioOriginal = _DF.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _DF = new DataDF
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _DF = new DataDF
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditDF&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }




        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var DFExist = seguimiento.Value.DataDFs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _DF.FechaCreacionData);

                                if (DFExist != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    if (!string.IsNullOrWhiteSpace(_DF.Comentario) &amp;&amp; _DF.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        DFExist.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_DF.Comentario}&quot;;
                                    }
                                    DFExist.Facturable = _DF.Facturable;
                                    DFExist.CantidadAFacturar = _DF.CantidadAFacturar;
                                    DFExist.FechaCreacionData = _DF.FechaCreacionData;
                                    DFExist.Aplica = _DF.Aplica;
                                    DFExist.FechaPlanificacion = _DF.FechaPlanificacion;
                                    DFExist.Tecnico = _DF.Tecnico;
                                    DFExist.TecnicoExterno = _DF.TecnicoExterno;
                                    DFExist.TecnicoExternoNombre = _DF.TecnicoExternoNombre;
                                    DFExist.FechaHito = _DF.FechaHito;
                                    DFExist.FechaAprobacion = _DF.FechaAprobacion;
                                    DFExist.FechaRechazo = _DF.FechaRechazo;
                                    // DFExist.Comentario = _DF.Comentario;
                                    DFExist.Estados = _DF.Estados;
                                    DFExist.SubirDocs = _DF.SubirDocs;
                                    DFExist.FechaSubidaDocs = _DF.FechaSubidaDocs;
                                    DFExist.NumVisado = _DF.NumVisado;
                                    DFExist.FechaVisado = _DF.FechaVisado;
                                    DFExist.FacturaVisado = _DF.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento

                                    if (!string.IsNullOrWhiteSpace(_DF.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _DF.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_DF.Comentario}&quot;;
                                    }
                                    seguimiento.Value.DataDFs.Add(_DF);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditDF&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 27,
    "ServicesName": "AddEditDocCoordinacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditDocCoordinacion",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditDocContrata{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionDocContrataAddDocumentacion)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Doc. Contrata&quot; : &quot;A&ntilde;adir Doc. Contrata&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_DocCoordinacion.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DocCoordinacion.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_DocCoordinacion.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_DocCoordinacion.TecnicoExterno = !_DocCoordinacion.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_DocCoordinacion.TecnicoExterno)
            {
                @if (_DocCoordinacion.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _DocCoordinacion.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_DocCoordinacion.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_DocCoordinacion.Tecnico?.Name} {_DocCoordinacion.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _DocCoordinacion.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DocCoordinacion.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DocCoordinacion.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DocCoordinacion.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_DocCoordinacion.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DocCoordinacion.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_DocCoordinacion.Facturable&quot; ChangeCheck=&quot;()=&gt; {_DocCoordinacion.Facturable = !_DocCoordinacion.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_DocCoordinacion.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_DocCoordinacion.SubirDocs= !_DocCoordinacion.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_DocCoordinacion.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_DocCoordinacion.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataDoscsCoordinacion?.Any(c =&gt; c.FechaCreacionData == _DocCoordinacion.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataDocCoordinacion _DocCoordinacion { get; set; } = new DataDocCoordinacion();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_DocCoordinacion != null)
                            {
                                comentarioOriginal = _DocCoordinacion.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataDoscsCoordinacion != null &amp;&amp; Seg.DataDoscsCoordinacion.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataDoscsCoordinacion.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _DocCoordinacion.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _DocCoordinacion = actaExistente;

                                        comentarioOriginal = _DocCoordinacion.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _DocCoordinacion = new DataDocCoordinacion
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _DocCoordinacion = new DataDocCoordinacion
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditDocCoordinacion&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_DocCoordinacion.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataDoscsCoordinacion.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _DocCoordinacion.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_DocCoordinacion.Comentario) &amp;&amp; _DocCoordinacion.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_DocCoordinacion.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _DocCoordinacion.Facturable;
                                    actaExistente.CantidadAFacturar = _DocCoordinacion.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _DocCoordinacion.FechaCreacionData;
                                    actaExistente.Aplica = _DocCoordinacion.Aplica;
                                    actaExistente.FechaPlanificacion = _DocCoordinacion.FechaPlanificacion;
                                    actaExistente.Tecnico = _DocCoordinacion.Tecnico;
                                    actaExistente.TecnicoExterno = _DocCoordinacion.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _DocCoordinacion.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _DocCoordinacion.FechaHito;
                                    actaExistente.FechaAprobacion = _DocCoordinacion.FechaAprobacion;
                                    actaExistente.FechaRechazo = _DocCoordinacion.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _DocCoordinacion.Estados;
                                    actaExistente.SubirDocs = _DocCoordinacion.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _DocCoordinacion.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_DocCoordinacion.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _DocCoordinacion.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_DocCoordinacion.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataDoscsCoordinacion.Add(_DocCoordinacion);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }
                        Saved = true;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditDocCoordinacion&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 28,
    "ServicesName": "AddEditFoto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditFoto",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditFoto{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotoMontajeAddPlanoFotoMontaje)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar fotomontaje&quot; : &quot;A&ntilde;adir fotomontaje&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_fotomontaje.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
    @* 	@if (_fotomontaje.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_fotomontaje.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotomontaje.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Delineante externo?&quot; Checked=&quot;_fotomontaje.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_fotomontaje.TecnicoExterno = !_fotomontaje.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;
            @if (!_fotomontaje.TecnicoExterno)
            {
                @if (_fotomontaje.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _fotomontaje.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_fotomontaje.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_fotomontaje.Tecnico?.Name} {_fotomontaje.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _fotomontaje.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotomontaje.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotomontaje.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotomontaje.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;
        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_fotomontaje.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotomontaje.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_fotomontaje.Facturable&quot; ChangeCheck=&quot;()=&gt; {_fotomontaje.Facturable = !_fotomontaje.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_fotomontaje.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_fotomontaje.SubirDocs= !_fotomontaje.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotomontaje.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_fotomontaje.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }

        bool IsEdit =&gt; Seg?.DataFotomontajes?.Any(c =&gt; c.FechaCreacionData == _fotomontaje.FechaCreacionData) == true;

        [Parameter] public DataFotomontaje _fotomontaje { get; set; } = new DataFotomontaje();
        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataFotomontajes != null &amp;&amp; Seg.DataFotomontajes.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var fotoExist = Seg.DataFotomontajes.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _fotomontaje.FechaCreacionData);

                                    if (fotoExist != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _fotomontaje = fotoExist;
                                        comentarioOriginal = _fotomontaje.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _fotomontaje = new DataFotomontaje
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _fotomontaje = new DataFotomontaje
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditFoto&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var fotoExist = seguimiento.Value.DataFotomontajes.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _fotomontaje.FechaCreacionData);

                                if (fotoExist != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_fotomontaje.Comentario) &amp;&amp; _fotomontaje.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        fotoExist.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_fotomontaje.Comentario}&quot;;
                                    }
                    
                                    fotoExist.Facturable = _fotomontaje.Facturable;
                                    fotoExist.CantidadAFacturar = _fotomontaje.CantidadAFacturar;
                                    fotoExist.FechaCreacionData = _fotomontaje.FechaCreacionData;
                                    fotoExist.Aplica = _fotomontaje.Aplica;
                                    fotoExist.FechaPlanificacion = _fotomontaje.FechaPlanificacion;
                                    fotoExist.Tecnico = _fotomontaje.Tecnico;
                                    fotoExist.TecnicoExterno = _fotomontaje.TecnicoExterno;
                                    fotoExist.TecnicoExternoNombre = _fotomontaje.TecnicoExternoNombre;
                                    fotoExist.FechaHito = _fotomontaje.FechaHito;
                                    fotoExist.FechaAprobacion = _fotomontaje.FechaAprobacion;
                                    fotoExist.FechaRechazo = _fotomontaje.FechaRechazo;
                                    // fotoExist.Comentario = _fotomontaje.Comentario;
                                    fotoExist.Estados = _fotomontaje.Estados;
                                    fotoExist.SubirDocs = _fotomontaje.SubirDocs;
                                    fotoExist.FechaSubidaDocs = _fotomontaje.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_fotomontaje.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _fotomontaje.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_fotomontaje.Comentario}&quot;;
                                    }
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    seguimiento.Value.DataFotomontajes.Add(_fotomontaje);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditFoto&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 29,
    "ServicesName": "AddEditInfo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditInfo",
    "ServicesDescription":`
    `,
    "Code": `
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotoMontajeAddPlanoFotoMontaje)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12&quot; @onsubmit=&quot;() =&gt; SaveAsync()&quot;&gt;
        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar informaci&oacute;n&quot; : &quot;A&ntilde;adir informaci&oacute;n&quot;)
        &lt;/div&gt;

        @*   &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo LPS&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.CodigoLPS&quot; required /&gt;
        &lt;/div&gt; *@

        @*  &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;CECO&lt;/span&gt;

            &lt;select @bind=&quot;AddEdit.Ceco&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; required&gt;
                &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                &lt;option value=&quot;BTS&quot;&gt;BTS&lt;/option&gt;
                &lt;option value=&quot;Radio&quot;&gt;Radio&lt;/option&gt;
            &lt;/select&gt;
        &lt;/div&gt; *@

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo propietario&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.Codigo1&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo operador&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.Codigo2&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;C&oacute;digo seguimiento&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.CodigoOtros&quot;/&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Nombre&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.Nombre&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Nombre&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.Zona&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Localidad&lt;/span&gt;
            @if (AddEdit.Municipio != null)
            {
                &lt;Autocomplete T=&quot;E_Localidades&quot; SelectOne=&quot;(e)=&gt; AddEdit.Municipio = e&quot; ToString=&quot;(e)=&gt; e.Localidad&quot;
                Database=&quot;@DatabaseIdentifiers.Movil&quot;
                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_Localidades&gt;.Filter.Regex(x=&gt; x.Localidad, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                InitialTextValue=&quot;@AddEdit.Municipio.Localidad&quot; InitialValue=&quot;AddEdit.Municipio&quot;&gt;
                &lt;/Autocomplete&gt;
            }
            else
            {
                &lt;Autocomplete T=&quot;E_Localidades&quot; SelectOne=&quot;(e)=&gt; AddEdit.Municipio = e&quot; ToString=&quot;(e)=&gt; e.Localidad&quot;
                Database=&quot;@DatabaseIdentifiers.Movil&quot;
                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_Localidades&gt;.Filter.Regex(x=&gt; x.Localidad, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;
                &lt;/Autocomplete&gt;
            }
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Sunproyecto&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.Subproyecto&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Contrata&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.Contrata&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;Fecha de asignaci&oacute;n del cliente&lt;/span&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.FechaAsignacionCliente&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2 flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;text-blue-400 w-full&quot;&gt;T&eacute;cnico cliente&lt;/span&gt;
            &lt;input class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;AddEdit.TecnicoCliente&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;


            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot;
            @onclick=&quot;@(() =&gt; Close(false))&quot;&gt;
                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                    cancel
                &lt;/span&gt;
                Cancelar
            &lt;/button&gt;


            &lt;button id=&quot;&quot; type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;
                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                    save
                &lt;/span&gt;
                Guardar
            &lt;/button&gt;

        &lt;/div&gt;

    &lt;/form&gt;

    @code {

        [Parameter] public E_Seguimiento AddEdit { get; set; }
        [Parameter] public bool Saved { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        bool IsEdit =&gt; !string.IsNullOrEmpty(AddEdit.Id);

        protected override async Task OnAfterRenderAsync(bool firstFrame)
        {
            if (!firstFrame) return;

            _disconnection.SaveStatus += (async () =&gt;
            {
                try
                {
                    if (AddEdit != null)
                    {
                        await _localStorage.SetItemAsync(&quot;infoadd&quot;, AddEdit);
                    }
                    else
                    {
                        await _localStorage.RemoveItemAsync(&quot;infoadd&quot;);
                    }
                }
                catch (Exception e)
                {
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditInfo&quot;, &quot;OnAfterRenderAsync&quot;, DateTime.UtcNow);
                    throw;
                }
            });
        }

        public async Task SaveAsync()
        {

        }
    }
    `
  },
  {
    "ID": 30,
    "ServicesName": "AddEditInformeAsBuilt",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditInformeAsBuilt",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditInformeAsBuilt{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar informe AsBuilt&quot; : &quot;A&ntilde;adir informe AsBuilt&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_informe.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_informe.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_informe.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_informe.TecnicoExterno = !_informe.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_informe.TecnicoExterno)
            {
                @if (_informe.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _informe.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_informe.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_informe.Tecnico?.Name} {_informe.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _informe.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_informe.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_informe.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_informe.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_informe.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_informe.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_informe.Facturable&quot; ChangeCheck=&quot;()=&gt; {_informe.Facturable = !_informe.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_informe.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_informe.SubirDocs= !_informe.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_informe.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_informe.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataInformesAsBuilt?.Any(c =&gt; c.FechaCreacionData == _informe.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataInformeAsBuilt _informe { get; set; } = new DataInformeAsBuilt();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {

                if (!string.IsNullOrEmpty(SeguimientoId))
                {

                    if (_informe != null)
                    {
                        comentarioOriginal = _informe.Comentario; // Guardar el comentario original
                    }

                    // Cargar el seguimiento desde la base de datos
                    var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                    if (seguimiento?.Value != null)
                    {
                        Seg = seguimiento.Value;

                        // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                        if (Seg.DataInformesAsBuilt != null &amp;&amp; Seg.DataInformesAsBuilt.Count &gt; 0)
                        {
                            // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                            var actaExistente = Seg.DataInformesAsBuilt.FirstOrDefault(a =&gt;
                                a.FechaCreacionData == _informe.FechaCreacionData);

                            if (actaExistente != null)
                            {
                                // Cargar los datos del acta existente
                                _informe = actaExistente;

                                comentarioOriginal = _informe.Comentario;
                            }
                            else
                            {
                                // Crear un nuevo acta si no se encuentra uno que coincida
                                _informe = new DataInformeAsBuilt
                                    {
                                        FechaCreacionData = DateTime.Now
                                    };
                                comentarioOriginal = string.Empty; // No hay comentario original
                            }
                        }
                        else
                        {
                            // Si no hay actas existentes, inicializar un nuevo acta
                            _informe = new DataInformeAsBuilt
                                {
                                    FechaCreacionData = DateTime.Now
                                };
                            comentarioOriginal = string.Empty; // No hay comentario original
                        }
                    }
                }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditInformeAsBuilt&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_informe.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataInformesAsBuilt.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _informe.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_informe.Comentario) &amp;&amp; _informe.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_informe.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _informe.Facturable;
                                    actaExistente.CantidadAFacturar = _informe.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _informe.FechaCreacionData;
                                    actaExistente.Aplica = _informe.Aplica;
                                    actaExistente.FechaPlanificacion = _informe.FechaPlanificacion;
                                    actaExistente.Tecnico = _informe.Tecnico;
                                    actaExistente.TecnicoExterno = _informe.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _informe.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _informe.FechaHito;
                                    actaExistente.FechaAprobacion = _informe.FechaAprobacion;
                                    actaExistente.FechaRechazo = _informe.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _informe.Estados;
                                    actaExistente.SubirDocs = _informe.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _informe.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_informe.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _informe.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_informe.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataInformesAsBuilt.Add(_informe);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditInformeAsBuilt&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 31,
    "ServicesName": "AddEditMemoria",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditMemoria",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditMemoria{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar memoria radioel&eacute;ctrico&quot; : &quot;A&ntilde;adir memoria radioel&eacute;ctrico&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Memoria.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        
        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_Memoria.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_Memoria.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_Memoria.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_Memoria.TecnicoExterno = !_Memoria.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_Memoria.TecnicoExterno)
            {
                @if (_Memoria.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _Memoria.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_Memoria.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_Memoria.Tecnico?.Name} {_Memoria.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _Memoria.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_Memoria.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_Memoria.Facturable&quot; ChangeCheck=&quot;()=&gt; {_Memoria.Facturable = !_Memoria.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_Memoria.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_Memoria.SubirDocs= !_Memoria.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Memoria.NumVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Memoria.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Memoria.FacturaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Memoria.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataMemoriaRadioelectricos?.Any(c =&gt; c.FechaCreacionData == _Memoria.FechaCreacionData) == true;

        [Parameter] public DataMemoriaRadioelectrico _Memoria { get; set; } = new DataMemoriaRadioelectrico();

        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataMemoriaRadioelectricos != null &amp;&amp; Seg.DataMemoriaRadioelectricos.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var MemExist = Seg.DataMemoriaRadioelectricos.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _Memoria.FechaCreacionData);

                                    if (MemExist != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _Memoria = MemExist;
                                        comentarioOriginal = _Memoria.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _Memoria = new DataMemoriaRadioelectrico
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _Memoria = new DataMemoriaRadioelectrico
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditMemoria&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var memoriaExist = seguimiento.Value.DataMemoriaRadioelectricos.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _Memoria.FechaCreacionData);

                                if (memoriaExist != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    if (!string.IsNullOrWhiteSpace(_Memoria.Comentario) &amp;&amp; _Memoria.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        memoriaExist.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Memoria.Comentario}&quot;;
                                    }
                                    memoriaExist.Facturable = _Memoria.Facturable;
                                    memoriaExist.CantidadAFacturar = _Memoria.CantidadAFacturar;
                                    memoriaExist.FechaCreacionData = _Memoria.FechaCreacionData;
                                    memoriaExist.Aplica = _Memoria.Aplica;
                                    memoriaExist.FechaPlanificacion = _Memoria.FechaPlanificacion;
                                    memoriaExist.Tecnico = _Memoria.Tecnico;
                                    memoriaExist.TecnicoExterno = _Memoria.TecnicoExterno;
                                    memoriaExist.TecnicoExternoNombre = _Memoria.TecnicoExternoNombre;
                                    memoriaExist.FechaHito = _Memoria.FechaHito;
                                    memoriaExist.FechaAprobacion = _Memoria.FechaAprobacion;
                                    memoriaExist.FechaRechazo = _Memoria.FechaRechazo;
                                    // memoriaExist.Comentario = _Memoria.Comentario;
                                    memoriaExist.Estados = _Memoria.Estados;
                                    memoriaExist.SubirDocs = _Memoria.SubirDocs;
                                    memoriaExist.FechaSubidaDocs = _Memoria.FechaSubidaDocs;
                                    memoriaExist.NumVisado = _Memoria.NumVisado;
                                    memoriaExist.FacturaVisado = _Memoria.FacturaVisado;
                                    memoriaExist.FechaVisado = _Memoria.FechaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    seguimiento.Value.DataMemoriaRadioelectricos.Add(_Memoria);
                                }
                                // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                if (!string.IsNullOrWhiteSpace(_Memoria.Comentario))
                                {
                                    string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                    _Memoria.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Memoria.Comentario}&quot;;
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditMemoria&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 32,
    "ServicesName": "AddEditPlanoAsBuilt",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPlanoAsBuilt",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPlanoAsbuilt{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Plano AsBuilt&quot; : &quot;A&ntilde;adir Plano AsBuilt&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_AsBuilt.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_AsBuilt.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_AsBuilt.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AsBuilt.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Delineante externo?&quot; Checked=&quot;_AsBuilt.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_AsBuilt.TecnicoExterno = !_AsBuilt.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;
            @if (!_AsBuilt.TecnicoExterno)
            {
                @if (_AsBuilt.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _AsBuilt.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_AsBuilt.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_AsBuilt.Tecnico?.Name} {_AsBuilt.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _AsBuilt.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AsBuilt.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AsBuilt.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AsBuilt.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_AsBuilt.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AsBuilt.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_AsBuilt.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_AsBuilt.SubirDocs= !_AsBuilt.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_AsBuilt.Facturable&quot; ChangeCheck=&quot;()=&gt; {_AsBuilt.Facturable = !_AsBuilt.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_AsBuilt.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Delineante --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

            @if (_AsBuilt.TecnicoDelineantePLano != null)
            {
                &lt;Autocomplete T=&quot;E_User&quot;
                            SelectOne=&quot;(e)=&gt; _AsBuilt.TecnicoDelineantePLano = e&quot;
                            ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            InitialValue=&quot;@_AsBuilt.TecnicoDelineantePLano&quot;
                            InitialTextValue=&quot;@($&quot;{_AsBuilt.TecnicoDelineantePLano?.Name} {_AsBuilt.TecnicoDelineantePLano?.LastName}&quot;)&quot;&gt;
                &lt;/Autocomplete&gt;

            }
            else
            {
                &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _AsBuilt.TecnicoDelineantePLano = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                &lt;/Autocomplete&gt;
            }
        &lt;/div&gt;

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_AsBuilt.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {
        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPlanoASBuilts?.Any(c =&gt; c.FechaCreacionData == _AsBuilt.FechaCreacionData) == true;
        [Parameter] public DataPlanoASBuilt _AsBuilt { get; set; } = new DataPlanoASBuilt();
        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {

            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPlanoASBuilts != null &amp;&amp; Seg.DataPlanoASBuilts.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var planoExistente = Seg.DataPlanoASBuilts.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _AsBuilt.FechaCreacionData);

                                    if (planoExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _AsBuilt = planoExistente;
                                        comentarioOriginal = _AsBuilt.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _AsBuilt = new DataPlanoASBuilt
                                            {
                                                FechaCreacionData = DateTime.Now
                                        
                                            };
                                        comentarioOriginal = _AsBuilt.Comentario;
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _AsBuilt = new DataPlanoASBuilt
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoAsBuilt&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                {
                    // Cargar el seguimiento desde la base de datos
                    var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                    if (seguimiento?.Value != null)
                    {
                        // Buscar si el acta ya existe usando FechaCreacionData como criterio &uacute;nico
                        var planoExistente = seguimiento.Value.DataPlanoASBuilts.FirstOrDefault(a =&gt;
                            a.FechaCreacionData == _AsBuilt.FechaCreacionData);

                        if (planoExistente != null)
                        {
                            planoExistente.TecnicoDelineantePLano = _AsBuilt.TecnicoDelineantePLano;
                        }

                        if (planoExistente != null)
                        {
                            // Si el acta existe, actualizamos sus datos
                            if (!string.IsNullOrWhiteSpace(_AsBuilt.Comentario) &amp;&amp; _AsBuilt.Comentario != comentarioOriginal)
                            {
                                string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                // Crear el comentario formateado
                                planoExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_AsBuilt.Comentario}&quot;;
                            }
                            planoExistente.Facturable = _AsBuilt.Facturable;
                            planoExistente.CantidadAFacturar = _AsBuilt.CantidadAFacturar;
                            planoExistente.FechaCreacionData = _AsBuilt.FechaCreacionData;
                            planoExistente.Aplica = _AsBuilt.Aplica;
                            planoExistente.FechaPlanificacion = _AsBuilt.FechaPlanificacion;
                            planoExistente.Tecnico = _AsBuilt.Tecnico;
                            planoExistente.TecnicoExterno = _AsBuilt.TecnicoExterno;
                            planoExistente.TecnicoExternoNombre = _AsBuilt.TecnicoExternoNombre;
                            planoExistente.FechaHito = _AsBuilt.FechaHito;
                            planoExistente.FechaAprobacion = _AsBuilt.FechaAprobacion;
                            planoExistente.FechaRechazo = _AsBuilt.FechaRechazo;
                            // planoExistente.Comentario = _AsBuilt.Comentario;
                            planoExistente.Estados = _AsBuilt.Estados;
                            planoExistente.SubirDocs = _AsBuilt.SubirDocs;
                            planoExistente.FechaSubidaDocs = _AsBuilt.FechaSubidaDocs;
                        }
                        else
                        {
                            // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                            if (!string.IsNullOrWhiteSpace(_AsBuilt.Comentario))
                            {
                                string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                _AsBuilt.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_AsBuilt.Comentario}&quot;;
                            }
                            seguimiento.Value.DataPlanoASBuilts.Add(_AsBuilt);
                        }
                        // Guardar el seguimiento actualizado en la base de datos
                        await _mongoContext.EditSeguimientoMovil(seguimiento.Value);

                        await InvokeAsync(StateHasChanged);
                    }
                }
                Saved = true;
            }
            catch (Exception e)
            {			
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoAsBuilt&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 33,
    "ServicesName": "AddEditPlanoConstructivo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPlanoConstructivo",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPlanoCons{id}&quot;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar plano constructivo&quot; : &quot;A&ntilde;adir plano constructivo&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_PlanoCons.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
    @* 	@if (_PlanoCons.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_PlanoCons.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoCons.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Delinenate externo?&quot; Checked=&quot;_PlanoCons.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_PlanoCons.TecnicoExterno = !_PlanoCons.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;
            @if (!_PlanoCons.TecnicoExterno)
            {
                @if (_PlanoCons.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _PlanoCons.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_PlanoCons.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_PlanoCons.Tecnico?.Name} {_PlanoCons.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _PlanoCons.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoCons.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoCons.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoCons.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_PlanoCons.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoCons.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;
        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_PlanoCons.Facturable&quot; ChangeCheck=&quot;()=&gt; {_PlanoCons.Facturable = !_PlanoCons.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_PlanoCons.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_PlanoCons.SubirDocs= !_PlanoCons.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoCons.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Delineante --&gt;
        @* &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

            @if (_PlanoCons.TecnicoDelineantePLano != null)
            {
                &lt;Autocomplete T=&quot;E_User&quot;
                            SelectOne=&quot;(e)=&gt; _PlanoCons.TecnicoDelineantePLano = e&quot;
                            ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            InitialValue=&quot;@_PlanoCons.TecnicoDelineantePLano&quot;
                            InitialTextValue=&quot;@($&quot;{_PlanoCons.TecnicoDelineantePLano?.Name} {_PlanoCons.TecnicoDelineantePLano?.LastName}&quot;)&quot;&gt;
                &lt;/Autocomplete&gt;

            }
            else
            {
                &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _PlanoCons.TecnicoDelineantePLano = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                &lt;/Autocomplete&gt;
            }
        &lt;/div&gt;
    *@
        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_PlanoCons.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPlanoConstructivos?.Any(c =&gt; c.FechaCreacionData == _PlanoCons.FechaCreacionData) == true;

        [Parameter] public DataPlanoConstructivo _PlanoCons { get; set; } = new DataPlanoConstructivo();

        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPlanoConstructivos != null &amp;&amp; Seg.DataPlanoConstructivos.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var CVEExiste = Seg.DataPlanoConstructivos.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _PlanoCons.FechaCreacionData);

                                    if (CVEExiste != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _PlanoCons = CVEExiste;
                                        comentarioOriginal = _PlanoCons.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _PlanoCons = new DataPlanoConstructivo
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _PlanoCons = new DataPlanoConstructivo
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoConstructivo&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el acta ya existe usando FechaCreacionData como criterio &uacute;nico
                                var planoExistente = seguimiento.Value.DataPlanoConstructivos.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _PlanoCons.FechaCreacionData);

                                if (planoExistente != null)
                                {
                                    planoExistente.TecnicoDelineantePLano = _PlanoCons.TecnicoDelineantePLano;
                                }

                                if (planoExistente != null)
                                {
                                    if (!string.IsNullOrWhiteSpace(_PlanoCons.Comentario) &amp;&amp; _PlanoCons.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        planoExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_PlanoCons.Comentario}&quot;;
                                    }
                                    // Si el acta existe, actualizamos sus datos
                                    planoExistente.Facturable = _PlanoCons.Facturable;
                                    planoExistente.CantidadAFacturar = _PlanoCons.CantidadAFacturar;
                                    planoExistente.FechaCreacionData = _PlanoCons.FechaCreacionData;
                                    planoExistente.Aplica = _PlanoCons.Aplica;
                                    planoExistente.FechaPlanificacion = _PlanoCons.FechaPlanificacion;
                                    planoExistente.Tecnico = _PlanoCons.Tecnico;
                                    planoExistente.TecnicoExterno = _PlanoCons.TecnicoExterno;
                                    planoExistente.TecnicoExternoNombre = _PlanoCons.TecnicoExternoNombre;
                                    planoExistente.FechaHito = _PlanoCons.FechaHito;
                                    planoExistente.FechaAprobacion = _PlanoCons.FechaAprobacion;
                                    planoExistente.FechaRechazo = _PlanoCons.FechaRechazo;
                                    //planoExistente.Comentario = _PlanoCons.Comentario;
                                    planoExistente.Estados = _PlanoCons.Estados;
                                    planoExistente.SubirDocs = _PlanoCons.SubirDocs;
                                    planoExistente.FechaSubidaDocs = _PlanoCons.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento

                                    if (!string.IsNullOrWhiteSpace(_PlanoCons.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _PlanoCons.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_PlanoCons.Comentario}&quot;;
                                    }
                                    seguimiento.Value.DataPlanoConstructivos.Add(_PlanoCons);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);

                                await InvokeAsync(StateHasChanged);
                            }
                        }
                        Saved = true;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoConstructivo&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 34,
    "ServicesName": "AddEditPlanoM2CAP",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPlanoM2CAP",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPlanoM2CAP{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Plano M2CAP&quot; : &quot;A&ntilde;adir Plano M2CAP&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;PlanoM2CAP.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



    @* 	&lt;!-- Cantidad a Facturar --&gt;
        @if (PlanoM2CAP.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;PlanoM2CAP.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;PlanoM2CAP.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- EN LOS PLANOS SON DELINENATES AUNQUE SE ACCEDA A TECNICO --&gt;
        &lt;!-- &iquest;Delinenate externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Delineante externo?&quot; Checked=&quot;PlanoM2CAP.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {PlanoM2CAP.TecnicoExterno = !PlanoM2CAP.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;
            @if (!PlanoM2CAP.TecnicoExterno)
            {
                @if (PlanoM2CAP.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; PlanoM2CAP.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@PlanoM2CAP.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{PlanoM2CAP.Tecnico?.Name} {PlanoM2CAP.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { PlanoM2CAP.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;PlanoM2CAP.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;PlanoM2CAP.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;PlanoM2CAP.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (PlanoM2CAP.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;PlanoM2CAP.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;PlanoM2CAP.Facturable&quot; ChangeCheck=&quot;()=&gt; {PlanoM2CAP.Facturable = !PlanoM2CAP.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;PlanoM2CAP.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {PlanoM2CAP.SubirDocs= !PlanoM2CAP.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;PlanoM2CAP.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Delineante --&gt;
        @* &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

            @if (PlanoM2CAP.TecnicoDelineantePLano != null)
            {
                &lt;Autocomplete T=&quot;E_User&quot;
                            SelectOne=&quot;(e)=&gt; PlanoM2CAP.TecnicoDelineantePLano = e&quot;
                            ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            InitialValue=&quot;@PlanoM2CAP.TecnicoDelineantePLano&quot;
                            InitialTextValue=&quot;@($&quot;{PlanoM2CAP.TecnicoDelineantePLano?.Name} {PlanoM2CAP.TecnicoDelineantePLano?.LastName}&quot;)&quot;&gt;
                &lt;/Autocomplete&gt;

            }
            else
            {
                &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { PlanoM2CAP.TecnicoDelineantePLano = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                &lt;/Autocomplete&gt;
            }
        &lt;/div&gt; *@

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;PlanoM2CAP.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPlanoM2CAPs?.Any(c =&gt; c.FechaCreacionData == PlanoM2CAP.FechaCreacionData) == true;

        [Parameter] public DataPlanoM2CAP PlanoM2CAP { get; set; } = new DataPlanoM2CAP();

        private string comentarioOriginal { get; set; }

        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPlanoM2CAPs != null &amp;&amp; Seg.DataPlanoM2CAPs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var planoExistente = Seg.DataPlanoM2CAPs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == PlanoM2CAP.FechaCreacionData);

                                    if (planoExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        PlanoM2CAP = planoExistente;
                                        // Guardar el comentario original para futuras comparaciones
                                        comentarioOriginal = PlanoM2CAP.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        PlanoM2CAP = new DataPlanoM2CAP
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    PlanoM2CAP = new DataPlanoM2CAP
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoM2CAP&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el acta ya existe usando FechaCreacionData como criterio &uacute;nico
                                var planoExistente = seguimiento.Value.DataPlanoM2CAPs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == PlanoM2CAP.FechaCreacionData);

                                if (planoExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado y no est&aacute; vac&iacute;o
                                    if (!string.IsNullOrWhiteSpace(PlanoM2CAP.Comentario) &amp;&amp; PlanoM2CAP.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        planoExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {PlanoM2CAP.Comentario}&quot;;
                                    }
                                    // Actualizar otros campos del plano existente
                                    planoExistente.Facturable = PlanoM2CAP.Facturable;
                                    planoExistente.CantidadAFacturar = PlanoM2CAP.CantidadAFacturar;
                                    planoExistente.FechaCreacionData = PlanoM2CAP.FechaCreacionData;
                                    planoExistente.Aplica = PlanoM2CAP.Aplica;
                                    planoExistente.FechaPlanificacion = PlanoM2CAP.FechaPlanificacion;
                                    planoExistente.Tecnico = PlanoM2CAP.Tecnico;
                                    planoExistente.TecnicoExterno = PlanoM2CAP.TecnicoExterno;
                                    planoExistente.TecnicoExternoNombre = PlanoM2CAP.TecnicoExternoNombre;
                                    planoExistente.FechaHito = PlanoM2CAP.FechaHito;
                                    planoExistente.FechaAprobacion = PlanoM2CAP.FechaAprobacion;
                                    planoExistente.FechaRechazo = PlanoM2CAP.FechaRechazo;
                                    planoExistente.Estados = PlanoM2CAP.Estados;
                                    planoExistente.SubirDocs = PlanoM2CAP.SubirDocs;
                                    planoExistente.FechaSubidaDocs = PlanoM2CAP.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(PlanoM2CAP.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        PlanoM2CAP.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {PlanoM2CAP.Comentario}&quot;;
                                    }
                                    seguimiento.Value.DataPlanoM2CAPs.Add(PlanoM2CAP);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);

                                await InvokeAsync(StateHasChanged);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoM2CAP&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 35,
    "ServicesName": "AddEditPlanoPLL",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPlanoPLL",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPlanoPLL{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Plano PLL&quot; : &quot;A&ntilde;adir Plano PLL&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_PlanoPLL.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_PlanoPLL.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_PlanoPLL.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoPLL.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Delineante externo?&quot; Checked=&quot;_PlanoPLL.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_PlanoPLL.TecnicoExterno = !_PlanoPLL.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;
            @if (!_PlanoPLL.TecnicoExterno)
            {
                @if (_PlanoPLL.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _PlanoPLL.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_PlanoPLL.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_PlanoPLL.Tecnico?.Name} {_PlanoPLL.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _PlanoPLL.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoPLL.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoPLL.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoPLL.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_PlanoPLL.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoPLL.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;
        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_PlanoPLL.Facturable&quot; ChangeCheck=&quot;()=&gt; {_PlanoPLL.Facturable = !_PlanoPLL.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_PlanoPLL.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_PlanoPLL.SubirDocs= !_PlanoPLL.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_PlanoPLL.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Delineante --&gt;
    @* 	&lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

            @if (_PlanoPLL.TecnicoDelineantePLano != null)
            {
                &lt;Autocomplete T=&quot;E_User&quot;
                            SelectOne=&quot;(e)=&gt; _PlanoPLL.TecnicoDelineantePLano = e&quot;
                            ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                            InitialValue=&quot;@_PlanoPLL.TecnicoDelineantePLano&quot;
                            InitialTextValue=&quot;@($&quot;{_PlanoPLL.TecnicoDelineantePLano?.Name} {_PlanoPLL.TecnicoDelineantePLano?.LastName}&quot;)&quot;&gt;
                &lt;/Autocomplete&gt;

            }
            else
            {
                &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _PlanoPLL.TecnicoDelineantePLano = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                            Database=&quot;@DatabaseIdentifiers.Main&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                &lt;/Autocomplete&gt;
            }
        &lt;/div&gt;
    *@
        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_PlanoPLL.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPlanoPLLs?.Any(c =&gt; c.FechaCreacionData == _PlanoPLL.FechaCreacionData) == true;

        [Parameter] public DataPlanoPLL _PlanoPLL { get; set; } = new DataPlanoPLL();
        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPlanoPLLs != null &amp;&amp; Seg.DataPlanoPLLs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var planoExistente = Seg.DataPlanoPLLs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _PlanoPLL.FechaCreacionData);

                                    if (planoExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _PlanoPLL = planoExistente;
                                        comentarioOriginal = _PlanoPLL.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _PlanoPLL = new DataPlanoPLL
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _PlanoPLL = new DataPlanoPLL
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoPLL&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el acta ya existe usando FechaCreacionData como criterio &uacute;nico
                                var planoExistente = seguimiento.Value.DataPlanoPLLs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _PlanoPLL.FechaCreacionData);

                                if (planoExistente != null)
                                {
                                    planoExistente.TecnicoDelineantePLano = _PlanoPLL.TecnicoDelineantePLano;
                                }

                                if (planoExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_PlanoPLL.Comentario) &amp;&amp; _PlanoPLL.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        planoExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_PlanoPLL.Comentario}&quot;;
                                    }
                    
                        
                                    planoExistente.Facturable = _PlanoPLL.Facturable;
                                    planoExistente.CantidadAFacturar = _PlanoPLL.CantidadAFacturar;
                                    planoExistente.FechaCreacionData = _PlanoPLL.FechaCreacionData;
                                    planoExistente.Aplica = _PlanoPLL.Aplica;
                                    planoExistente.FechaPlanificacion = _PlanoPLL.FechaPlanificacion;
                                    planoExistente.Tecnico = _PlanoPLL.Tecnico;
                                    planoExistente.TecnicoExterno = _PlanoPLL.TecnicoExterno;
                                    planoExistente.TecnicoExternoNombre = _PlanoPLL.TecnicoExternoNombre;
                                    planoExistente.FechaHito = _PlanoPLL.FechaHito;
                                    planoExistente.FechaAprobacion = _PlanoPLL.FechaAprobacion;
                                    planoExistente.FechaRechazo = _PlanoPLL.FechaRechazo;
                                    // planoExistente.Comentario = _PlanoPLL.Comentario;
                                    planoExistente.Estados = _PlanoPLL.Estados;
                                    planoExistente.SubirDocs = _PlanoPLL.SubirDocs;
                                    planoExistente.FechaSubidaDocs = _PlanoPLL.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_PlanoPLL.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _PlanoPLL.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_PlanoPLL.Comentario}&quot;;
                                    }
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    seguimiento.Value.DataPlanoPLLs.Add(_PlanoPLL);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);

                                await InvokeAsync(StateHasChanged);
                            }



                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPlanoPLL&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 36,
    "ServicesName": "AddEditPPI",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPPI",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPPI{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar PPI&quot; : &quot;A&ntilde;adir PPI&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_ppi.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ppi.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_ppi.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_ppi.TecnicoExterno = !_ppi.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_ppi.TecnicoExterno)
            {
                @if (_ppi.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _ppi.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_ppi.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_ppi.Tecnico?.Name} {_ppi.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _ppi.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ppi.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ppi.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ppi.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_ppi.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ppi.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_ppi.Facturable&quot; ChangeCheck=&quot;()=&gt; {_ppi.Facturable = !_ppi.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_ppi.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_ppi.SubirDocs= !_ppi.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ppi.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_ppi.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPPIs?.Any(c =&gt; c.FechaCreacionData == _ppi.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataPPI _ppi { get; set; } = new DataPPI();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_ppi != null)
                            {
                                comentarioOriginal = _ppi.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPPIs != null &amp;&amp; Seg.DataPPIs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataPPIs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _ppi.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _ppi = actaExistente;

                                        comentarioOriginal = _ppi.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _ppi = new DataPPI
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _ppi = new DataPPI
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPPI&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_ppi.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataPPIs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _ppi.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_ppi.Comentario) &amp;&amp; _ppi.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_ppi.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _ppi.Facturable;
                                    actaExistente.CantidadAFacturar = _ppi.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _ppi.FechaCreacionData;
                                    actaExistente.Aplica = _ppi.Aplica;
                                    actaExistente.FechaPlanificacion = _ppi.FechaPlanificacion;
                                    actaExistente.Tecnico = _ppi.Tecnico;
                                    actaExistente.TecnicoExterno = _ppi.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _ppi.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _ppi.FechaHito;
                                    actaExistente.FechaAprobacion = _ppi.FechaAprobacion;
                                    actaExistente.FechaRechazo = _ppi.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _ppi.Estados;
                                    actaExistente.SubirDocs = _ppi.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _ppi.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_ppi.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _ppi.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_ppi.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataPPIs.Add(_ppi);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }
                        Saved = true;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPPI&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 37,
    "ServicesName": "AddEditProyecto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditProyecto",
    "ServicesDescription":`
    `,
    "Code": `
    @using DelineacionLogic
    &lt;form class=&quot;w-full h-fit flex flex-wrap justify-between p-2 gap-3&quot; @onsubmit=&quot;SaveAsync&quot;&gt;
        &lt;span class=&quot;w-full text-blue-400 text-2xl&quot;&gt;A&ntilde;adir obra para @Proyecto.nombre&lt;/span&gt;

        &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Cliente&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;Proyecto.cliente&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Nombre&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;Proyecto.nombre&quot; required /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Subproyectos&lt;/span&gt;
            &lt;button type=&quot;button&quot; class=&quot;rounded p-2 bg-blue-400 text-white&quot; @onclick=&quot;@(()=&gt; Proyecto.subproyectos.Add(Guid.NewGuid().ToString()))&quot;&gt;
                A&ntilde;adir subproyecto
            &lt;/button&gt;

            &lt;Virtualize Items=&quot;Proyecto.subproyectos&quot;&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;context&quot; required /&gt;
            &lt;/Virtualize&gt;
        &lt;/div&gt;


        &lt;div class=&quot;w-full flex flex-wrap justify-end gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;w-fit h-fit p-2 rounded bg-red-600 text-white shadow-md&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;w-fit h-fit p-2 rounded bg-teal-400 text-white shadow-md&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {
        [Parameter] public E_Proyecto Proyecto { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }

        async Task SaveAsync()
        {
            try
            {
                _main.IsLoading = true;

                        await _mongoContext.ReplaceOneAuditableAsync(Proyecto, DatabaseIdentifiers.Movil);

                        await _mongoContext.Data&lt;E_Visitas&gt;(DatabaseIdentifiers.Movil)
                        .UpdateManyAsync(c =&gt; c.Proyecto.index == Proyecto.index, Builders&lt;E_Visitas&gt;.Update.Set(x =&gt; x.Proyecto, Proyecto));

                        await _mongoContext.Data&lt;E_Trabajo&gt;(DatabaseIdentifiers.Movil)
                    .UpdateManyAsync(c =&gt; c.Proyecto.index == Proyecto.index, Builders&lt;E_Trabajo&gt;.Update.Set(x =&gt; x.Proyecto, Proyecto));

                        await _mongoContext.Data&lt;E_SolicitudDelineacion&gt;(DatabaseIdentifiers.Movil)
                    .UpdateManyAsync(c =&gt; c.Proyecto.index == Proyecto.index, Builders&lt;E_SolicitudDelineacion&gt;.Update.Set(x =&gt; x.Proyecto, Proyecto));

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditProyecto&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close(true);
        }
    }
    `
  },
  {
    "ID": 38,
    "ServicesName": "AddEditProyectoObras",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditProyectoObras",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditProyecto{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar proyecto&quot; : &quot;A&ntilde;adir proyecto&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Proyecto.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;


        &lt;!-- Cantidad a Facturar --&gt;
        @* @if (_Proyecto.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_Proyecto.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_Proyecto.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_Proyecto.TecnicoExterno = !_Proyecto.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_Proyecto.TecnicoExterno)
            {
                @if (_Proyecto.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _Proyecto.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_Proyecto.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_Proyecto.Tecnico?.Name} {_Proyecto.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _Proyecto.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_Proyecto.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;
        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_Proyecto.Facturable&quot; ChangeCheck=&quot;()=&gt; {_Proyecto.Facturable = !_Proyecto.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_Proyecto.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_Proyecto.SubirDocs= !_Proyecto.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Proyecto.NumVisado&quot; /&gt;
        &lt;/div&gt;


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Proyecto.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Proyecto.FacturaVisado&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Proyecto.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataProyectos?.Any(c =&gt; c.FechaCreacionData == _Proyecto.FechaCreacionData) == true;

        [Parameter] public DataProyecto _Proyecto { get; set; } = new DataProyecto();
        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                    if (!string.IsNullOrEmpty(SeguimientoId))
                            {
                                // Cargar el seguimiento desde la base de datos
                                var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                                if (seguimiento?.Value != null)
                                {
                                    Seg = seguimiento.Value;

                                    // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                    if (Seg.DataProyectos != null &amp;&amp; Seg.DataProyectos.Count &gt; 0)
                                    {
                                        // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                        var proyectExist = Seg.DataProyectos.FirstOrDefault(a =&gt;
                                            a.FechaCreacionData == _Proyecto.FechaCreacionData);

                                        if (proyectExist != null)
                                        {
                                            // Cargar los datos del acta existente
                                            _Proyecto = proyectExist;
                                            comentarioOriginal = _Proyecto.Comentario;
                                        }
                                        else
                                        {
                                            // Crear un nuevo acta si no se encuentra uno que coincida
                                            _Proyecto = new DataProyecto
                                                {
                                                    FechaCreacionData = DateTime.Now
                                                };
                                            comentarioOriginal = string.Empty; // No hay comentario original
                                        }
                                    }
                                    else
                                    {
                                        // Si no hay actas existentes, inicializar un nuevo acta
                                        _Proyecto = new DataProyecto
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                            }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditProyectoObras&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataProyectos.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _Proyecto.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_Proyecto.Comentario) &amp;&amp; _Proyecto.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        actaExistente.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Proyecto.Comentario}&quot;;
                                    }
                                    actaExistente.Facturable = _Proyecto.Facturable;
                                    actaExistente.CantidadAFacturar = _Proyecto.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _Proyecto.FechaCreacionData;
                                    actaExistente.Aplica = _Proyecto.Aplica;
                                    actaExistente.FechaPlanificacion = _Proyecto.FechaPlanificacion;
                                    actaExistente.Tecnico = _Proyecto.Tecnico;
                                    actaExistente.TecnicoExterno = _Proyecto.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _Proyecto.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _Proyecto.FechaHito;
                                    actaExistente.FechaAprobacion = _Proyecto.FechaAprobacion;
                                    actaExistente.FechaRechazo = _Proyecto.FechaRechazo;
                                    // actaExistente.Comentario = _Proyecto.Comentario;
                                    actaExistente.Estados = _Proyecto.Estados;
                                    actaExistente.SubirDocs = _Proyecto.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _Proyecto.FechaSubidaDocs;
                                    actaExistente.NumVisado = _Proyecto.NumVisado;
                                    actaExistente.FechaVisado = _Proyecto.FechaVisado;
                                    actaExistente.FacturaVisado = _Proyecto.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_Proyecto.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _Proyecto.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Proyecto.Comentario}&quot;;
                                    }


                                    seguimiento.Value.DataProyectos.Add(_Proyecto);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                                await InvokeAsync(StateHasChanged);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditProyectoObras&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 39,
    "ServicesName": "AddEditPTP",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPTP",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPTP{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar PTP&quot; : &quot;A&ntilde;adir PTP&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_ptp.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ptp.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_ptp.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_ptp.TecnicoExterno = !_ptp.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_ptp.TecnicoExterno)
            {
                @if (_ptp.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _ptp.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_ptp.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_ptp.Tecnico?.Name} {_ptp.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _ptp.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ptp.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ptp.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ptp.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_ptp.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ptp.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_ptp.Facturable&quot; ChangeCheck=&quot;()=&gt; {_ptp.Facturable = !_ptp.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_ptp.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_ptp.SubirDocs= !_ptp.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_ptp.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_ptp.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPTPs?.Any(c =&gt; c.FechaCreacionData == _ptp.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataPTP _ptp { get; set; } = new DataPTP();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_ptp != null)
                            {
                                comentarioOriginal = _ptp.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPTPs != null &amp;&amp; Seg.DataPTPs.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataPTPs.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _ptp.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _ptp = actaExistente;

                                        comentarioOriginal = _ptp.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _ptp = new DataPTP
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _ptp = new DataPTP
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPTP&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_ptp.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataPTPs.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _ptp.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_ptp.Comentario) &amp;&amp; _ptp.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_ptp.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _ptp.Facturable;
                                    actaExistente.CantidadAFacturar = _ptp.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _ptp.FechaCreacionData;
                                    actaExistente.Aplica = _ptp.Aplica;
                                    actaExistente.FechaPlanificacion = _ptp.FechaPlanificacion;
                                    actaExistente.Tecnico = _ptp.Tecnico;
                                    actaExistente.TecnicoExterno = _ptp.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _ptp.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _ptp.FechaHito;
                                    actaExistente.FechaAprobacion = _ptp.FechaAprobacion;
                                    actaExistente.FechaRechazo = _ptp.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _ptp.Estados;
                                    actaExistente.SubirDocs = _ptp.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _ptp.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_ptp.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _ptp.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_ptp.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataPTPs.Add(_ptp);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPTP&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 40,
    "ServicesName": "AddEditPuesta",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditPuesta",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditPuesta{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar memoria PSC&quot; : &quot;A&ntilde;adir memoria PSC&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Puesta.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
    @* 	@if (_Puesta.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_Puesta.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        } *@

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_Puesta.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_Puesta.TecnicoExterno = !_Puesta.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_Puesta.TecnicoExterno)
            {
                @if (_Puesta.Tecnico != null)
                {
                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _Puesta.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_Puesta.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_Puesta.Tecnico?.Name} {_Puesta.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _Puesta.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.FechaHito&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_Puesta.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_Puesta.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_Puesta.SubirDocs= !_Puesta.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_Puesta.Facturable&quot; ChangeCheck=&quot;()=&gt; {_Puesta.Facturable = !_Puesta.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- visado --&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Puesta.NumVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaVisado&quot; class=&quot;block text-blue-400&quot;&gt;Fecha visado&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_Puesta.FechaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;Factura Visado&lt;/span&gt;
            &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;_Puesta.FacturaVisado&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_Puesta.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;

        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataPuestaEnServicios?.Any(c =&gt; c.FechaCreacionData == _Puesta.FechaCreacionData) == true;

        [Parameter] public DataPuestaEnServicio _Puesta { get; set; } = new DataPuestaEnServicio();

        private string comentarioOriginal;
        public string comentarioSeleccionado;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataPuestaEnServicios != null &amp;&amp; Seg.DataPuestaEnServicios.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var fotoExist = Seg.DataPuestaEnServicios.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _Puesta.FechaCreacionData);

                                    if (fotoExist != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _Puesta = fotoExist;
                                        comentarioOriginal = _Puesta.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _Puesta = new DataPuestaEnServicio
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _Puesta = new DataPuestaEnServicio
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPuesta&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);

                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var puestaExist = seguimiento.Value.DataPuestaEnServicios.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _Puesta.FechaCreacionData);

                                if (puestaExist != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    if (!string.IsNullOrWhiteSpace(_Puesta.Comentario) &amp;&amp; _Puesta.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        puestaExist.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Puesta.Comentario}&quot;;
                                    }
                                    puestaExist.Facturable = _Puesta.Facturable;
                                    puestaExist.CantidadAFacturar = _Puesta.CantidadAFacturar;
                                    puestaExist.FechaCreacionData = _Puesta.FechaCreacionData;
                                    puestaExist.Aplica = _Puesta.Aplica;
                                    puestaExist.FechaPlanificacion = _Puesta.FechaPlanificacion;
                                    puestaExist.Tecnico = _Puesta.Tecnico;
                                    puestaExist.TecnicoExterno = _Puesta.TecnicoExterno;
                                    puestaExist.TecnicoExternoNombre = _Puesta.TecnicoExternoNombre;
                                    puestaExist.FechaHito = _Puesta.FechaHito;
                                    puestaExist.FechaAprobacion = _Puesta.FechaAprobacion;
                                    puestaExist.FechaRechazo = _Puesta.FechaRechazo;
                                    // fotoExist.Comentario = _Puesta.Comentario;
                                    puestaExist.Estados = _Puesta.Estados;
                                    puestaExist.SubirDocs = _Puesta.SubirDocs;
                                    puestaExist.FechaSubidaDocs = _Puesta.FechaSubidaDocs;
                                    puestaExist.NumVisado = _Puesta.NumVisado;
                                    puestaExist.FechaVisado = _Puesta.FechaVisado;
                                    puestaExist.FacturaVisado = _Puesta.FacturaVisado;
                                }
                                else
                                {
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_Puesta.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _Puesta.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_Puesta.Comentario}&quot;;
                                    }
                                    seguimiento.Value.DataPuestaEnServicios.Add(_Puesta);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }

                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditPuesta&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 41,
    "ServicesName": "AddEditReplanteoLOS",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditReplanteoLOS",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditReplanteoLOS{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOSInformeLOSAddInformeLOS)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar informe LOS&quot; : &quot;A&ntilde;adir informe LOS&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_localActa.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_localActa.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_localActa.TecnicoExterno = !_localActa.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_localActa.TecnicoExterno)
            {
                @if (_localActa.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _localActa.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_localActa.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_localActa.Tecnico?.Name} {_localActa.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _localActa.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_localActa.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_localActa.Facturable&quot; ChangeCheck=&quot;()=&gt; {_localActa.Facturable = !_localActa.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_localActa.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_localActa.SubirDocs= !_localActa.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_localActa.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_localActa.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataReplanteosLOS?.Any(c =&gt; c.FechaCreacionData == _localActa.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataReplanteoLOS _localActa { get; set; } = new DataReplanteoLOS();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_localActa != null)
                            {
                                comentarioOriginal = _localActa.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataReplanteosLOS != null &amp;&amp; Seg.DataReplanteosLOS.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataReplanteosLOS.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _localActa.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _localActa = actaExistente;

                                        comentarioOriginal = _localActa.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _localActa = new DataReplanteoLOS
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _localActa = new DataReplanteoLOS
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditReplanteoLOS&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_localActa.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataReplanteosLOS.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _localActa.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_localActa.Comentario) &amp;&amp; _localActa.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_localActa.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _localActa.Facturable;
                                    actaExistente.CantidadAFacturar = _localActa.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _localActa.FechaCreacionData;
                                    actaExistente.Aplica = _localActa.Aplica;
                                    actaExistente.FechaPlanificacion = _localActa.FechaPlanificacion;
                                    actaExistente.Tecnico = _localActa.Tecnico;
                                    actaExistente.TecnicoExterno = _localActa.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _localActa.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _localActa.FechaHito;
                                    actaExistente.FechaAprobacion = _localActa.FechaAprobacion;
                                    actaExistente.FechaRechazo = _localActa.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _localActa.Estados;
                                    actaExistente.SubirDocs = _localActa.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _localActa.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_localActa.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _localActa.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_localActa.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataReplanteosLOS.Add(_localActa);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditReplanteoLOS&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 42,
    "ServicesName": "AddEditTexto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddEditTexto",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AddEditDocTexto{id}&quot;
    &lt;form class=&quot;w-full grid grid-cols-12 gap-4&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;div class=&quot;col-span-12 text-blue-400 font-bold p-2&quot;&gt;
            @(IsEdit ? $&quot;Editar Doc. Texto&quot; : &quot;A&ntilde;adir Doc. Texto&quot;)
        &lt;/div&gt;
        &lt;!-- Fecha de Creaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fecha&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de creaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;datetime-local&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind=&quot;_fotoTexto.FechaCreacionData&quot; required /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de planificaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaPlanificacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de planificaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotoTexto.FechaPlanificacion&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- &iquest;T&eacute;cnico Externo? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;T&eacute;cnico externo?&quot; Checked=&quot;_fotoTexto.TecnicoExterno&quot; ChangeCheck=&quot;()=&gt; {_fotoTexto.TecnicoExterno = !_fotoTexto.TecnicoExterno; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- T&eacute;cnico --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico&lt;/span&gt;
            @if (!_fotoTexto.TecnicoExterno)
            {
                @if (_fotoTexto.Tecnico != null)
                {


                    &lt;Autocomplete T=&quot;E_User&quot;
                                SelectOne=&quot;(e)=&gt; _fotoTexto.Tecnico = e&quot;
                                ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                InitialValue=&quot;@_fotoTexto.Tecnico&quot;
                                InitialTextValue=&quot;@($&quot;{_fotoTexto.Tecnico?.Name} {_fotoTexto.Tecnico?.LastName}&quot;)&quot;&gt;
                    &lt;/Autocomplete&gt;
                }
                else
                {
                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; { _fotoTexto.Tecnico = e; InvokeAsync(StateHasChanged); }&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                Database=&quot;@DatabaseIdentifiers.Main&quot;
                                FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                    &lt;/Autocomplete&gt;
                }
            }
            else
            {
                &lt;input type=&quot;text&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotoTexto.TecnicoExternoNombre&quot; /&gt;
            }
        &lt;/div&gt;

        &lt;!-- Fechas de entrega y aprobaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaEntrega&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de entrega&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotoTexto.FechaHito&quot; /&gt;
        &lt;/div&gt;



        &lt;!-- Cantidad a Facturar --&gt;
        @* 	@if (_localActa.Facturable)
        {
            &lt;div class=&quot;col-span-6 p-2&quot;&gt;
                &lt;label class=&quot;text-blue-400&quot;&gt;Cantidad a Facturar&lt;/label&gt;
                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-Value=&quot;_localActa.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
        }
    *@


        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaAprobacion&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de aprobaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotoTexto.FechaAprobacion&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor para Fecha rechazo --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            @if (_fotoTexto.FechaAprobacion == null)
            {
                &lt;div&gt;
                    &lt;label for=&quot;fechaRechazo&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de rechazo&lt;/label&gt;
                    &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotoTexto.FechaRechazo&quot; /&gt;
                &lt;/div&gt;
            }
            else
            {
                &lt;!-- Espacio reservado vac&iacute;o --&gt;
                &lt;div class=&quot;h-[72px]&quot;&gt;&lt;/div&gt;
            }
        &lt;/div&gt;

        &lt;!-- &iquest;Facturable? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Facturable?&quot; Checked=&quot;_fotoTexto.Facturable&quot; ChangeCheck=&quot;()=&gt; {_fotoTexto.Facturable = !_fotoTexto.Facturable; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- &iquest;Subir documentaci&oacute;n? Checkbox --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;Checkbox Message=&quot;&iquest;Subir documentaci&oacute;n?&quot; Checked=&quot;_fotoTexto.SubirDocs&quot; ChangeCheck=&quot;()=&gt; {_fotoTexto.SubirDocs= !_fotoTexto.SubirDocs; InvokeAsync(StateHasChanged);}&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Fecha de subida de documentaci&oacute;n --&gt;
        &lt;div class=&quot;col-span-6 p-2&quot;&gt;
            &lt;label for=&quot;fechaSubidaDocs&quot; class=&quot;block text-blue-400&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/label&gt;
            &lt;input type=&quot;date&quot; class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot; @bind-value=&quot;_fotoTexto.FechaSubidaDocs&quot; /&gt;
        &lt;/div&gt;


        &lt;!-- Comentario --&gt;
        &lt;div class=&quot;col-span-12 p-2&quot;&gt;
            &lt;label for=&quot;comentario&quot; class=&quot;block text-blue-400&quot;&gt;Comentario&lt;/label&gt;
            &lt;textarea class=&quot;w-full p-2 border border-slate-300/50 shadow-md&quot;
                    @bind=&quot;_fotoTexto.Comentario&quot;&gt;&lt;/textarea&gt;
        &lt;/div&gt;


        &lt;!-- Botones --&gt;
        &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
            &lt;button type=&quot;submit&quot; class=&quot;bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded&quot;&gt;Guardar&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;

    @code {

        [Parameter] public string SeguimientoId { get; set; }
        public E_Seguimiento Seg { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public bool Saved { get; set; }
        bool IsEdit =&gt; Seg?.DataFotosTexto?.Any(c =&gt; c.FechaCreacionData == _fotoTexto.FechaCreacionData) == true;
        public string comentarioSeleccionado;

        [Parameter] public DataFotoTexto _fotoTexto { get; set; } = new DataFotoTexto();
        private string comentarioOriginal;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {

                            if (_fotoTexto != null)
                            {
                                comentarioOriginal = _fotoTexto.Comentario; // Guardar el comentario original
                            }

                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            if (seguimiento?.Value != null)
                            {
                                Seg = seguimiento.Value;

                                // Si hay datos de actas, busca el acta espec&iacute;fica basada en una condici&oacute;n &uacute;nica
                                if (Seg.DataFotosTexto != null &amp;&amp; Seg.DataFotosTexto.Count &gt; 0)
                                {
                                    // Por ejemplo, aqu&iacute; usamos FechaCreacionData como identificador &uacute;nico
                                    var actaExistente = Seg.DataFotosTexto.FirstOrDefault(a =&gt;
                                        a.FechaCreacionData == _fotoTexto.FechaCreacionData);

                                    if (actaExistente != null)
                                    {
                                        // Cargar los datos del acta existente
                                        _fotoTexto = actaExistente;

                                        comentarioOriginal = _fotoTexto.Comentario;
                                    }
                                    else
                                    {
                                        // Crear un nuevo acta si no se encuentra uno que coincida
                                        _fotoTexto = new DataFotoTexto
                                            {
                                                FechaCreacionData = DateTime.Now
                                            };
                                        comentarioOriginal = string.Empty; // No hay comentario original
                                    }
                                }
                                else
                                {
                                    // Si no hay actas existentes, inicializar un nuevo acta
                                    _fotoTexto = new DataFotoTexto
                                        {
                                            FechaCreacionData = DateTime.Now
                                        };
                                    comentarioOriginal = string.Empty; // No hay comentario original
                                }
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTexto&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }



        async Task SaveAsync()
        {
            try
            {
                if (!string.IsNullOrEmpty(SeguimientoId))
                        {
                            // Cargar el seguimiento desde la base de datos
                            var seguimiento = await _mongoContext.GetOneSeguimientoMovil(SeguimientoId);
                            comentarioSeleccionado = $&quot;{_user.name} {_user.surname} - {_fotoTexto.Comentario}&quot;;


                            if (seguimiento?.Value != null)
                            {
                                // Buscar si el plano ya existe usando FechaCreacionData como criterio &uacute;nico
                                var actaExistente = seguimiento.Value.DataFotosTexto.FirstOrDefault(a =&gt;
                                    a.FechaCreacionData == _fotoTexto.FechaCreacionData);

                                if (actaExistente != null)
                                {
                                    // Si el plano existe, actualizamos sus datos
                                    // Validar si el comentario ha cambiado
                                    if (!string.IsNullOrWhiteSpace(_fotoTexto.Comentario) &amp;&amp; _fotoTexto.Comentario != comentarioOriginal)
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        // Crear el comentario formateado
                                        comentarioSeleccionado = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_fotoTexto.Comentario}&quot;;
                                        actaExistente.Comentario = comentarioSeleccionado;
                                    }

                                    actaExistente.Facturable = _fotoTexto.Facturable;
                                    actaExistente.CantidadAFacturar = _fotoTexto.CantidadAFacturar;
                                    actaExistente.FechaCreacionData = _fotoTexto.FechaCreacionData;
                                    actaExistente.Aplica = _fotoTexto.Aplica;
                                    actaExistente.FechaPlanificacion = _fotoTexto.FechaPlanificacion;
                                    actaExistente.Tecnico = _fotoTexto.Tecnico;
                                    actaExistente.TecnicoExterno = _fotoTexto.TecnicoExterno;
                                    actaExistente.TecnicoExternoNombre = _fotoTexto.TecnicoExternoNombre;
                                    actaExistente.FechaHito = _fotoTexto.FechaHito;
                                    actaExistente.FechaAprobacion = _fotoTexto.FechaAprobacion;
                                    actaExistente.FechaRechazo = _fotoTexto.FechaRechazo;
                                    // actaExistente.Comentario = comentarioSeleccionado;
                                    actaExistente.Estados = _fotoTexto.Estados;
                                    actaExistente.SubirDocs = _fotoTexto.SubirDocs;
                                    actaExistente.FechaSubidaDocs = _fotoTexto.FechaSubidaDocs;
                                }
                                else
                                {
                                    // Crear un nuevo acta
                                    // Si el acta no existe, la a&ntilde;adimos como un nuevo elemento
                                    if (!string.IsNullOrWhiteSpace(_fotoTexto.Comentario))
                                    {
                                        string fechaActual = DateTime.Now.ToString(&quot;dd/MM/yyyy HH:mm&quot;);
                                        _fotoTexto.Comentario = $&quot;{_user.name} {_user.surname} ({fechaActual}): {_fotoTexto.Comentario}&quot;;
                                    }

                                    seguimiento.Value.DataFotosTexto.Add(_fotoTexto);
                                }

                                // Guardar el seguimiento actualizado en la base de datos
                                await _mongoContext.EditSeguimientoMovil(seguimiento.Value);
                            }
                        }



                        Saved = true;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditTexto&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
            Close?.Invoke(true);
        }
    }
    `
  },
  {
    "ID": 43,
    "ServicesName": "AddObra",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/AddObra",
    "ServicesDescription":`
    `,
    "Code": `
    @if (add != null &amp;&amp; Proyecto != null)
    {
        &lt;form class=&quot;w-full h-fit flex flex-wrap justify-between p-2 gap-3&quot; @onsubmit=&quot;SaveAsync&quot;&gt;

            @if (ShowDuplicateWarning)
            {
                &lt;div class=&quot;bg-yellow-200 text-yellow-800 p-3 rounded-md&quot;&gt;
                    &lt;strong&gt;&iexcl;Atenci&oacute;n!&lt;/strong&gt;
                    Ya existe un seguimiento con el c&oacute;digo
                    &lt;strong&gt;@(ExistingSeguimiento != null ? ExistingSeguimiento.Codigo1 : &quot;desconocido&quot;)&lt;/strong&gt;.
                    &lt;br /&gt;&iquest;Quieres continuar de todas formas?
                    &lt;div class=&quot;flex justify-end gap-3 mt-2&quot;&gt;
                        &lt;button class=&quot;px-4 py-2 bg-gray-300 rounded&quot; @onclick=&quot;() =&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
                        &lt;button class=&quot;px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600&quot; @onclick=&quot;SaveConfirmedAsync&quot;&gt;Continuar&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }


            &lt;span class=&quot;w-full text-blue-400 text-2xl&quot;&gt;A&ntilde;adir obra para @Proyecto.nombre&lt;/span&gt;
            @*    &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Ceco&lt;/span&gt;
                &lt;select @bind=&quot;add.Ceco&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                    &lt;option value=&quot;BTS&quot;&gt;BTS&lt;/option&gt;
                    &lt;option value=&quot;Radio&quot;&gt;Radio&lt;/option&gt;
                &lt;/select&gt;
            &lt;/div&gt; *@

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Nombre&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.Nombre&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo propietario&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.Codigo1&quot; required /&gt;
            &lt;/div&gt;


            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Propietario&lt;/span&gt;
                &lt;select class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind=&quot;add.Propietario&quot;&gt;
                    &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                    &lt;option value=&quot;ORANGE&quot;&gt;ORANGE&lt;/option&gt;
                    &lt;option value=&quot;GTT&quot;&gt;GTT&lt;/option&gt;
                    &lt;option value=&quot;FTTH&quot;&gt;FTTH&lt;/option&gt;
                    &lt;option value=&quot;CENTURYLINK&quot;&gt;CENTURYLINK&lt;/option&gt;
                    &lt;option value=&quot;Aict&quot;&gt;Aict&lt;/option&gt;
                    &lt;option value=&quot;TELEFONICA&quot;&gt;TELEFONICA&lt;/option&gt;
                    &lt;option value=&quot;Hybrido&quot;&gt;Hybrido&lt;/option&gt;
                    &lt;option value=&quot;IECISA&quot;&gt;IECISA&lt;/option&gt;
                    &lt;option value=&quot;SIN DEFINIR&quot;&gt;SIN DEFINIR&lt;/option&gt;
                    &lt;option value=&quot;TELXIUS&quot;&gt;TELXIUS&lt;/option&gt;
                    &lt;option value=&quot;Big mat&quot;&gt;Big mat&lt;/option&gt;
                    &lt;option value=&quot;Auren&quot;&gt;Auren&lt;/option&gt;
                    &lt;option value=&quot;SEMI&quot;&gt;SEMI&lt;/option&gt;
                    &lt;option value=&quot;VANTAGE&quot;&gt;VANTAGE&lt;/option&gt;
                    &lt;option value=&quot;ONTOWER&quot;&gt;ONTOWER&lt;/option&gt;
                    &lt;option value=&quot;LPS&quot;&gt;LPS&lt;/option&gt;
                    &lt;option value=&quot;CELLNEX&quot;&gt;CELLNEX&lt;/option&gt;
                    &lt;option value=&quot;AUREN&quot;&gt;AUREN&lt;/option&gt;
                    &lt;option value=&quot;VODAFONE&quot;&gt;VODAFONE&lt;/option&gt;
                    &lt;option value=&quot;BIG MAT&quot;&gt;BIG MAT&lt;/option&gt;
                    &lt;option value=&quot;HHCC&quot;&gt;HHCC&lt;/option&gt;
                    &lt;option value=&quot;OTROS&quot;&gt;OTROS&lt;/option&gt;
                    &lt;option value=&quot;TOTEM&quot;&gt;TOTEM&lt;/option&gt;
                    &lt;option value=&quot;INTEROUTE&quot;&gt;INTEROUTE&lt;/option&gt;
                    &lt;option value=&quot;ATE&quot;&gt;ATE&lt;/option&gt;
                    &lt;option value=&quot;Centurylink&quot;&gt;Centurylink&lt;/option&gt;
                    &lt;option value=&quot;LYNTIA&quot;&gt;LYNTIA&lt;/option&gt;
                    &lt;option value=&quot;DCN&quot;&gt;DCN&lt;/option&gt;
                    &lt;option value=&quot;AXION&quot;&gt;AXION&lt;/option&gt;
                    &lt;option value=&quot;TELECOMCLM&quot;&gt;TELECOMCLM&lt;/option&gt;
                    &lt;option value=&quot;AXSITE&quot;&gt;AXSITE&lt;/option&gt;

                &lt;/select&gt;

            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo operador&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.Codigo2&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;C&oacute;digo seguimiento&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.CodigoOtros&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Estado&lt;/span&gt;

                &lt;select @bind=&quot;Estado&quot; class=&quot;w-full p-2 rounded border border-slate-300/50&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;Seleccionar estado&lt;/option&gt;
                    &lt;option value=&quot;PTE. Replanteo&quot;&gt;PTE. Replanteo&lt;/option&gt;
                    &lt;option value=&quot;PTE. Acta&quot;&gt;PTE. Acta&lt;/option&gt;
                    &lt;option value=&quot;PTE OK Acta&quot;&gt;PTE OK Acta&lt;/option&gt;
                    &lt;option value=&quot;PTE. Plano&quot;&gt;PTE. Plano&lt;/option&gt;
                    &lt;option value=&quot;PTE OK Plano&quot;&gt;PTE OK Plano&lt;/option&gt;
                    &lt;option value=&quot;PR no entregado&quot;&gt;PR no entregado&lt;/option&gt;
                    &lt;option value=&quot;PR PTE. Aprobaci&oacute;n&quot;&gt;PR PTE. Aprobaci&oacute;n&lt;/option&gt;
                    &lt;option value=&quot;PSC en proceso de medidas&quot;&gt;PSC en proceso de medidas&lt;/option&gt;
                    &lt;option value=&quot;PSC en curso&quot;&gt;PSC en curso&lt;/option&gt;
                    &lt;option value=&quot;PSC/PSI enviada&quot;&gt;PSC/PSI enviada&lt;/option&gt;
                    &lt;option value=&quot;PSC/PSI denegada&quot;&gt;PSC/PSI denegada&lt;/option&gt;
                    &lt;option value=&quot;PSC/PSI aprobada&quot;&gt;PSC/PSI aprobada&lt;/option&gt;
                    &lt;option value=&quot;Parado&quot;&gt;Parado&lt;/option&gt;
                    &lt;option value=&quot;No cumple&quot;&gt;No cumple&lt;/option&gt;
                    &lt;option value=&quot;Cancelado&quot;&gt;Cancelado&lt;/option&gt;
                &lt;/select&gt;

            &lt;/div&gt;





            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Subproyecto&lt;/span&gt;
                &lt;select @bind=&quot;add.Subproyecto&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; required&gt;
                    &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                    @foreach (var v in Proyecto.subproyectos)
                    {
                        &lt;option value=&quot;@v&quot;&gt;@v&lt;/option&gt;
                    }
                &lt;/select&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Contrata&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.Contrata&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Fecha asignaci&oacute;n cliente&lt;/span&gt;
                &lt;input type=&quot;date&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.FechaAsignacionCliente&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;T&eacute;cnico cliente&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.TecnicoCliente&quot; required /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Localidad&lt;/span&gt;
                &lt;Autocomplete T=&quot;E_Localidades&quot; SelectOne=&quot;(e)=&gt; add.Municipio = e&quot; ToString=&quot;(e)=&gt; e.Localidad&quot;
                            Database=&quot;@DatabaseIdentifiers.Movil&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_Localidades&gt;.Filter.Regex(x=&gt; x.Localidad, new BsonRegularExpression(s, &quot;i&quot;)))&quot; InitialValue=&quot;@add.Municipio&quot;
                            InitialTextValue=&quot;@add.Municipio?.Localidad&quot; Placeholder=&quot;Selecciona una localidad&quot;&gt;
                &lt;/Autocomplete&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Zona&lt;/span&gt;
                &lt;Autocomplete T=&quot;E_Localidades&quot; SelectOne=&quot;(e)=&gt; add.Municipio = e&quot; ToString=&quot;(e)=&gt; e.Zona&quot;
                            Database=&quot;@DatabaseIdentifiers.Movil&quot;
                            FilterMongo=&quot;@((s)=&gt; Builders&lt;E_Localidades&gt;.Filter.Regex(x=&gt; x.Zona, new BsonRegularExpression(s, &quot;i&quot;)))&quot; InitialValue=&quot;@add.Municipio&quot;
                            InitialTextValue=&quot;@add.Municipio?.Zona&quot; Placeholder=&quot;Selecciona una zona&quot;&gt;
                &lt;/Autocomplete&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;N&ordm; de pedido&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;p-2 w-full rounded border border-slate-300/50&quot; @bind-value=&quot;add.DataPedido.NumeroPedido&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Dinero a facturar&lt;/span&gt;

                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-Value=&quot;add.DataPedido.CantidadAFacturar&quot; /&gt;
            &lt;/div&gt;
            &lt;div class=&quot;w-[47%] flex flex-wrap&quot;&gt;
                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Dinero facturado&lt;/span&gt;

                &lt;InputNumber TValue=&quot;float&quot; step=&quot;0.01&quot; class=&quot;w-full rounded border boder-slate-300/50 p-2&quot; @bind-Value=&quot;add.DataPedido.DineroFacturado&quot; /&gt;
            &lt;/div&gt;


            &lt;div class=&quot;w-full flex flex-wrap justify-end gap-3&quot;&gt;
                &lt;button type=&quot;button&quot; class=&quot;w-fit h-fit p-2 rounded bg-red-600 text-white shadow-md&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
                &lt;button type=&quot;submit&quot; class=&quot;w-fit h-fit p-2 rounded bg-teal-400 text-white shadow-md&quot;&gt;Guardar&lt;/button&gt;
            &lt;/div&gt;




        &lt;/form&gt;




    }

    @code {
        [Parameter] public E_Proyecto Proyecto { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }
        [Parameter] public E_Seguimiento AddEdit { get; set; } // Objeto para edici&oacute;n


        E_Seguimiento add;

        bool ShowDuplicateWarning = false; // Indica si se encontr&oacute; un c&oacute;digo duplicado
        E_Seguimiento ExistingSeguimiento = null; // Guarda el seguimiento existente

        string Estado
        {
            get
            {
                return add.Estado.Last().Estado;
            }
            set
            {
                add.Estado.Add(new()
                    {
                        Estado = value,
                        Fecha = DateTime.Now,
                        UsuarioAsignado = null
                    });
            }
        }

        async Task SaveAsync()
        {
            try
            {
                _main.IsLoading = true;

                if (add.Municipio == null)
                {
                    _snackbar.InsertSnackbar(new(&quot;Selecciona la localidad&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    _main.IsLoading = false;
                    return;
                }

                // Verificar si ya existe un seguimiento con el mismo Codigo1
                var existingResult = await _mongoContext.GetOneSeguimientoByCodigo1(add.Codigo1);

                // Si encontramos un seguimiento existente con el mismo c&oacute;digo, verificamos:
                if (existingResult.IsSuccess &amp;&amp; existingResult.Value != null)
                {
                    if (add.Id == null)
                    {
                        ExistingSeguimiento = existingResult.Value;
                        ShowDuplicateWarning = true;
                        _main.IsLoading = false;
                        return;
                    }
                }


                // Si no hay conflictos, proceder con el guardado
                await SaveConfirmedAsync();
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditObra&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }
            
        }

        async Task SaveConfirmedAsync()
        {
            try
            {
                    _main.IsLoading = true;
                        add.Proyecto = Proyecto;

                        var response = add.Id == null
                            ? await _mongoContext.AddSeguimientoMovil(add) // Crear
                            : await _mongoContext.EditSeguimientoMovil(add); // Editar

                        _main.IsLoading = false;
                        ShowDuplicateWarning = false;
                        ExistingSeguimiento = null; // Reset para evitar errores en la vista
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEditObra&quot;, &quot;SaveConfirmedAsync&quot;, DateTime.UtcNow);
                throw;
            }
        
            Close(true);
        }




        protected override async Task OnInitializedAsync()
        {



            if (AddEdit != null)
            {
                // Si se est&aacute; editando, aseguramos que Proyecto est&eacute; asignado
                add = AddEdit;

                // Si el proyecto no est&aacute; asignado, lo asignamos directamente
                if (add.Proyecto == null &amp;&amp; Proyecto != null)
                {
                    add.Proyecto = Proyecto;
                }
            


            }
            else
            {
                add = new E_Seguimiento
                    {
                        FechaAsignacionCliente = DateTime.Now
                    };

                // Asignar el proyecto al nuevo seguimiento
                if (Proyecto != null)
                {
                    add.Proyecto = Proyecto;
                }
            }
        }

    }
    `
  },
  {
    "ID": 44,
    "ServicesName": "ModifyViewProyecto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Modals/ModifyViewProyecto",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/hitos/obra/{id}&quot;
    @if (proyecto != null)
    {
        &lt;span class=&quot;text-2xl text-blue-400 mb-[50px] w-full p-2&quot;&gt;Modificar vista de @(proyecto.nombre)&lt;/span&gt;
        &lt;div class=&quot;w-full h-fit flex flex-wrap justify-between p-2 gap-3&quot;&gt;

            @foreach (var v in HitosNombres.Hitos.Where(h =&gt; h != &quot;Acceso Documentaci&oacute;n y Visita&quot;))
            {
                &lt;div class=&quot;w-[30%] h-fit flex items-center gap-2 p-1 rounded border border-slate-300 hover:bg-gray-100 shadow-sm&quot;&gt;
                    &lt;input type=&quot;checkbox&quot;
                    id=&quot;@v&quot;
                    class=&quot;w-4 h-4 text-teal-500 border-gray-300 rounded focus:ring-teal-500&quot;
                    @onchange=&quot;(e) =&gt; ClickCheckbox(v)&quot;
                    checked=&quot;@proyecto.HitosProyecto.Contains(v)&quot; /&gt;
                    &lt;label for=&quot;@v&quot; class=&quot;text-sm text-gray-700 cursor-pointer&quot;&gt;@v&lt;/label&gt;
                &lt;/div&gt;
            }

            &lt;!-- Secci&oacute;n Acorde&oacute;n para &quot;Coordinaci&oacute;n&quot; --&gt;
            @* 	&lt;div class=&quot;w-full mt-4 border border-gray-300 rounded shadow-md&quot;&gt;
                &lt;div class=&quot;flex justify-between items-center p-3 bg-gray-100 cursor-pointer hover:bg-gray-200&quot;
                    @onclick=&quot;ToggleCoordinacion&quot;&gt;
                    &lt;span class=&quot;text-lg text-gray-700 font-medium&quot;&gt;Coordinaci&oacute;n&lt;/span&gt;
                    &lt;input type=&quot;checkbox&quot;
                        id=&quot;coordinacion-checkbox&quot;
                        class=&quot;w-4 h-4 text-teal-500 border-gray-300 rounded focus:ring-teal-500 ml-auto&quot;
                        @onchange=&quot;@(e =&gt; ClickCheckbox(&quot;Coordinaci&oacute;n&quot;))&quot;
                        checked=&quot;@proyecto.HitosProyecto.Contains(&quot;Coordinaci&oacute;n&quot;)&quot; /&gt;
                &lt;/div&gt;
                @if (showCoordinacion &amp;&amp; Seguimiento?.Coordinacion != null)
                {
                    &lt;p class=&quot;text-gray-600 text-sm mt-4 pl-3&quot;&gt;
                        Aqu&iacute; puedes gestionar los distintos apartados de coordinaci&oacute;n.
                    &lt;/p&gt;
                    &lt;div id=&quot;accordion1&quot; class=&quot;p-4 bg-white&quot;&gt;
                        &lt;div class=&quot;w-[30%] h-fit flex items-center gap-2 p-1 rounded border border-slate-300 hover:bg-gray-100 shadow-sm&quot;&gt;
                            &lt;input type=&quot;checkbox&quot;
                                id=&quot;infogeneral-checkbox&quot;
                                class=&quot;w-4 h-4 text-teal-500 border-gray-300 rounded focus:ring-teal-500&quot;
                                @onchange=&quot;(e) =&gt; ToggleInfoGeneral()&quot;
                                checked=&quot;@Seguimiento.Coordinacion.InfoGeneral&quot; /&gt;
                            &lt;label for=&quot;infogeneral-checkbox&quot; class=&quot;text-sm text-gray-700 cursor-pointer&quot;&gt;
                                Informaci&oacute;n general
                            &lt;/label&gt;
                        &lt;/div&gt;

                    &lt;/div&gt;
                }

            &lt;/div&gt; *@

            &lt;div class=&quot;w-full flex flex-wrap justify-end gap-3&quot;&gt;
                &lt;button class=&quot;w-fit h-fit p-2 rounded bg-red-600 text-white shadow-md&quot; @onclick=&quot;()=&gt; Close(false)&quot;&gt;Cancelar&lt;/button&gt;
                &lt;button class=&quot;w-fit h-fit p-2 rounded bg-teal-400 text-white shadow-md&quot; @onclick=&quot;SaveAsync&quot;&gt;Guardar&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    }

    @code {
        [Parameter] public E_Proyecto proyecto { get; set; }
        [CascadingParameter] public Action&lt;bool&gt; Close { get; set; }

        protected override void OnParametersSet()
        {
            if (proyecto != null)
            {
                if (proyecto.HitosProyecto == null) proyecto.HitosProyecto = new();
            }
        }

        void ClickCheckbox(string hito)
        {
            if (proyecto.HitosProyecto.Contains(hito))
            {
                proyecto.HitosProyecto.Remove(hito);
            }
            else
            {
                proyecto.HitosProyecto.Add(hito);
            }

            InvokeAsync(StateHasChanged);
        }

        async Task SaveAsync()
        {
            try
            {
                _main.IsLoading = true;
                        await _mongoContext.ReplaceOneAuditableAsync&lt;E_Proyecto&gt;(proyecto, DatabaseIdentifiers.Movil);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;ModifyViewProyecto&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

            
            Close(true);
        }
    }
    `
  },
  {
    "ID": 45,
    "ServicesName": "EditObra",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/EditObra",
    "ServicesDescription":`
    `,
    "Code": `
    @* @page &quot;/seguimientomovil/obra/{id}&quot; *@
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Helpers
    @using SeguimientoMovilLogic.Extra.DataSeguimiento
    &lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    &lt;form class=&quot;w-full h-fit overflow-x-auto ScrollbarTop&quot; @onsubmit=&quot;SaveAsync&quot;&gt;
        &lt;div class=&quot;w-fit h-fit flex flex-row p-6 gap-3 ScrollbarTop&quot;&gt;
            @if (data.Value != null)
            {
                &lt;TarjetaInformacion seg=&quot;data.Value&quot;&gt;&lt;/TarjetaInformacion&gt;
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Replanteo&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)).ToList())&quot;&gt;

                    &lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acta Replanteo&quot;))
                {
                    &lt;TarjetaActaReplanteo CountData=&quot;data.Value.DataActaReplanteos.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataActaReplanteos[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataActaReplanteos.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataActaReplanteos[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataActaReplanteos&quot; identifier=&quot;Acta replanteo&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaActaReplanteo
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaActaReplanteo= !data.Value.AplicaActaReplanteo; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaActaReplanteo&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Plano M2 CAP&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataPlanoM2CAPs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataPlanoM2CAPs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataPlanoM2CAPs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataPlanoM2CAPs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataPlanoM2CAPs&quot; identifier=&quot;Plano M2 CAP&quot; @ref=&quot;planom2cap&quot;&gt;
                        &lt;ChildContent&gt;
                            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

                                @if (data.Value.DataPlanoM2CAPs[planom2cap.SelectedOne].TecnicoDelineantePLano != null)
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoM2CAPs[planom2cap.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                    InitialTextValue=&quot;@($&quot;{data.Value.DataPlanoM2CAPs[planom2cap.SelectedOne].TecnicoDelineantePLano.Name} {data.Value.DataPlanoM2CAPs[planom2cap.SelectedOne].TecnicoDelineantePLano.LastName}&quot;)&quot;
                                    InitialValue=&quot;data.Value.DataPlanoM2CAPs[planom2cap.SelectedOne].TecnicoDelineantePLano&quot;&gt;&lt;/Autocomplete&gt;
                                }
                                else
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoM2CAPs[planom2cap.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;

                                    &lt;/Autocomplete&gt;
                                }
                            &lt;/div&gt;
                        &lt;/ChildContent&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaPlanoM2CAP
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaPlanoM2CAP= !data.Value.AplicaPlanoM2CAP; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Medidas EMF&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)).ToList())&quot;&gt;&lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;CVE&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataCVEs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataCVEs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataCVEs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataCVEs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataCVEs&quot; identifier=&quot;CVE&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaCVE
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaCVE= !data.Value.AplicaCVE; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;C&aacute;lculo PLL&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataCalculoPLLs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataCalculoPLLs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataCalculoPLLs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataCalculoPLLs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataCalculoPLLs&quot; identifier=&quot;C&aacute;lculo PLL&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaCalculoPLL
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaCalculoPLL= !data.Value.AplicaCalculoPLL; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Plano PLL&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataPlanoPLLs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataPlanoPLLs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataPlanoPLLs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataPlanoPLLs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataPlanoPLLs&quot; identifier=&quot;Plano PLL&quot; @ref=&quot;planopll&quot;&gt;
                        &lt;ChildContent&gt;
                            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

                                @if (data.Value.DataPlanoPLLs[planopll.SelectedOne].TecnicoDelineantePLano != null)
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoPLLs[planopll.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                    InitialTextValue=&quot;@($&quot;{data.Value.DataPlanoPLLs[planopll.SelectedOne].TecnicoDelineantePLano.Name} {data.Value.DataPlanoPLLs[planopll.SelectedOne].TecnicoDelineantePLano.LastName}&quot;)&quot;
                                    InitialValue=&quot;data.Value.DataPlanoPLLs[planopll.SelectedOne].TecnicoDelineantePLano&quot;&gt;&lt;/Autocomplete&gt;
                                }
                                else
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoPLLs[planopll.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;&lt;/Autocomplete&gt;
                                }
                            &lt;/div&gt;
                        &lt;/ChildContent&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaPlanoPLL
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaPlanoPLL= !data.Value.AplicaPlanoPLL; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Medidas PS&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)).ToList())&quot;&gt;&lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataMemoriaRadioelectricos.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataMemoriaRadioelectricos[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataMemoriaRadioelectricos.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataMemoriaRadioelectricos[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataMemoriaRadioelectricos&quot; identifier=&quot;Memoria radioel&eacute;ctrico&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaMemoriaRadioelectrico
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaMemoriaRadioelectrico= !data.Value.AplicaMemoriaRadioelectrico; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Subida Torre&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)).ToList())&quot;&gt;&lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Fotomontaje&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataFotomontajes.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataFotomontajes[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataFotomontajes.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataFotomontajes[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataFotomontajes&quot; identifier=&quot;Fotomontaje&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaFotomontaje
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaFotomontaje= !data.Value.AplicaFotomontaje; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Proyecto&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataProyectos.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataProyectos[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataProyectos.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataProyectos[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataProyectos&quot; identifier=&quot;Proyecto&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaProyecto
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaProyecto= !data.Value.AplicaProyecto; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Plano constructivo&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataPlanoConstructivos.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataPlanoConstructivos[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataPlanoConstructivos.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataPlanoConstructivos[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataPlanoConstructivos&quot; identifier=&quot;Plano constructivo&quot; @ref=&quot;planoconstructivo&quot;&gt;
                        &lt;ChildContent&gt;
                            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

                                @if (data.Value.DataPlanoConstructivos[planoconstructivo.SelectedOne].TecnicoDelineantePLano != null)
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoConstructivos[planoconstructivo.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                    InitialTextValue=&quot;@($&quot;{data.Value.DataPlanoConstructivos[planoconstructivo.SelectedOne].TecnicoDelineantePLano.Name} {data.Value.DataPlanoConstructivos[planoconstructivo.SelectedOne].TecnicoDelineantePLano.LastName}&quot;)&quot;
                                    InitialValue=&quot;data.Value.DataPlanoConstructivos[planoconstructivo.SelectedOne].TecnicoDelineantePLano&quot;&gt;&lt;/Autocomplete&gt;
                                }
                                else
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoConstructivos[planoconstructivo.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;&lt;/Autocomplete&gt;
                                }
                            &lt;/div&gt;
                        &lt;/ChildContent&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaPlanoConstructivo
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaPlanoConstructivo= !data.Value.AplicaPlanoConstructivo; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Visita CSS&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)).ToList())&quot;&gt;&lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Coordinaci&oacute;n&quot;))
                {
                    &lt;TarjetaCoordinacion CountData=&quot;data.Value.DataCoordinacions.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataCoordinacions[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataCoordinacions.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataCoordinacions[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataCoordinacions&quot; identifier=&quot;Coordinaci&oacute;n&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaCoordinacion
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaCoordinacion= !data.Value.AplicaCoordinacion; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaCoordinacion&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Legalizaci&oacute;n AYTO&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataLegalizacionAYTOs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataLegalizacionAYTOs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataLegalizacionAYTOs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataLegalizacionAYTOs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataLegalizacionAYTOs&quot; identifier=&quot;Legalizaci&oacute;n AYTO&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaLegalizacionAYTO
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaLegalizacionAYTO= !data.Value.AplicaLegalizacionAYTO; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Visita DF&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)).ToList())&quot;&gt;&lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;DF&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataDFs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataDFs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataDFs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataDFs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataDFs&quot; identifier=&quot;DF&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaDF
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaDF= !data.Value.AplicaDF; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Puesta en servicio&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataPuestaEnServicios.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataPuestaEnServicios[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataPuestaEnServicios.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataPuestaEnServicios[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataPuestaEnServicios&quot; identifier=&quot;Puesta en servicio&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaPuestaEnServicio
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaPuestaEnServicio= !data.Value.AplicaPuestaEnServicio; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;CFO&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataCFOs.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataCFOs[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataCFOs.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataCFOs[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataCFOs&quot; identifier=&quot;CFO&quot;&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaCFO
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaCFO= !data.Value.AplicaCFO; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }

                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;) &amp;&amp; data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)).ToList().Count &gt; 0)
                {
                    &lt;TarjetaAccesoDocumentacionn identifier=&quot;Visita ASBuilt&quot; data=&quot;@(data.Value.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)).ToList())&quot;&gt;&lt;/TarjetaAccesoDocumentacionn&gt;
                }
                if (data.Value.Proyecto.HitosProyecto.Contains(&quot;Plano ASBuilt&quot;))
                {
                    &lt;TarjetaBaseData CountData=&quot;data.Value.DataPlanoASBuilts.Where(x=&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)).ToList().Count&quot;
                    CreateVersion=&quot;()=&gt; {if(data.Value.DataPlanoASBuilts[0].FechaCreacionData &gt; new DateTime(2018, 1, 1)) data.Value.DataPlanoASBuilts.Add(new(){FechaCreacionData = DateTime.Now});
    else data.Value.DataPlanoASBuilts[0].FechaCreacionData = DateTime.Now; StateHasChanged();}&quot;
                    data=&quot;data.Value.DataPlanoASBuilts&quot; identifier=&quot;Plano ASBuilt&quot; @ref=&quot;planoasbuilt&quot;&gt;
                        &lt;ChildContent&gt;
                            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                                &lt;span class=&quot;w-full text-blue-400&quot;&gt;Delineante&lt;/span&gt;

                                @if (data.Value.DataPlanoASBuilts[planoasbuilt.SelectedOne].TecnicoDelineantePLano != null)
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoASBuilts[planoasbuilt.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;
                                    InitialTextValue=&quot;@($&quot;{data.Value.DataPlanoASBuilts[planoasbuilt.SelectedOne].TecnicoDelineantePLano.Name} {data.Value.DataPlanoASBuilts[planoasbuilt.SelectedOne].TecnicoDelineantePLano.LastName}&quot;)&quot;
                                    InitialValue=&quot;data.Value.DataPlanoASBuilts[planoasbuilt.SelectedOne].TecnicoDelineantePLano&quot;&gt;&lt;/Autocomplete&gt;
                                }
                                else
                                {
                                    &lt;Autocomplete T=&quot;E_User&quot; SelectOne=&quot;(e)=&gt; data.Value.DataPlanoASBuilts[planoasbuilt.SelectedOne].TecnicoDelineantePLano = e&quot; ToString=&quot;@((e)=&gt; $&quot;{e.Name} {e.LastName}&quot;)&quot;
                                    Database=&quot;@DatabaseIdentifiers.Main&quot;
                                    FilterMongo=&quot;@((s)=&gt; Builders&lt;E_User&gt;.Filter.Regex(x=&gt; x.Name, new BsonRegularExpression(s, &quot;i&quot;)))&quot;&gt;&lt;/Autocomplete&gt;
                                }
                            &lt;/div&gt;
                        &lt;/ChildContent&gt;
                        &lt;AplicaSection&gt;
                            &lt;Checkbox Checked=data.Value.AplicaPlanoASBuilt
                            ChangeCheck=&quot;()=&gt; {data.Value.AplicaPlanoASBuilt= !data.Value.AplicaPlanoASBuilt; StateHasChanged();}&quot; Message=&quot;Aplica&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AplicaSection&gt;
                    &lt;/TarjetaBaseData&gt;
                }
                &lt;TarjetaPedidoo data=&quot;data.Value.DataPedido&quot; identifier=&quot;Pedido&quot;&gt;

                &lt;/TarjetaPedidoo&gt;
            }
        &lt;/div&gt;
    &lt;/form&gt;

    @code {
        [Parameter] public string id { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        TarjetaBaseData&lt;DataPlanoASBuilt&gt; planoasbuilt { get; set; }
        TarjetaBaseData&lt;DataPlanoConstructivo&gt; planoconstructivo { get; set; }
        TarjetaBaseData&lt;DataPlanoM2CAP&gt; planom2cap { get; set; }
        TarjetaBaseData&lt;DataPlanoPLL&gt; planopll { get; set; }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender) return;

            _disconnection.SaveStatus += (async () =&gt;
        {
            try
            {
                if (data.Value != null)
                {
                    await _localStorage.SetItemAsync(&quot;seguimientomoviladd&quot;, data.Value);
                }
                else
                {
                    await _localStorage.RemoveItemAsync(&quot;seguimientomoviladd&quot;);
                }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;EditObra&quot;, &quot;OnAfterRenderAsync&quot;, DateTime.UtcNow);
                throw;
            }
        });

            if (await _localStorage.ContainKeyAsync(&quot;seguimientomoviladd&quot;))
            {
                data.Value = await _localStorage.GetItemAsync&lt;E_Seguimiento&gt;(&quot;seguimientomoviladd&quot;);
                await _localStorage.RemoveItemAsync(&quot;seguimientomoviladd&quot;);
                await InvokeAsync(StateHasChanged);
                return;
            };
        }

        protected override async Task OnInitializedAsync()
        {
            _main.BackgroundImage = &quot;&quot;;
            await LoadApi();
        }

        async Task LoadApi()
        {
            _main.IsLoading = true;

            data = await _mongoContext.GetOneSeguimientoMovil(id);

            if (data.Value.Proyecto.HitosProyecto == null)
            {
                data.Value.Proyecto.HitosProyecto = new();
            }

            if (data.Value.DataActaReplanteos.Count == 0)
            {
                data.Value.DataActaReplanteos.Add(new());
            }
            if (data.Value.DataCalculoPLLs.Count == 0)
            {
                data.Value.DataCalculoPLLs.Add(new());

            }
            if (data.Value.DataCFOs.Count == 0)
            {
                data.Value.DataCFOs.Add(new());

            }
            if (data.Value.DataCoordinacions.Count == 0)
            {
                data.Value.DataCoordinacions.Add(new());

            }
            if (data.Value.DataCVEs.Count == 0)
            {
                data.Value.DataCVEs.Add(new());

            }
            if (data.Value.DataDFs.Count == 0)
            {
                data.Value.DataDFs.Add(new());

            }
            if (data.Value.DataFotomontajes.Count == 0)
            {
                data.Value.DataFotomontajes.Add(new());

            }
            if (data.Value.DataLegalizacionAYTOs.Count == 0)
            {
                data.Value.DataLegalizacionAYTOs.Add(new());

            }
            if (data.Value.DataMemoriaRadioelectricos.Count == 0)
            {
                data.Value.DataMemoriaRadioelectricos.Add(new());

            }
            if (data.Value.DataPlanoASBuilts.Count == 0)
            {
                data.Value.DataPlanoASBuilts.Add(new());

            }
            if (data.Value.DataPlanoConstructivos.Count == 0)
            {
                data.Value.DataPlanoConstructivos.Add(new());

            }
            if (data.Value.DataPlanoM2CAPs.Count == 0)
            {
                data.Value.DataPlanoM2CAPs.Add(new());

            }
            if (data.Value.DataPlanoPLLs.Count == 0)
            {
                data.Value.DataPlanoPLLs.Add(new());

            }
            if (data.Value.DataProyectos.Count == 0)
            {
                data.Value.DataProyectos.Add(new());

            }
            if (data.Value.DataPuestaEnServicios.Count == 0)
            {
                data.Value.DataPuestaEnServicios.Add(new());

            }

            await InvokeAsync(StateHasChanged);

            _main.IsLoading = false;
        }

        async Task SaveAsync()
        {
            try
            {
                _main.IsLoading = true;

                        var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                        _nav.NavigateTo($&quot;/seguimientomovil/{data.Value.Proyecto.Id}&quot;);

                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;EditObra&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);
                throw;
            }

        
        }
    }
    `
  },  
  {
    "ID": 46,
    "ServicesName": "HitoActaRecepcionObra",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoActaRecepcionObra",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/ActaRecepcionObra{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltActaRecepcionObra*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltActaRecepcionObra)&quot;&gt;&lt;/AuthorizePage&gt;
    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;AsBuilt&quot;) == true || data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Acta recepci&oacute;n obra&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltActaRecepcionObraAddPPI)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalActa(null,id);}'&gt;A&ntilde;adir Acta&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltActaRecepcionObraAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaRecepcionObra
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataRecepcionObras?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var acta in data.Value.DataRecepcionObras.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalActa(acta, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(acta)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @acta.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Tecnico != null)
                                    {
                                        @($&quot;{acta.Tecnico.Name} {acta.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(acta.TecnicoExternoNombre))
                                    {
                                        @acta.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (acta.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(acta.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataActaRecepcionObra _localActa { get; set; } = new DataActaRecepcionObra();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedRecepcionObra { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaRecepcionObra = !data.Value.AplicaRecepcionObra;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaRecepcionObra = !data.Value.AplicaRecepcionObra;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedRecepcionObra.InvokeAsync(data.Value.AplicaRecepcionObra);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaRecepcionObra = !data.Value.AplicaRecepcionObra;

                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoActaRecepcionObra&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);
            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataActaRecepcionObra _localActa)
        {

            if (!string.IsNullOrEmpty(_localActa.Comentario))
            {


                comentarioSeleccionado = _localActa.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataRecepcionObras.Count == 0)
                        {
                            data.Value.DataRecepcionObras.Add(new DataActaRecepcionObra()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoActaRecepcionObra&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalActa(DataActaRecepcionObra acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _localActa = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _localActa = new DataActaRecepcionObra();
            }

            var modal = _modal.ShowModal(typeof(AddEditActaRecepcion), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditActaRecepcion._localActa), _localActa },
            { nameof(AddEditActaRecepcion.SeguimientoId), seguimientoId },
            { nameof(AddEditActaRecepcion.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 47,
    "ServicesName": "HitoActaReplanteo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoActaReplanteo",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/ActaReplanteo{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoReplanteoActaReplanteo*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoActaReplanteo)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Acta Replanteo&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Acta Replanteo&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoActaReplanteoAddActa)&quot;&gt;
            
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalActa(null,id);}'&gt;A&ntilde;adir Acta&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoActaReplanteoAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaActaReplanteo
            ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
            Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataActaReplanteos?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var acta in data.Value.DataActaReplanteos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalActa(acta, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(acta)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @acta.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;
                                
                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Tecnico != null)
                                    {
                                        @($&quot;{acta.Tecnico.Name} {acta.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(acta.TecnicoExternoNombre))
                                    {
                                        @acta.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (acta.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(acta.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataActaReplanteo _localActa { get; set; } = new DataActaReplanteo();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChanged { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }
        

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaActaReplanteo = !data.Value.AplicaActaReplanteo;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaActaReplanteo = !data.Value.AplicaActaReplanteo;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChanged.InvokeAsync(data.Value.AplicaActaReplanteo);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaActaReplanteo = !data.Value.AplicaActaReplanteo;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoActaReplanteo&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataActaReplanteo _localActa)
        {

            if (!string.IsNullOrEmpty(_localActa.Comentario))
            {


                comentarioSeleccionado = _localActa.Comentario;
            }
            
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataActaReplanteos.Count == 0)
                        {
                            data.Value.DataActaReplanteos.Add(new DataActaReplanteo()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoActaReplanteo&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalActa(DataActaReplanteo acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _localActa = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _localActa = new DataActaReplanteo();
            }

            var modal = _modal.ShowModal(typeof(AddEditActaReplanteo), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditActaReplanteo._localActa), _localActa },
            { nameof(AddEditActaReplanteo.SeguimientoId), seguimientoId },
            { nameof(AddEditActaReplanteo.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 48,
    "ServicesName": "HitoAYTO",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoAYTO",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/AYTO{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltDocFinObraLicencias*@

    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraLicencias)&quot;&gt;&lt;/AuthorizePage&gt;


    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Legalizaci&oacute;n AYTO&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Legalizaci&oacute;n AYTO&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraLicenciasAddLegalizacion)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalAYTO(null,id);}'&gt;A&ntilde;adir legalizaci&oacute;n&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraLicenciasAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaLegalizacionAYTO
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.DataLegalizacionAYTOs?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var LegalAYTO in data.Value.DataLegalizacionAYTOs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAYTO(LegalAYTO, id)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(LegalAYTO)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;

                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(LegalAYTO.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;
                            
                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@LegalAYTO.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(LegalAYTO.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (LegalAYTO.Tecnico != null)
                                    {
                                        @($&quot;{LegalAYTO.Tecnico.Name} {LegalAYTO.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(LegalAYTO.TecnicoExternoNombre))
                                    {
                                        @LegalAYTO.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(LegalAYTO.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(LegalAYTO.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (LegalAYTO.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(LegalAYTO.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (LegalAYTO.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (LegalAYTO.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((LegalAYTO.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;


                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }
            &lt;/div&gt;
        }


    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataLegalizacionAYTO _AYTO { get; set; } = new DataLegalizacionAYTO();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedAYTO { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaLegalizacionAYTO = !data.Value.AplicaLegalizacionAYTO;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaLegalizacionAYTO = !data.Value.AplicaLegalizacionAYTO;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedAYTO.InvokeAsync(data.Value.AplicaLegalizacionAYTO);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaLegalizacionAYTO = !data.Value.AplicaLegalizacionAYTO;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoAYTO&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataLegalizacionAYTO _AYTO)
        {

            if (!string.IsNullOrEmpty(_AYTO.Comentario))
            {


                comentarioSeleccionado = _AYTO.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataLegalizacionAYTOs.Count == 0)
                        {
                            data.Value.DataLegalizacionAYTOs.Add(new DataLegalizacionAYTO()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoAYTO&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }

            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalAYTO(DataLegalizacionAYTO acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _AYTO = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _AYTO = new DataLegalizacionAYTO();
            }

            var modal = _modal.ShowModal(typeof(AddEditAYTO), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditAYTO._AYTO), _AYTO },
            { nameof(AddEditAYTO.SeguimientoId), seguimientoId },
            { nameof(AddEditAYTO.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 49,
    "ServicesName": "HitoBoletinElectrico",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoBoletinElectrico",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/ActaRBoletinElectrico{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltDocFinObraBoletinElectrico*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraBoletinElectrico)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Acta Replanteo&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Bolet&iacute;n el&eacute;ctrico&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraBoletinElectricoAddBoletinElectrico)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalBoletin(null,id);}'&gt;A&ntilde;adir bolet&iacute;n el&eacute;ctrico&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraBoletinElectricoAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaBoletinElectrico
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataBoletinElectricos?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var acta in data.Value.DataBoletinElectricos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalBoletin(acta, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(acta)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @acta.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Tecnico != null)
                                    {
                                        @($&quot;{acta.Tecnico.Name} {acta.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(acta.TecnicoExternoNombre))
                                    {
                                        @acta.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (acta.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(acta.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataBoletinElectrico boletin { get; set; } = new DataBoletinElectrico();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedBoletin { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaBoletinElectrico = !data.Value.AplicaBoletinElectrico;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaBoletinElectrico = !data.Value.AplicaBoletinElectrico;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedBoletin.InvokeAsync(data.Value.AplicaBoletinElectrico);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaBoletinElectrico = !data.Value.AplicaBoletinElectrico;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoBoletinElectrico&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataBoletinElectrico _boletin)
        {

            if (!string.IsNullOrEmpty(_boletin.Comentario))
            {


                comentarioSeleccionado = _boletin.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataBoletinElectricos.Count == 0)
                        {
                            data.Value.DataBoletinElectricos.Add(new DataBoletinElectrico()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoBoletinElectrico&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalBoletin(DataBoletinElectrico boletin = null, string seguimientoId = null)
        {
            if (boletin != null)
            {
                this.boletin = boletin; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                this.boletin = new DataBoletinElectrico();
            }

            var modal = _modal.ShowModal(typeof(AddEditBoletin), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditBoletin._boletin), this.boletin },
            { nameof(AddEditBoletin.SeguimientoId), seguimientoId },
            { nameof(AddEditBoletin.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },  
  {
    "ID": 50,
    "ServicesName": "HitoCalculoPLL",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoCalculoPLL",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/CalculoPLL{id}&quot;
    @using DelineacionLogic
    @using LPSGrupo.Components.Areas.MovilF.Radioelectrico.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoCalculoPLL)&quot;&gt;&lt;/AuthorizePage&gt;

    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoRadioelectricoCalculoPLL*@
    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;C&aacute;lculo PLL&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3 gap-4&quot;&gt;

            @* &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalCalculo(null,id);}'&gt;A&ntilde;adir c&aacute;lculo PLL&lt;/button&gt; *@
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoCalculoPLLAddTrabajo)&quot;&gt;
        
            &lt;a href=&quot;@($&quot;/radioelectrico/?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir trabajo&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoCalculoPLLAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaCalculoPLL
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.SolicitudRadio?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var CalculoPLL in data.Value.SolicitudRadio.Where(x =&gt; x.TipoTrabajo == &quot;Simulaci&oacute;n PLL&quot;))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                            &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(CalculoPLL)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectRadio(CalculoPLL)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(CalculoPLL.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;
                                
                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@CalculoPLL.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (CalculoPLL.IngenieroAsignado != null)
                                    {
                                        @($&quot;{CalculoPLL.IngenieroAsignado.Name} {CalculoPLL.IngenieroAsignado.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(CalculoPLL.IngenieroteExt))
                                    {
                                        @CalculoPLL.IngenieroteExt
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CalculoPLL.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CalculoPLL.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (CalculoPLL.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CalculoPLL.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CalculoPLL.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CalculoPLL.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @* @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                } *@

                @if (radioSeleccionado != null &amp;&amp; radioSeleccionado.Comentarios?.Any() == true)
                {
                    &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                        &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                        @foreach (var v in radioSeleccionado.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;
                                    @v.Name
                                &lt;/div&gt;
                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }


    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataCalculoPLL Calculo { get; set; } = new DataCalculoPLL();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedCalculoPLL { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        //Parametros para la bidireccionalidad con radio

        List&lt;E_Proyecto&gt; Proyectos = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_Trabajo&gt; SolicitudRadio { get; set; }

        private E_Trabajo radioSeleccionado;

        public E_User usuarios { get; set; }

        List&lt;E_Tecnologias&gt; Tecnologias { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaCalculoPLL = !data.Value.AplicaCalculoPLL;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaCalculoPLL = !data.Value.AplicaCalculoPLL;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedCalculoPLL.InvokeAsync(data.Value.AplicaCalculoPLL);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaCalculoPLL = !data.Value.AplicaCalculoPLL;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCalculoPLL&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                throw;
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

            // M&eacute;todo para seleccionar el plano
        void SelectRadio(E_Trabajo radio)
        {
            radioSeleccionado = radio;
        }



        protected override async Task OnInitializedAsync()
        {
            try
            {
                    Proyectos = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                        // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                        var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                        if (!string.IsNullOrEmpty(token))
                        {
                            // Leer las propiedades del token JWT usando UserService
                            if (_user.CheckTokenIsValid(token))
                            {
                                _user.ReadJWTProperties(token);
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCalculoPLL&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }

        
        }

        // private string comentarioSeleccionado;

        // private void ShowComment(DataCalculoPLL _Calculo)
        // {

        // 	if (!string.IsNullOrEmpty(_Calculo.Comentario))
        // 	{


        // 		comentarioSeleccionado = _Calculo.Comentario;
        // 	}

        // }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudRadio != null)
                        {
                            SolicitudRadio = data.Value.SolicitudRadio;
                        }

                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCalculoPLL&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        //Modal AddEdit
        bool IsSaved = false;

        E_Trabajo AddEditTrabajo = new()
            {
                Comentarios = new(),
                FechaObjetivo = DateTime.Now
            };

        void OpenModalAddEdit(E_Trabajo edit = null)
        {
            if (edit != null)
            {
                AddEditTrabajo = edit;
            }
            else
            {
                AddEditTrabajo = new()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now
                    };
            }

            var modal = _modal.ShowModal(typeof(AddEditTrabajoModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditTrabajoModal.AddTrabajo), AddEditTrabajo},
                {nameof(AddEditTrabajoModal.Saved),IsSaved},
                {nameof(AddEditTrabajoModal.IdSeguimiento),IdSeguimiento},
                {nameof(AddEditTrabajoModal.Proyectos),Proyectos},
                {nameof(AddEditTrabajoModal.Tecnologias),Tecnologias},
            }, FixedWidth: 80);

            modal.OnCloseModal += ResponseModalAddEdit;
        }

        async void ResponseModalAddEdit(bool success)
        {
            AddEditTrabajo = new E_Trabajo()
                {
                    Comentarios = new(),
                    FechaObjetivo = DateTime.Now
                };
            IsSaved = false;
            IdSeguimiento = &quot;&quot;;

            if (success)
            {
                await LoadApi();
            }

            await _localStorage.RemoveItemAsync(&quot;radioelectricoadd&quot;);
            await InvokeAsync(StateHasChanged);
        }


        // Modal AddEditActa

        // public E_Seguimiento addeditModal = new E_Seguimiento();
        // public bool IsSaved = false;

        // void OpenModalCalculo(DataCalculoPLL calculo = null, string seguimientoId = null)
        // {
        // 	if (calculo != null)
        // 	{
        // 		Calculo = calculo; // Usar el acta existente para editar
        // 	}
        // 	else
        // 	{
        // 		// Crear un nuevo acta vac&iacute;o si no se pasa uno
        // 		Calculo = new DataCalculoPLL();
        // 	}

        // 	var modal = _modal.ShowModal(typeof(AddEditCalculo), new Dictionary&lt;string, object&gt;
        // {
        // 	{ nameof(AddEditCalculo._Calculo), Calculo },
        // 	{ nameof(AddEditCalculo.SeguimientoId), seguimientoId },
        // 	{ nameof(AddEditCalculo.Saved), IsSaved }
        // }, FixedWidth: 80);

        // 	modal.OnCloseModal += CloseModalActa;
        // }


        // async void CloseModalActa(bool reload)
        // {
        // 	addeditModal = new E_Seguimiento();

        // 	if (reload)
        // 	{
        // 		await LoadApi();
        // 	}

        // 	await Task.Delay(100);

        // 	await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

        // 	await InvokeAsync(StateHasChanged);
        // }
    }

    `
  },
  {
    "ID": 51,
    "ServicesName": "HitoCertTratamientoResiduos",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoCertTratamientoResiduos",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/VertTratamientoResiduos{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltDocFinObraCerTratamientoResiduos*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCerTratamientoResiduos)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;AsBuilt&quot;) == true || data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Cert. Tratamiento de Residuos&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCerTratamientoResiduosAddCertTratamiento)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalActa(null,id);}'&gt;A&ntilde;adir cert. de residuos&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCerTratamientoResiduosAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaCertResiduos
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;

        &lt;/div&gt;

        @if (data.Value.DataCertsResiduos?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var Cert in data.Value.DataCertsResiduos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalActa(Cert, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(Cert)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @Cert.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(Cert.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (Cert.Tecnico != null)
                                    {
                                        @($&quot;{Cert.Tecnico.Name} {Cert.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(Cert.TecnicoExternoNombre))
                                    {
                                        @Cert.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(Cert.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(Cert.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (Cert.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(Cert.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (Cert.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (Cert.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(Cert.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataCertResiduos _CertResiduos { get; set; } = new DataCertResiduos();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedCertResiduos { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaCertResiduos = !data.Value.AplicaCertResiduos;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaCertResiduos = !data.Value.AplicaCertResiduos;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedCertResiduos.InvokeAsync(data.Value.AplicaCertResiduos);
                }
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCertTratamientoResiduos&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
                data.Value.AplicaCertResiduos = !data.Value.AplicaCertResiduos;
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataCertResiduos _certResiduos)
        {

            if (!string.IsNullOrEmpty(_certResiduos.Comentario))
            {


                comentarioSeleccionado = _certResiduos.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataCertsResiduos.Count == 0)
                        {
                            data.Value.DataCertsResiduos.Add(new DataCertResiduos()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCertTratamientoResiduos&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }

            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalActa(DataCertResiduos acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _CertResiduos = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _CertResiduos = new DataCertResiduos();
            }

            var modal = _modal.ShowModal(typeof(AddEditCertResiduos), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditCertResiduos._certResiduos), _CertResiduos },
            { nameof(AddEditCertResiduos.SeguimientoId), seguimientoId },
            { nameof(AddEditCertResiduos.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 52,
    "ServicesName": "HitoCFO",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoCFO",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/CFO{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltDocFinObraBoletinElectrico*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCFO)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;ASBuilt&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;CFO&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCFOAddCFO)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalCFO(null,id);}'&gt;A&ntilde;adir CFO&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltDocFinObraCFOAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaCFO
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.DataCFOs?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var CFO in data.Value.DataCFOs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalCFO(CFO, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(CFO)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;

                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(CFO.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;

                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@CFO.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (CFO.Tecnico != null)
                                    {
                                        @($&quot;{CFO.Tecnico.Name} {CFO.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(CFO.TecnicoExternoNombre))
                                    {
                                        @CFO.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (CFO.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CFO.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CFO.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CFO.FacturaVisado?.ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }
            &lt;/div&gt;
        }


    }
    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataCFO _CFO { get; set; } = new DataCFO();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedCFO { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaCFO = !data.Value.AplicaCFO;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaCFO = !data.Value.AplicaCFO;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedCFO.InvokeAsync(data.Value.AplicaCFO);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaCFO = !data.Value.AplicaCFO;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCFO&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataCFO _CFO)
        {

            if (!string.IsNullOrEmpty(_CFO.Comentario))
            {


                comentarioSeleccionado = _CFO.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataCFOs.Count == 0)
                        {
                            data.Value.DataCFOs.Add(new DataCFO()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCFO&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }

            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalCFO(DataCFO cfo = null, string seguimientoId = null)
        {
            if (cfo != null)
            {
                _CFO = cfo; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _CFO = new DataCFO();
            }

            var modal = _modal.ShowModal(typeof(AddEditCFO), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditCFO._CFO), _CFO },
            { nameof(AddEditCFO.SeguimientoId), seguimientoId },
            { nameof(AddEditCFO.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 53,
    "ServicesName": "HitoCoordinacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoCoordinacion",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/Coordinacion{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoCoordinacionCoordinacion*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionCoordinacion)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Coordinaci&oacute;n&quot;) == true &amp;&amp; data.Value != null)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Coordinaci&oacute;n&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionCoordinacionAddCoordinacion)&quot;&gt;
            
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalCoordinacion(null,id);}'&gt;A&ntilde;adir coordinaci&oacute;n&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionCoordinacionAplica)&quot;&gt;
            
            &lt;Checkbox Checked=data.Value.AplicaCoordinacion
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataCoordinacions?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;




                        @foreach (var coordinacion in data.Value.DataCoordinacions.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalCoordinacion(coordinacion, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(coordinacion)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;

                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.CantidadAFacturar.ToString(&quot;F2&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (coordinacion.TecnicoCSS != null)
                                    {
                                        @($&quot;{coordinacion.TecnicoCSS.Name} {coordinacion.TecnicoCSS.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(coordinacion.TecnicoCSSExternoNombre))
                                    {
                                        @coordinacion.TecnicoCSSExterno
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (coordinacion.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (coordinacion.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (coordinacion.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(coordinacion.FacturaVisado?.ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }


                    &lt;/tbody&gt;
                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }


    }

    @code {
        [Parameter] public string Hito { get; set; }
        [Parameter] public DataCoordinacion _coordinacion { get; set; } = new DataCoordinacion();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedCoordinador { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaCoordinacion = !data.Value.AplicaCoordinacion;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaCoordinacion = !data.Value.AplicaCoordinacion;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedCoordinador.InvokeAsync(data.Value.AplicaCoordinacion);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaCoordinacion = !data.Value.AplicaCoordinacion;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCoordinacion&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataCoordinacion _Coordinacion)
        {

            if (!string.IsNullOrEmpty(_Coordinacion.Comentario))
            {


                comentarioSeleccionado = _Coordinacion.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                    _main.IsLoading = true;


                            data = await _mongoContext.GetOneSeguimientoMovil(id);

                            if (data.Value.DataCoordinacions.Count == 0)
                            {
                                data.Value.DataCoordinacions.Add(new DataCoordinacion()); // Agregar acta vac&iacute;o si no existen
                            }
                            await InvokeAsync(StateHasChanged);
                            _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCoordinacion&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }

            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalCoordinacion(DataCoordinacion acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _coordinacion = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _coordinacion = new DataCoordinacion();
            }

            var modal = _modal.ShowModal(typeof(AddEditCoordinacion), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditCoordinacion._Coordinacion), _coordinacion },
            { nameof(AddEditCoordinacion.SeguimientoId), seguimientoId },
            { nameof(AddEditCoordinacion.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },  
  {
    "ID": 54,
    "ServicesName": "HitoCVE",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoCVE",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/CVE{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoCVEMastilInformeCVE*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastilInformeCVE)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Informe CVE m&aacute;stil&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastilInformeCVEAddCVE)&quot;&gt;
            
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalCVE(null,id);}'&gt;A&ntilde;adir CVE&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastilInformeCVEAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaCVE
            ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
            Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;

        &lt;/div&gt;
        @if (data.Value.DataCVEs?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var CVE in data.Value.DataCVEs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalCVE(CVE, id)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(CVE)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;
                                
                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.CantidadAFacturar.ToString(&quot;F2&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CVE.Tecnico != null)
                                    {
                                        @($&quot;{CVE.Tecnico.Name} {CVE.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(CVE.TecnicoExternoNombre))
                                    {
                                        @CVE.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (CVE.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CVE.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CVE.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FacturaVisado?.ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }


    }


    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataCVE CVE { get; set; } = new DataCVE();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedCVE { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaCVE = !data.Value.AplicaCVE;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaCVE = !data.Value.AplicaCVE;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedCVE.InvokeAsync(data.Value.AplicaCVE);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaCVE = !data.Value.AplicaCVE;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCVE&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataCVE _CVE)
        {

            if (!string.IsNullOrEmpty(_CVE.Comentario))
            {


                comentarioSeleccionado = _CVE.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataCVEs.Count == 0)
                        {
                            data.Value.DataCVEs.Add(new DataCVE()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCVE&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalCVE(DataCVE acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                CVE = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                CVE = new DataCVE();
            }

            var modal = _modal.ShowModal(typeof(AddEditCVE), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditCVE._CVE), CVE },
            { nameof(AddEditCVE.SeguimientoId), seguimientoId },
            { nameof(AddEditCVE.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 55,
    "ServicesName": "HitoCVETorre",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoCVETorre",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/CVETorre{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoCVETorreInformeTorre*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorre)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Informe CVE Torre&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorreInformeTorreAddCVE)&quot;&gt;
    
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalCVETorre(null,id);}'&gt;A&ntilde;adir CVE&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorreInformeTorreAplica)&quot;&gt;
    
            &lt;Checkbox Checked=data.Value.AplicaCVETorre
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.DataCVEsTorre?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var CVE in data.Value.DataCVEsTorre.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalCVETorre(CVE, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(CVE)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CVE.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CVE.Tecnico != null)
                                    {
                                        @($&quot;{CVE.Tecnico.Name} {CVE.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(CVE.TecnicoExternoNombre))
                                    {
                                        @CVE.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (CVE.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (CVE.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;)).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.FacturaVisado?.ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }


    }


    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataCVETorre CVE { get; set; } = new DataCVETorre();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedCVEinformeTorre { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaCVETorre = !data.Value.AplicaCVETorre;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaCVETorre = !data.Value.AplicaCVETorre;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedCVEinformeTorre.InvokeAsync(data.Value.AplicaCVETorre);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaCVETorre = !data.Value.AplicaCVETorre;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCVETorre&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataCVETorre _CVE)
        {

            if (!string.IsNullOrEmpty(_CVE.Comentario))
            {


                comentarioSeleccionado = _CVE.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataCVEsTorre.Count == 0)
                        {
                            data.Value.DataCVEsTorre.Add(new DataCVETorre()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoCVETorre&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalCVETorre(DataCVETorre acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                CVE = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                CVE = new DataCVETorre();
            }

            var modal = _modal.ShowModal(typeof(AddEditCVETorre), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditCVETorre._CVE), CVE },
            { nameof(AddEditCVETorre.SeguimientoId), seguimientoId },
            { nameof(AddEditCVETorre.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 56,
    "ServicesName": "HitoDF",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoDF",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/DF{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals

    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoDireccionObraDocDF*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraDocDF)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;DF&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraDocDFAddDF)&quot;&gt;
    
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalDF(null,id);}'&gt;A&ntilde;adir DF&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraDocDFAplica)&quot;&gt;
    
            &lt;Checkbox Checked=data.Value.AplicaDF
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if ((data.Value.DataDFs?.Count ?? 0) &gt;= 0)

        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                        
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var DF in data.Value.DataDFs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalDF(DF, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(DF)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((DF.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)).ToString())&lt;/td&gt;
                                
                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@DF.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (DF.Tecnico != null)
                                    {
                                        @($&quot;{DF.Tecnico.Name} {DF.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(DF.TecnicoExternoNombre))
                                    {
                                        @DF.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (DF.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (DF.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (DF.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(DF.FacturaVisado?.ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;
                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }

    }
    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataDF _DF { get; set; } = new DataDF();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedDF { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaDF = !data.Value.AplicaDF;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaDF = !data.Value.AplicaDF;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedDF.InvokeAsync(data.Value.AplicaDF);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaDF = !data.Value.AplicaDF;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoDF&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataDF _DF)
        {

            if (!string.IsNullOrEmpty(_DF.Comentario))
            {


                comentarioSeleccionado = _DF.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataLegalizacionAYTOs.Count == 0)
                        {
                            data.Value.DataLegalizacionAYTOs.Add(new DataLegalizacionAYTO()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoDF&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }

            
        }


        // Modal AddEditDf

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalDF(DataDF DF = null, string seguimientoId = null)
        {
            if (DF != null)
            {
                _DF = DF; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _DF = new DataDF();
            }

            var modal = _modal.ShowModal(typeof(AddEditDF), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditDF._DF), _DF },
            { nameof(AddEditDF.SeguimientoId), seguimientoId },
            { nameof(AddEditDF.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 57,
    "ServicesName": "HitoDocsCoordinacion",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoDocsCoordinacion",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/DocCoordinacion{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoCoordinacionDocContrata*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionDocContrata)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Coordinaci&oacute;n&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Documentaci&oacute;n contrata&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionDocContrataAddDocumentacion)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalDocCoordinacion(null,id);}'&gt;A&ntilde;adir documentaci&oacute;n&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionDocContrataAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaDocCoordinacion
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataDoscsCoordinacion?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var coordinacion in data.Value.DataDoscsCoordinacion.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalDocCoordinacion(coordinacion, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(coordinacion)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @coordinacion.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(coordinacion.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (coordinacion.Tecnico != null)
                                    {
                                        @($&quot;{coordinacion.Tecnico.Name} {coordinacion.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(coordinacion.TecnicoExternoNombre))
                                    {
                                        @coordinacion.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(coordinacion.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(coordinacion.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (coordinacion.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(coordinacion.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (coordinacion.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (coordinacion.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(coordinacion.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataDocCoordinacion _coordinacion { get; set; } = new DataDocCoordinacion();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedDocCoordinacion { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaDocCoordinacion = !data.Value.AplicaDocCoordinacion;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaDocCoordinacion = !data.Value.AplicaDocCoordinacion;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedDocCoordinacion.InvokeAsync(data.Value.AplicaDocCoordinacion);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaDocCoordinacion = !data.Value.AplicaDocCoordinacion;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoDocsCoordinacion&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataDocCoordinacion _localActa)
        {

            if (!string.IsNullOrEmpty(_localActa.Comentario))
            {


                comentarioSeleccionado = _localActa.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataDoscsCoordinacion.Count == 0)
                        {
                            data.Value.DataDoscsCoordinacion.Add(new DataDocCoordinacion()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoDocsCoordinacion&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }

            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalDocCoordinacion(DataDocCoordinacion doc = null, string seguimientoId = null)
        {
            if (doc != null)
            {
                _coordinacion = doc; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _coordinacion = new DataDocCoordinacion();
            }

            var modal = _modal.ShowModal(typeof(AddEditDocCoordinacion), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditDocCoordinacion._DocCoordinacion), _coordinacion },
            { nameof(AddEditDocCoordinacion.SeguimientoId), seguimientoId },
            { nameof(AddEditDocCoordinacion.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },  
  {
    "ID": 58,
    "ServicesName": "HitoFotomontaje",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoFotomontaje",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/Fotomontaje{id}&quot;
    @using DelineacionLogic
    @using LPSGrupo.Components.Areas.MovilF.Delineacion.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoFotoMontaje*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotoMontaje)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Fotomontaje&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3 gap-4&quot;&gt;

            @* 	&lt;button class=&quot;p-2 bg-teal-500 text-white rounded&quot; @onclick='()=&gt;{IsSaved=false; OpenModalFoto(null,id);}'&gt;A&ntilde;adir fotomontaje&lt;/button&gt; *@

            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotoMontajeAddPlanoFotoMontaje)&quot;&gt;
    
            &lt;a href=&quot;@($&quot;delineacion?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir plano fotomontaje&lt;/a&gt;
            &lt;/AuthorizedContent&gt;

            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotoMontajeAplica)&quot;&gt;
    
            &lt;Checkbox Checked=data.Value.AplicaFotomontaje
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.SolicitudPlanos?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var Fotomontaje in data.Value.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo == &quot;Fotomontaje&quot;))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(Fotomontaje)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectPlano(Fotomontaje)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;

                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((Fotomontaje.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)).ToString())&lt;/td&gt;

                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@Fotomontaje.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(Fotomontaje.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (Fotomontaje.DelineanteAsignado != null)
                                    {
                                        @($&quot;{Fotomontaje.DelineanteAsignado.Name} {Fotomontaje.DelineanteAsignado.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(Fotomontaje.DelineanteExt))
                                    {
                                        @Fotomontaje.DelineanteExt
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(Fotomontaje.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(Fotomontaje.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (Fotomontaje.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(Fotomontaje.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (Fotomontaje.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (Fotomontaje.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(Fotomontaje.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @* 	@if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                } *@


                @if (planoSeleccionado != null &amp;&amp; planoSeleccionado.Comentarios?.Any() == true)
                {
                    &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                        &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                        @foreach (var v in planoSeleccionado.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;
                                    @v.Name
                                &lt;/div&gt;
                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                }


            &lt;/div&gt;
        }


    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataFotomontaje Foto { get; set; } = new DataFotomontaje();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedFoto { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        //Parametros para la bidireccionalidad con delineaci&oacute;n

        List&lt;E_Proyecto&gt; PaginatedProyecto = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_SolicitudDelineacion&gt; SolicitudDelineacion { get; set; }

        private E_SolicitudDelineacion planoSeleccionado;

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaFotomontaje = !data.Value.AplicaFotomontaje;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaFotomontaje = !data.Value.AplicaFotomontaje;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedFoto.InvokeAsync(data.Value.AplicaFotomontaje);
                }
            }
            catch (Exception)
            {
                data.Value.AplicaFotomontaje = !data.Value.AplicaFotomontaje;
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar el plano
        void SelectPlano(E_SolicitudDelineacion plano)
        {
            planoSeleccionado = plano;
        }



        protected override async Task OnInitializedAsync()
        {
            try
            {

                    PaginatedProyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                    // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                    var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                    if (!string.IsNullOrEmpty(token))
                    {
                        // Leer las propiedades del token JWT usando UserService
                        if (_user.CheckTokenIsValid(token))
                        {
                            _user.ReadJWTProperties(token);
                        }
                    }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoFotomontaje&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }

        }

        // private string comentarioSeleccionado;

        // private void ShowComment(DataFotomontaje _Foto)
        // {

        // 	if (!string.IsNullOrEmpty(_Foto.Comentario))
        // 	{


        // 		comentarioSeleccionado = _Foto.Comentario;
        // 	}

        // }



        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudPlanos != null)
                        {
                            SolicitudDelineacion = data.Value.SolicitudPlanos;
                        }

                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoFotomontaje&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        void OpenModalAddEdit(DelineacionLogic.E_SolicitudDelineacion edit = null)
        {
            if (edit != null)
            {
                if (edit.DelineanteAsignado == null)
                {
                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }
                }
                else
                {
                    if ((string.IsNullOrEmpty(edit.DelineanteAsignado.Name)) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }

                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;) &amp;&amp; _user.email.ToLower() != edit.DelineanteAsignado.Name &amp;&amp;
                    _user.email.ToLower() != edit.DelineanteAsignado.Email)
                    {
                        return;
                    }
                }
            }

            var modal = _modal.ShowModal(typeof(AddEditSolicitudModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditSolicitudModal.AddEditSolicitud), edit},
                {nameof(AddEditSolicitudModal.IdSeguimiento), IdSeguimiento},
                {nameof(AddEditSolicitudModal.PaginatedProyecto), PaginatedProyecto},

            }, FixedWidth: 80);

            modal.OnCloseModal += async (b) =&gt;
            {
                await ResponseModalAddEdit(b);
            };
        }

        async Task ResponseModalAddEdit(bool success)
        {
            IdSeguimiento = &quot;&quot;;

            await LoadApi();
        }


        // Modal AddEditActa

        // public E_Seguimiento addeditModal = new E_Seguimiento();
        // public bool IsSaved = false;

        // void OpenModalFoto(DataFotomontaje foto = null, string seguimientoId = null)
        // {
        // 	if (foto != null)
        // 	{
        // 		Foto = foto; // Usar el acta existente para editar
        // 	}
        // 	else
        // 	{
        // 		// Crear un nuevo acta vac&iacute;o si no se pasa uno
        // 		Foto = new DataFotomontaje();
        // 	}

        // 	var modal = _modal.ShowModal(typeof(AddEditFoto), new Dictionary&lt;string, object&gt;
        // {
        // 	{ nameof(AddEditFoto._fotomontaje), Foto },
        // 	{ nameof(AddEditFoto.SeguimientoId), seguimientoId },
        // 	{ nameof(AddEditFoto.Saved), IsSaved }
        // }, FixedWidth: 80);

        // 	modal.OnCloseModal += CloseModalActa;
            // }


        // async void CloseModalActa(bool reload)
        // {
        // 	addeditModal = new E_Seguimiento();

        // 	if (reload)
        // 	{
        // 		await LoadApi();
        // 	}

        // 	await Task.Delay(100);

        // 	await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

        // 	await InvokeAsync(StateHasChanged);
            // }
    }
    `
  },
  {
    "ID": 59,
    "ServicesName": "HitoFotoTexto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoFotoTexto",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/FotoTexto{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoFotomontajeDocTexto*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotomontajeDocTexto)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Doc. Texto&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotomontajeDocTextoAddDocText)&quot;&gt;
    
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalTexto(null,id);}'&gt;A&ntilde;adir Doc. Texto&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoFotomontajeDocTextoAplica)&quot;&gt;
    
            &lt;Checkbox Checked=data.Value.AplicaFotoTexto
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;

        &lt;/div&gt;
        @if ((data.Value.DataFotosTexto?.Count ?? 0) &gt;= 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;


                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var _foto in data.Value.DataFotosTexto.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalTexto(_foto, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(_foto)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(_foto.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;

                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(CVE.CantidadAFacturar.ToString(&quot;F2&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(_foto.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (_foto.Tecnico != null)
                                    {
                                        @($&quot;{_foto.Tecnico.Name} {_foto.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(_foto.TecnicoExternoNombre))
                                    {
                                        @_foto.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(_foto.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(_foto.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (_foto.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(_foto.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (_foto.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (_foto.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(_foto.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;

                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p&gt;No hay doc. Texto&lt;/p&gt;
        }


    }


    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataFotoTexto _FotoTexto { get; set; } = new DataFotoTexto();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedFotoTexto { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaFotoTexto = !data.Value.AplicaFotoTexto;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaFotoTexto = !data.Value.AplicaFotoTexto;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedFotoTexto.InvokeAsync(data.Value.AplicaFotoTexto);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaFotoTexto = !data.Value.AplicaFotoTexto;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoFotoTexto&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataFotoTexto _fototexto)
        {

            if (!string.IsNullOrEmpty(_fototexto.Comentario))
            {


                comentarioSeleccionado = _fototexto.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataFotosTexto.Count == 0)
                        {
                            data.Value.DataFotosTexto.Add(new DataFotoTexto()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoFotoTexto&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalTexto(DataFotoTexto acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _FotoTexto = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _FotoTexto = new DataFotoTexto();
            }

            var modal = _modal.ShowModal(typeof(AddEditTexto), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditTexto._fotoTexto), _FotoTexto },
            { nameof(AddEditTexto.SeguimientoId), seguimientoId },
            { nameof(AddEditTexto.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 60,
    "ServicesName": "HitoInformeAsBuilt",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoInformeAsBuilt",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/InformeAsBuilt{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltInforme*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltInforme)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;AsBuilt&quot;) == true || data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Informe AsBuilt&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltInformeAddInformeAsBuilt)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalInformeAsBuilt(null,id);}'&gt;A&ntilde;adir informe AsBuilt&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltInformeAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaInformeAsBuilt
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
                &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.DataInformesAsBuilt?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var informe in data.Value.DataInformesAsBuilt.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalInformeAsBuilt(informe, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(informe)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(informe.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;

                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@CalculoPLL.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((informe.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (informe.Tecnico != null)
                                    {
                                        @($&quot;{informe.Tecnico.Name} {informe.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(informe.TecnicoExternoNombre))
                                    {
                                        @informe.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(informe.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(informe.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (informe.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(informe.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (informe.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (informe.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((informe.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }
            &lt;/div&gt;
        }


    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataInformeAsBuilt _Informe { get; set; } = new DataInformeAsBuilt();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedInformeAsBuilt { get; set; }
        DataInformeAsBuilt actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaInformeAsBuilt = !data.Value.AplicaInformeAsBuilt;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaInformeAsBuilt = !data.Value.AplicaInformeAsBuilt;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedInformeAsBuilt.InvokeAsync(data.Value.AplicaInformeAsBuilt);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaInformeAsBuilt = !data.Value.AplicaInformeAsBuilt;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoInformeAsBuilt&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataInformeAsBuilt _Calculo)
        {

            if (!string.IsNullOrEmpty(_Calculo.Comentario))
            {


                comentarioSeleccionado = _Calculo.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataInformesAsBuilt.Count == 0)
                        {
                            data.Value.DataInformesAsBuilt.Add(new DataInformeAsBuilt()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoInformeAsBuilt&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalInformeAsBuilt(DataInformeAsBuilt informe = null, string seguimientoId = null)
        {
            if (informe != null)
            {
                _Informe = informe; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _Informe = new DataInformeAsBuilt();
            }

            var modal = _modal.ShowModal(typeof(AddEditInformeAsBuilt), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditInformeAsBuilt._informe), _Informe },
            { nameof(AddEditInformeAsBuilt.SeguimientoId), seguimientoId },
            { nameof(AddEditInformeAsBuilt.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },  
  {
    "ID": 61,
    "ServicesName": "HitoMemRadioelectrico",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoMemRadioelectrico",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/MemRadio{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.Radioelectrico.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals

    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoRadioelectricoMemoriaRadioelectrico*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoMemoriaRadioelectrico)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Memoria radioel&eacute;ctrico&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-3 gap-4&quot;&gt;

            @* &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalMemoria(null,id);}'&gt;A&ntilde;adir memoria radioel&eacute;ctrico&lt;/button&gt; *@

            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoMemoriaRadioelectricoAddRadioelectrico)&quot;&gt;
        
            &lt;a href=&quot;@($&quot;/radioelectrico/?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir radioel&eacute;ctrico&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoMemoriaRadioelectricoAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaMemoriaRadioelectrico
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.SolicitudRadio?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                        @* 	&lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt; *@

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var MemRadioelectrico in data.Value.SolicitudRadio.Where(x =&gt; x.TipoTrabajo == &quot;Proyecto Radioel&eacute;ctrico&quot;))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(MemRadioelectrico)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectRadio(MemRadioelectrico)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                    &lt;/div&gt;

                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(MemRadioelectrico.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;
                            
                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@MemRadioelectrico.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (MemRadioelectrico.IngenieroAsignado != null)
                                    {
                                        @($&quot;{MemRadioelectrico.IngenieroAsignado.Name} {MemRadioelectrico.IngenieroAsignado.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(MemRadioelectrico.IngenieroteExt))
                                    {
                                        @MemRadioelectrico.IngenieroteExt
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (MemRadioelectrico.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (MemRadioelectrico.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (MemRadioelectrico.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                        @* 		&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(MemRadioelectrico.FacturaVisado?.ToString())&lt;/td&gt; *@
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @* @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                } *@

                @if (radioSeleccionado != null &amp;&amp; radioSeleccionado.Comentarios?.Any() == true)
                {
                    &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                        &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                        @foreach (var v in radioSeleccionado.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;
                                    @v.Name
                                &lt;/div&gt;
                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }



    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataMemoriaRadioelectrico Memoria { get; set; } = new DataMemoriaRadioelectrico();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedMem { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        //Parametros para la bidireccionalidad con radio

        List&lt;E_Proyecto&gt; Proyectos = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_Trabajo&gt; SolicitudRadio { get; set; }

        private E_Trabajo radioSeleccionado;

        public E_User usuarios { get; set; }

        List&lt;E_Tecnologias&gt; Tecnologias { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaMemoriaRadioelectrico = !data.Value.AplicaMemoriaRadioelectrico;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaMemoriaRadioelectrico = !data.Value.AplicaMemoriaRadioelectrico;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedMem.InvokeAsync(data.Value.AplicaMemoriaRadioelectrico);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaMemoriaRadioelectrico = !data.Value.AplicaMemoriaRadioelectrico;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoMemRadioelectrico&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }


        // M&eacute;todo para seleccionar el plano
        void SelectRadio(E_Trabajo radio)
        {
            radioSeleccionado = radio;
        }


        protected override async Task OnInitializedAsync()
        {
            try
            {
                Proyectos = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                        // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                        var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                        if (!string.IsNullOrEmpty(token))
                        {
                            // Leer las propiedades del token JWT usando UserService
                            if (_user.CheckTokenIsValid(token))
                            {
                                _user.ReadJWTProperties(token);
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoMemRadioelectrico&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataMemoriaRadioelectrico _Mem)
        {

            if (!string.IsNullOrEmpty(_Mem.Comentario))
            {


                comentarioSeleccionado = _Mem.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudRadio != null)
                        {
                            SolicitudRadio = data.Value.SolicitudRadio;
                        }

                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoMemRadioelectrico&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        //Modal AddEdit
        bool IsSaved = false;

        E_Trabajo AddEditTrabajo = new()
            {
                Comentarios = new(),
                FechaObjetivo = DateTime.Now
            };

        void OpenModalAddEdit(E_Trabajo edit = null)
        {
            if (edit != null)
            {
                AddEditTrabajo = edit;
            }
            else
            {
                AddEditTrabajo = new()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now
                    };
            }

            var modal = _modal.ShowModal(typeof(AddEditTrabajoModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditTrabajoModal.AddTrabajo), AddEditTrabajo},
                {nameof(AddEditTrabajoModal.Saved),IsSaved},
                {nameof(AddEditTrabajoModal.IdSeguimiento),IdSeguimiento},
                {nameof(AddEditTrabajoModal.Proyectos),Proyectos},
                {nameof(AddEditTrabajoModal.Tecnologias),Tecnologias},
            }, FixedWidth: 80);

            modal.OnCloseModal += ResponseModalAddEdit;
        }

        async void ResponseModalAddEdit(bool success)
        {
            AddEditTrabajo = new E_Trabajo()
                {
                    Comentarios = new(),
                    FechaObjetivo = DateTime.Now
                };
            IsSaved = false;
            IdSeguimiento = &quot;&quot;;

            if (success)
            {
                await LoadApi();
            }

            await _localStorage.RemoveItemAsync(&quot;radioelectricoadd&quot;);
            await InvokeAsync(StateHasChanged);
        }


        // Modal AddEditActa

        // public E_Seguimiento addeditModal = new E_Seguimiento();
        // public bool IsSaved = false;

        // void OpenModalMemoria(DataMemoriaRadioelectrico memoria = null, string seguimientoId = null)
        // {
        // 	if (memoria != null)
        // 	{
        // 		Memoria = memoria; // Usar el acta existente para editar
        // 	}
        // 	else
        // 	{
        // 		// Crear un nuevo acta vac&iacute;o si no se pasa uno
        // 		Memoria = new DataMemoriaRadioelectrico();
        // 	}

        // 	var modal = _modal.ShowModal(typeof(AddEditMemoria), new Dictionary&lt;string, object&gt;
        // {
        // 	{ nameof(AddEditMemoria._Memoria), Memoria },
        // 	{ nameof(AddEditMemoria.SeguimientoId), seguimientoId },
        // 	{ nameof(AddEditMemoria.Saved), IsSaved }
        // }, FixedWidth: 80);

        // 	modal.OnCloseModal += CloseModalActa;
        // }


        // async void CloseModalActa(bool reload)
        // {
        // 	addeditModal = new E_Seguimiento();

        // 	if (reload)
        // 	{
        // 		await LoadApi();
        // 	}

        // 	await Task.Delay(100);

        // 	await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

        // 	await InvokeAsync(StateHasChanged);
        // }
    }
    `
  },
  {
    "ID": 62,
    "ServicesName": "HitoPlanoAsbuilt",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPlanoAsbuilt",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/PlanoAsbuilt{id}&quot;
    @using DelineacionLogic
    @using LPSGrupo.Components.Areas.MovilF.Delineacion.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltPlanoAsbuilt*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPlanoAsbuilt)&quot;&gt;&lt;/AuthorizePage&gt;
    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;AsBuilt&quot;) == true || data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Plano Asbuilt&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3 gap-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPlanoAsbuiltAddPlanoAsBuilt)&quot;&gt;
        
            &lt;a href=&quot;@($&quot;delineacion?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir plano ASBuilt&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPlanoAsbuiltAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaPlanoASBuilt
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
                &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.SolicitudPlanos?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var PlanoASBuilt in data.Value.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo == &quot;AsBuilt&quot;))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(PlanoASBuilt)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectPlano(PlanoASBuilt)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;

                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(PlanoASBuilt.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;
                                
                                @* &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@PlanoASBuilt.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(PlanoASBuilt.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PlanoASBuilt.DelineanteAsignado != null)
                                    {
                                        @($&quot;{PlanoASBuilt.DelineanteAsignado.Name} {PlanoASBuilt.DelineanteAsignado.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(PlanoASBuilt.DelineanteExt))
                                    {
                                        @PlanoASBuilt.DelineanteExt
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoASBuilt.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoASBuilt.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (PlanoASBuilt.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoASBuilt.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PlanoASBuilt.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PlanoASBuilt.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoASBuilt.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;


                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;

                                    @if (PlanoASBuilt.TecnicoDelineantePLano?.Name != null)
                                    {
                                        &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;@PlanoASBuilt.TecnicoDelineantePLano?.Name @PlanoASBuilt.TecnicoDelineantePLano?.LastName&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;NA&lt;/span&gt;
                                    }

                                &lt;/td&gt; *@
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;


                @if (planoSeleccionado != null &amp;&amp; planoSeleccionado.Comentarios?.Any() == true)
                {
                    &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                        &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                        @foreach (var v in planoSeleccionado.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;
                                    @v.Name
                                &lt;/div&gt;
                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                }
            &lt;/div&gt;
        }

    }
    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPlanoASBuilt _AsBuilt { get; set; } = new DataPlanoASBuilt();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedAsBuilt { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        //Parametros para la bidireccionalidad con delineaci&oacute;n

        List&lt;E_Proyecto&gt; PaginatedProyecto = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_SolicitudDelineacion&gt; SolicitudDelineacion { get; set; }

        private E_SolicitudDelineacion planoSeleccionado;

        public E_User usuarios { get; set; }



        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPlanoASBuilt = !data.Value.AplicaPlanoASBuilt;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaPlanoASBuilt = !data.Value.AplicaPlanoASBuilt;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedAsBuilt.InvokeAsync(data.Value.AplicaPlanoASBuilt);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaPlanoASBuilt = !data.Value.AplicaPlanoASBuilt;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoAsbuilt&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar el plano
        void SelectPlano(E_SolicitudDelineacion plano)
        {
            planoSeleccionado = plano;
        }


        protected override async Task OnInitializedAsync()
        {
            try
            {
                PaginatedProyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                        // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                        var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                        if (!string.IsNullOrEmpty(token))
                        {
                            // Leer las propiedades del token JWT usando UserService
                            if (_user.CheckTokenIsValid(token))
                            {
                                _user.ReadJWTProperties(token);
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoAsbuilt&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataPlanoASBuilt _asBuilt)
        {

            if (!string.IsNullOrEmpty(_asBuilt.Comentario))
            {


                comentarioSeleccionado = _asBuilt.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudPlanos != null)
                        {
                            SolicitudDelineacion = data.Value.SolicitudPlanos;
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoAsbuilt&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        void OpenModalAddEdit(DelineacionLogic.E_SolicitudDelineacion edit = null)
        {
            if (edit != null)
            {
                if (edit.DelineanteAsignado == null)
                {
                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }
                }
                else
                {
                    if ((string.IsNullOrEmpty(edit.DelineanteAsignado.Name)) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }

                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;) &amp;&amp; _user.email.ToLower() != edit.DelineanteAsignado.Name &amp;&amp;
                    _user.email.ToLower() != edit.DelineanteAsignado.Email)
                    {
                        return;
                    }
                }
            }

            var modal = _modal.ShowModal(typeof(AddEditSolicitudModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditSolicitudModal.AddEditSolicitud), edit},
                {nameof(AddEditSolicitudModal.IdSeguimiento), IdSeguimiento},
                {nameof(AddEditSolicitudModal.PaginatedProyecto), PaginatedProyecto},

            }, FixedWidth: 80);

            modal.OnCloseModal += async (b) =&gt;
            {
                await ResponseModalAddEdit(b);
            };
        }

        async Task ResponseModalAddEdit(bool success)
        {
            IdSeguimiento = &quot;&quot;;

            await LoadApi();
        }
    }
    `
  },
  {
    "ID": 63,
    "ServicesName": "HitoPlanoCosntructivo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPlanoCosntructivo",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/planoConstructivo{id}&quot;
    @using DelineacionLogic
    @using LPSGrupo.Components.Areas.MovilF.Delineacion.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoPlanoConstructivo*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoPlanoConstructivo)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Plano constructivo&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3 gap-4&quot;&gt;

            @* &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalPlanoCons(null,id);}'&gt;A&ntilde;adir plano&lt;/button&gt; *@
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoPlanoConstructivoAddPlanoConstructivo)&quot;&gt;
            
            &lt;a href=&quot;@($&quot;delineacion?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir plano constructivo&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoPlanoConstructivoAplica)&quot;&gt;
            
            &lt;Checkbox Checked=data.Value.AplicaPlanoConstructivo
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.SolicitudPlanos?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var PlanoConstructivo in data.Value.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo == &quot;Constructivo&quot;))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(PlanoConstructivo)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectPlano(PlanoConstructivo)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(PlanoConstructivo.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;




                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(PlanoConstructivo.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (PlanoConstructivo.DelineanteAsignado != null)
                                    {
                                        @($&quot;{PlanoConstructivo.DelineanteAsignado.Name} {PlanoConstructivo.DelineanteAsignado.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(PlanoConstructivo.DelineanteExt))
                                    {
                                        @PlanoConstructivo.DelineanteExt
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoConstructivo.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoConstructivo.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (PlanoConstructivo.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoConstructivo.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PlanoConstructivo.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PlanoConstructivo.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoConstructivo.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;


                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                @* 	@if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                } *@

                @if (planoSeleccionado != null &amp;&amp; planoSeleccionado.Comentarios?.Any() == true)
                {
                    &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                        &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                        @foreach (var v in planoSeleccionado.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;
                                    @v.Name
                                &lt;/div&gt;
                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                }
            &lt;/div&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPlanoConstructivo _PlanoCons { get; set; } = new DataPlanoConstructivo();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedPlanoCons { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        //Parametros para la bidireccionalidad con delineaci&oacute;n

        List&lt;E_Proyecto&gt; PaginatedProyecto = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_SolicitudDelineacion&gt; SolicitudDelineacion { get; set; }

        private E_SolicitudDelineacion planoSeleccionado;

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPlanoConstructivo = !data.Value.AplicaPlanoConstructivo;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaPlanoConstructivo = !data.Value.AplicaPlanoConstructivo;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedPlanoCons.InvokeAsync(data.Value.AplicaPlanoConstructivo);
                }
            }
            catch (Exception e) 
            {
                data.Value.AplicaPlanoConstructivo = !data.Value.AplicaPlanoConstructivo;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoCosntructivo&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar el plano
        void SelectPlano(E_SolicitudDelineacion plano)
        {
            planoSeleccionado = plano;
        }


        protected override async Task OnInitializedAsync()
        {
            try
            {
                PaginatedProyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                        // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                        var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                        if (!string.IsNullOrEmpty(token))
                        {
                            // Leer las propiedades del token JWT usando UserService
                            if (_user.CheckTokenIsValid(token))
                            {
                                _user.ReadJWTProperties(token);
                            }
                        }
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoCosntructivo&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }

            
        }



        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                    _main.IsLoading = true;


                            data = await _mongoContext.GetOneSeguimientoMovil(id);

                            if (data?.Value?.SolicitudPlanos != null)
                            {
                                SolicitudDelineacion = data.Value.SolicitudPlanos;
                            }

                            await InvokeAsync(StateHasChanged);
                            _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoCosntructivo&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        void OpenModalAddEdit(DelineacionLogic.E_SolicitudDelineacion edit = null)
        {
            if (edit != null)
            {
                if (edit.DelineanteAsignado == null)
                {
                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }
                }
                else
                {
                    if ((string.IsNullOrEmpty(edit.DelineanteAsignado.Name)) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }

                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;) &amp;&amp; _user.email.ToLower() != edit.DelineanteAsignado.Name &amp;&amp;
                    _user.email.ToLower() != edit.DelineanteAsignado.Email)
                    {
                        return;
                    }
                }
            }

            var modal = _modal.ShowModal(typeof(AddEditSolicitudModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditSolicitudModal.AddEditSolicitud), edit},
                {nameof(AddEditSolicitudModal.IdSeguimiento), IdSeguimiento},
                {nameof(AddEditSolicitudModal.PaginatedProyecto), PaginatedProyecto},

            }, FixedWidth: 80);

            modal.OnCloseModal += async (b) =&gt;
            {
                await ResponseModalAddEdit(b);
            };
        }

        async Task ResponseModalAddEdit(bool success)
        {
            IdSeguimiento = &quot;&quot;;

            await LoadApi();
        }
        // Modal AddEditActa

        // public E_Seguimiento addeditModal = new E_Seguimiento();
        // public bool IsSaved = false;

        // void OpenModalPlanoCons(DataPlanoConstructivo acta = null, string seguimientoId = null)
        // {
        // 	if (acta != null)
        // 	{
        // 		_PlanoCons = acta; // Usar el acta existente para editar
        // 	}
        // 	else
        // 	{
        // 		// Crear un nuevo acta vac&iacute;o si no se pasa uno
        // 		_PlanoCons = new DataPlanoConstructivo();
        // 	}

        // 	var modal = _modal.ShowModal(typeof(AddEditPlanoConstructivo), new Dictionary&lt;string, object&gt;
        // {
        // 	{ nameof(AddEditPlanoConstructivo._PlanoCons), _PlanoCons },
        // 	{ nameof(AddEditPlanoConstructivo.SeguimientoId), seguimientoId },
        // 	{ nameof(AddEditPlanoConstructivo.Saved), IsSaved }
        // }, FixedWidth: 80);

        // 	modal.OnCloseModal += CloseModalActa;
            // }


        // async void CloseModalActa(bool reload)
        // {
        // 	addeditModal = new E_Seguimiento();

        // 	if (reload)
        // 	{
        // 		await LoadApi();
        // 	}

        // 	await Task.Delay(100);

        // 	await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

        // 	await InvokeAsync(StateHasChanged);
            // }
    }
    `
  },
  {
    "ID": 64,
    "ServicesName": "HitoPlanoM2CAP",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPlanoM2CAP",
    "ServicesDescription":`
    `,
    "Code": `
    @page "/PlanoM2CAP{id}"
    @using DelineacionLogic
    @using LPSGrupo.Components.Areas.MovilF.Delineacion.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*<AuthorizePage Roles="@(new(){"SeguimientoMovil.Supervisor"})" />
    MovilProyectosVerProyectoPlanoM2*@
    <AuthorizePage Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoPlanoM2)"></AuthorizePage>

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains("Plano M2 CAP") == true)
    {

        <div class="rounded-md shadow-custom mt-5">
            <div class="text-container">
                <h1 class="w-full text-3xl font-bold text-center text-blue-400">Plano M2 CAP</h1>
            </div>
        </div>

        <div class="flex mt-3 gap-4">
            <AuthorizedContent Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoPlanoM2AddPlanoM2CAP)">
            
            <a href="@($"delineacion?idseguimiento={data.Value.CodigoLPS}")" target="_blank"
            class="w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3">Añadir plano M2 CAP</a>
            </AuthorizedContent>
            <AuthorizedContent Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoPlanoM2Aplica)">
            
            <Checkbox Checked=data.Value.AplicaPlanoM2CAP
                    ChangeCheck="async () => await ToggleAplica()"
                    Message="Aplica">
            </Checkbox>
            </AuthorizedContent>
        </div>
        @if (data.Value.SolicitudPlanos?.Count > 0)
        {
            <div class="overflow-x-auto mt-3">
                <table class="min-w-full border-collapse border border-gray-300">
                    <thead>
                        <tr class="bg-slate-100">
                            <th class="p-2 border">Acciones</th>
                            <th class="p-2 border">Fecha de creación</th>
                            @* <th class="p-2 border">Cantidad a facturar</th> *@
                            <th class="p-2 border">Fecha de planificación</th>
                            <th class="p-2 border">Delineante</th>
                            <th class="p-2 border">Fecha de entrega</th>
                            <th class="p-2 border">Fecha de aprobación</th>
                            <th class="p-2 border">Fecha de rechazo</th>
                            <th class="p-2 border">Facturable</th>
                            <th class="p-2 border">Subida de documentación</th>
                            <th class="p-2 border">Fecha de subida de documentación</th>
                        @* 	<th class="p-2 border">Delineante</th> *@

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var planoM2CAP in data.Value.SolicitudPlanos.Where(x => x.TipoTrabajo == "M2/CAP"))
                        {
                            <tr>
                                <td class="border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400">
                                    <div class="flex space-x-2">
                                        <button class="p-1 rounded bg-blue-400 text-white" @onclick='()=> OpenModalAddEdit(planoM2CAP)'>
                                            <span class="material-symbols-outlined">
                                                edit
                                            </span>
                                        </button>

                                        <button class="p-1 rounded bg-blue-400 text-white" @onclick="() => SelectPlano(planoM2CAP)">
                                            <span class="material-symbols-outlined">
                                                comment
                                            </span>
                                        </button>
                                    </div>
                                </td>
                                <td class="border border-gray-300 px-4 py-2 text-center">@((planoM2CAP.CreatedOn.ToString("dd/MM/yyyy HH:mm:ss")).ToString())</td>
                                
                                @* <td class="border border-gray-300 px-4 py-2 text-center">@((planoM2CAP.CantidadAFacturar.ToString("F2") ?? "NA").ToString())</td> *@
                                <td class="border border-gray-300 px-4 py-2 text-center">@(planoM2CAP.FechaPlanificacion?.ToString("dd/MM/yyyy").ToString())</td>
                                <td class="border border-gray-300 px-4 py-2 text-center">
                                    @if (planoM2CAP.DelineanteAsignado != null)
                                    {
                                        @($"{planoM2CAP.DelineanteAsignado.Name} {planoM2CAP.DelineanteAsignado.LastName}")
                                    }
                                    else if (!string.IsNullOrWhiteSpace(planoM2CAP.DelineanteExt))
                                    {
                                        @planoM2CAP.DelineanteExt
                                    }
                                    else
                                    {
                                        <span class="text-black-300">No asignado</span>
                                    }
                                </td>
                                <td class="border border-gray-300 px-4 py-2 text-center">@(planoM2CAP.FechaHito?.ToString("dd/MM/yyyy").ToString())</td>
                                <td class="border border-gray-300 px-4 py-2 text-center">@(planoM2CAP.FechaAprobacion?.ToString("dd/MM/yyyy").ToString())</td>
                                @if (planoM2CAP.FechaAprobacion == null)
                                {
                                    <td class="border border-gray-300 px-4 py-2 text-center">@(planoM2CAP.FechaRechazo?.ToString("dd/MM/yyyy").ToString())</td>
                                }
                                else
                                {
                                    <td class="border border-gray-300 px-4 py-2 text-center">NA</td>

                                }

                                <td class="border border-gray-300 px-4 py-2 text-center">
                                    @if (planoM2CAP.Facturable)
                                    {
                                        <span class="text-green-600 font-bold">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="text-red-600 font-bold">No</span>
                                    }
                                </td>

                                <td class="border border-gray-300 px-4 py-2 text-center">
                                    @if (planoM2CAP.SubirDocs)
                                    {
                                        <span class="text-green-600 font-bold">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="text-red-600 font-bold">No</span>
                                    }
                                </td>
                                <td class="border border-gray-300 px-4 py-2 text-center">@(planoM2CAP.FechaSubidaDocs?.ToString("dd/MM/yyyy").ToString())</td>

                            

                            </tr>
                        }
                    </tbody>
                </table>


                @if (planoSeleccionado != null && planoSeleccionado.Comentarios?.Any() == true)
                {
                    <div class="w-full p-2 flex flex-wrap gap-2">
                        <span class="w-full text-blue-400">Comentarios del plano seleccionado</span>

                        @foreach (var v in planoSeleccionado.Comentarios)
                        {
                            <div class="w-full flex flex-wrap gap-2">
                                <div class="w-fit text-sm flex flex-wrap items-center gap-3">
                                    <div class="h-[40px] aspect-square rounded-full" style="background-image: url(@(v.ProfilePic)); background-size: cover;">
                                    </div>
                                    @v.Name
                                </div>
                                <InputTextArea class="w-full border border-slate-300/50 rounded p-2" @bind-Value="v.Comentario" readonly></InputTextArea>
                            </div>
                        }
                    </div>
                }
            
            </div>
        }


    }



    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPlanoM2CAP planoM2CAP { get; set; } = new DataPlanoM2CAP();
        Result<E_Seguimiento> data = new();
        [Parameter] public EventCallback<bool> OnAplicaChangedM2CAP { get; set; }
        DataActaReplanteo actaSeleccionada = new();
        //Parametros para la bidireccionalidad con delineación

        List<E_Proyecto> PaginatedProyecto = null;

        string IdSeguimiento = "";

        [Parameter] public string id { get; set; }

        [Parameter] public List<E_SolicitudDelineacion> SolicitudDelineacion { get; set; }

        private E_SolicitudDelineacion planoSeleccionado;

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPlanoM2CAP = !data.Value.AplicaPlanoM2CAP;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operación falla
                    data.Value.AplicaPlanoM2CAP = !data.Value.AplicaPlanoM2CAP;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedM2CAP.InvokeAsync(data.Value.AplicaPlanoM2CAP);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaPlanoM2CAP = !data.Value.AplicaPlanoM2CAP;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "HitoPlanoM2CAP", "ToggleAplica", DateTime.UtcNow);

            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // Método para seleccionar el plano
        void SelectPlano(E_SolicitudDelineacion plano)
        {
            planoSeleccionado = plano;
        }



        protected override async Task OnInitializedAsync()
        {
            try
            {
                    PaginatedProyecto = await _mongoContext.Data<E_Proyecto>(DatabaseIdentifiers.Movil).Find(x => true).ToListAsync();

                            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                            var token = await _localStorage.GetItemAsync<string>("authToken");

                            if (!string.IsNullOrEmpty(token))
                            {
                                // Leer las propiedades del token JWT usando UserService
                                if (_user.CheckTokenIsValid(token))
                                {
                                    _user.ReadJWTProperties(token);
                                }
                            }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "HitoPlanoM2CAP", "OnInitializedAsync", DateTime.UtcNow);

                throw;
            }
            
        }



        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudPlanos != null)
                        {
                            SolicitudDelineacion = data.Value.SolicitudPlanos;
                        }

                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "HitoPlanoM2CAP", "LoadApi", DateTime.UtcNow);

                throw;
            }
            
        }


        void OpenModalAddEdit(DelineacionLogic.E_SolicitudDelineacion edit = null)
        {
            if (edit != null)
            {
                if (edit.DelineanteAsignado == null)
                {
                    if (!_user.Roles.Contains("Delineacion.Ingeniero") && !_user.Roles.Contains("Delineacion.Supervisor") &&
                    !_user.Roles.Contains("Admin"))
                    {
                        return;
                    }
                }
                else
                {
                    if ((string.IsNullOrEmpty(edit.DelineanteAsignado.Name)) && !_user.Roles.Contains("Delineacion.Ingeniero") &&
                    !_user.Roles.Contains("Delineacion.Supervisor") &&
                    !_user.Roles.Contains("Admin"))
                    {
                        return;
                    }

                    if (!_user.Roles.Contains("Delineacion.Ingeniero") && !_user.Roles.Contains("Delineacion.Supervisor") &&
                    !_user.Roles.Contains("Admin") && _user.email.ToLower() != edit.DelineanteAsignado.Name &&
                    _user.email.ToLower() != edit.DelineanteAsignado.Email)
                    {
                        return;
                    }
                }
            }

            var modal = _modal.ShowModal(typeof(AddEditSolicitudModal), new Dictionary<string, object>
            {
                {nameof(AddEditSolicitudModal.AddEditSolicitud), edit},
                {nameof(AddEditSolicitudModal.IdSeguimiento), IdSeguimiento},
                {nameof(AddEditSolicitudModal.PaginatedProyecto), PaginatedProyecto},

            }, FixedWidth: 80);

            modal.OnCloseModal += async (b) =>
            {
                await ResponseModalAddEdit(b);
            };
        }

        async Task ResponseModalAddEdit(bool success)
        {
            IdSeguimiento = "";

            await LoadApi();
        }
    }

    `
  },  
  {
    "ID": 65,
    "ServicesName": "HitoPlanoPLL",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPlanoPLL",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/PlanoPLL{id}&quot;
    @using DelineacionLogic
    @using LPSGrupo.Components.Areas.MovilF.Delineacion.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPlanoPLL)&quot;&gt;&lt;/AuthorizePage&gt;

    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoRadioelectricoPlanoPLL*@
    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
    {

    &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
        &lt;div class=&quot;text-container&quot;&gt;
            &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Plano PLL&lt;/h1&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;flex mt-3 gap-4&quot;&gt;

            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPlanoPLLAddPlanoPLL)&quot;&gt;
        
        &lt;a href=&quot;@($&quot;delineacion?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
        class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir plano PLL&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPlanoPLLAplica)&quot;&gt;
        
                &lt;Checkbox Checked=data.Value.AplicaPlanoPLL
                        ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                        Message=&quot;Aplica&quot;&gt;
                &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
    &lt;/div&gt;
    @if ((data.Value.SolicitudPlanos?.Count ?? 0) &gt;= 0)
    {

        &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
            &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                &lt;thead&gt;
                    &lt;tr class=&quot;bg-slate-100&quot;&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                        @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var PlanoPLL in data.Value.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo == &quot;Radioel&eacute;ctrico&quot;))
                    {
                        &lt;tr&gt;
                            &lt;td class=&quot;border border-gray-300 px-4&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(PlanoPLL)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;


                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectPlano(PlanoPLL)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                &lt;/div&gt;

                            &lt;/td&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoPLL.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)).ToString())&lt;/td&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                @if (PlanoPLL.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            @* &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoPLL.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoPLL.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                @if (PlanoPLL.DelineanteAsignado != null)
                                {
                                    @($&quot;{PlanoPLL.DelineanteAsignado.Name} {PlanoPLL.DelineanteAsignado.LastName}&quot;)
                                }
                                else if (!string.IsNullOrWhiteSpace(PlanoPLL.DelineanteExt))
                                {
                                    @PlanoPLL.DelineanteExt
                                }
                                else
                                {
                                    &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoPLL.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;)&lt;/td&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoPLL.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                            @if (PlanoPLL.FechaAprobacion == null)
                            {
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PlanoPLL.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                            }
                            else
                            {
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                            }

                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                @if (PlanoPLL.SubirDocs)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;

                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                @if (PlanoPLL.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoPLL.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;



                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;

                                    @if (PlanoPLL.TecnicoDelineantePLano != null)
                                    {
                                        &lt;span class=&quot;px-4 py-2&quot;&gt;@($&quot;{PlanoPLL.TecnicoDelineantePLano.Name} {PlanoPLL.TecnicoDelineantePLano.LastName}&quot;)&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;px-4 py-2&quot;&gt;NA&lt;/span&gt;
                                    }

                                &lt;/td&gt; *@

                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (planoSeleccionado != null &amp;&amp; planoSeleccionado.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                    @foreach (var v in planoSeleccionado.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }

        &lt;/div&gt;
    }


    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPlanoPLL PlanoPLL { get; set; } = new DataPlanoPLL();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedPlanoPLL { get; set; }
        DataActaReplanteo actaSeleccionada = new();
        //Parametros para la bidireccionalidad con delineaci&oacute;n

        List&lt;E_Proyecto&gt; PaginatedProyecto = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_SolicitudDelineacion&gt; SolicitudDelineacion { get; set; }

        private E_SolicitudDelineacion planoSeleccionado;

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPlanoPLL = !data.Value.AplicaPlanoPLL;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaPlanoPLL = !data.Value.AplicaPlanoPLL;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedPlanoPLL.InvokeAsync(data.Value.AplicaPlanoPLL);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaPlanoPLL = !data.Value.AplicaPlanoPLL;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoPLL&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar el plano
        void SelectPlano(E_SolicitudDelineacion plano)
        {
            planoSeleccionado = plano;
        }



        protected override async Task OnInitializedAsync()
        {
            try
            {
                PaginatedProyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                    // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                    var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                    if (!string.IsNullOrEmpty(token))
                    {
                        // Leer las propiedades del token JWT usando UserService
                        if (_user.CheckTokenIsValid(token))
                        {
                            _user.ReadJWTProperties(token);
                        }
                    }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoPLL&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }
        
        }



        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudPlanos != null)
                        {
                            SolicitudDelineacion = data.Value.SolicitudPlanos;
                        }

                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPlanoPLL&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa
        void OpenModalAddEdit(DelineacionLogic.E_SolicitudDelineacion edit = null)
        {
            if (edit != null)
            {
                if (edit.DelineanteAsignado == null)
                {
                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }
                }
                else
                {
                    if ((string.IsNullOrEmpty(edit.DelineanteAsignado.Name)) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;))
                    {
                        return;
                    }

                    if (!_user.Roles.Contains(&quot;Delineacion.Ingeniero&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Delineacion.Supervisor&quot;) &amp;&amp;
                    !_user.Roles.Contains(&quot;Admin&quot;) &amp;&amp; _user.email.ToLower() != edit.DelineanteAsignado.Name &amp;&amp;
                    _user.email.ToLower() != edit.DelineanteAsignado.Email)
                    {
                        return;
                    }
                }
            }

            var modal = _modal.ShowModal(typeof(AddEditSolicitudModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditSolicitudModal.AddEditSolicitud), edit},
                {nameof(AddEditSolicitudModal.IdSeguimiento), IdSeguimiento},
                {nameof(AddEditSolicitudModal.PaginatedProyecto), PaginatedProyecto},

            }, FixedWidth: 80);

            modal.OnCloseModal += async (b) =&gt;
            {
                await ResponseModalAddEdit(b);
            };
        }

        async Task ResponseModalAddEdit(bool success)
        {
            IdSeguimiento = &quot;&quot;;

            await LoadApi();
        }
    }
    `
  },
  {
    "ID": 66,
    "ServicesName": "HitoPPI",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPPI",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/PPI{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltPPI*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPPI)&quot;&gt;&lt;/AuthorizePage&gt;
    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;AsBuilt&quot;) == true || data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;PPI&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPPIAddPPI)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalPPI(null,id);}'&gt;A&ntilde;adir PPI&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPPIAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaPPI
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataPPIs?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var ppi in data.Value.DataPPIs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalPPI(ppi, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(ppi)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @ppi.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(ppi.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (ppi.Tecnico != null)
                                    {
                                        @($&quot;{ppi.Tecnico.Name} {ppi.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(ppi.TecnicoExternoNombre))
                                    {
                                        @ppi.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(ppi.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(ppi.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (ppi.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(ppi.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (ppi.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (ppi.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(ppi.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPPI _ppi { get; set; } = new DataPPI();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedPPI { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPPI = !data.Value.AplicaPPI;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaPPI = !data.Value.AplicaPPI;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedPPI.InvokeAsync(data.Value.AplicaPPI);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaPPI = !data.Value.AplicaPPI;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPPI&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataPPI _localActa)
        {

            if (!string.IsNullOrEmpty(_localActa.Comentario))
            {


                comentarioSeleccionado = _localActa.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataPPIs.Count == 0)
                        {
                            data.Value.DataPPIs.Add(new DataPPI()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPPI&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalPPI(DataPPI acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _ppi = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _ppi = new DataPPI();
            }

            var modal = _modal.ShowModal(typeof(AddEditPPI), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditPPI._ppi), _ppi },
            { nameof(AddEditPPI.SeguimientoId), seguimientoId },
            { nameof(AddEditPPI.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 67,
    "ServicesName": "HitoProyecto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoProyecto",
    "ServicesDescription":`
    `,
    "Code": `
    @page "/Proyecto{id}"
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*<AuthorizePage Roles="@(new(){"SeguimientoMovil.Supervisor"})" />
    MovilProyectosVerProyectoConstructivoProyectoTecnico*@
    <AuthorizePage Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoProyectoTecnico)"></AuthorizePage>

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains("Plano constructivo") == true)
    {
        <div class="rounded-md shadow-custom mt-5">
            <div class="text-container">
                <h1 class="w-full text-3xl font-bold text-center text-blue-400">Proyecto técnico</h1>
            </div>
        </div>

        <div class="flex mt-3">
            <AuthorizedContent Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoProyectoTecnicoAddProyectoTecnico)">
            
            <button class="p-2 bg-teal-500 text-white rounded mr-4" @onclick='()=>{IsSaved=false; OpenModalProyecto(null,id);}'>Añadir proyecto</button>
            </AuthorizedContent>
            <AuthorizedContent Permissions="@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoProyectoTecnicoAplica)">
            
            <Checkbox Checked=data.Value.AplicaProyecto
                    ChangeCheck="async () => await ToggleAplica()"
                    Message="Aplica">
            </Checkbox>
            </AuthorizedContent>
        </div>

        <div class="rounded-md overflow-x-auto mt-5">
            <table class="min-w-full border-collapse border border-gray-300">
                <thead>
                    <tr class="bg-slate-100">
                        <th class="p-2 border">Acciones</th>
                        <th class="p-2 border">Fecha de creación</th>
                        @* <th class="p-2 border">Cantidad a facturar</th> *@
                        <th class="p-2 border">Fecha de planificación</th>
                        <th class="p-2 border">Técnico</th>
                        <th class="p-2 border">Fecha de entrega</th>
                        <th class="p-2 border">Fecha de aprobación</th>
                        <th class="p-2 border">Fecha de rechazo</th>
                        <th class="p-2 border">Facturable</th>
                        <th class="p-2 border">Subida de documentación</th>
                        <th class="p-2 border">Fecha de subida de documentación</th>
                        <th class="p-2 border">Nº Visado</th>
                        <th class="p-2 border">Fecha visado</th>
                        <th class="p-2 border">Factura visado</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var Proyecto in data.Value.DataProyectos.Where(x => x.FechaCreacionData > new DateTime(2018, 1, 1)))
                    {
                        <tr>
                            <td class="border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400">
                                <div class="flex space-x-2">
                                <button class="p-1 rounded bg-blue-400 text-white" @onclick='()=> OpenModalProyecto(Proyecto, id)'>
                                    <span class="material-symbols-outlined">
                                        edit
                                    </span>
                                </button>
                                    <button class="p-1 rounded bg-blue-400 text-white" @onclick="() => ShowComment(Proyecto)">
                                        <span class="material-symbols-outlined">
                                            comment
                                        </span>
                                    </button>
                                    </div>

                            </td>
                            <td class="border border-gray-300 px-4 py-2">@(Proyecto.FechaCreacionData.ToString("dd/MM/yyyy HH:mm:ss").ToString())</td>
                        
                            @* <td class="border border-gray-300 px-4 py-2 text-center">@Proyecto.CantidadAFacturar.ToString("F2")</td> *@
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FechaPlanificacion?.ToString("dd/MM/yyyy").ToString())</td>
                            <td class="border border-gray-300 px-4 py-2">
                                @if (Proyecto.Tecnico != null)
                                {
                                    @($"{Proyecto.Tecnico.Name} {Proyecto.Tecnico.LastName}")
                                }
                                else if (!string.IsNullOrWhiteSpace(Proyecto.TecnicoExternoNombre))
                                {
                                    @Proyecto.TecnicoExternoNombre
                                }
                                else
                                {
                                    <span class="text-black-300">No asignado</span>
                                }
                            </td>
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FechaHito?.ToString("dd/MM/yyyy").ToString())</td>
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FechaAprobacion?.ToString("dd/MM/yyyy").ToString())</td>
                            @if (Proyecto.FechaAprobacion == null)
                            {
                                <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FechaRechazo?.ToString("dd/MM/yyyy").ToString())</td>
                            }
                            else
                            {
                                <td class="border border-gray-300 px-4 py-2 text-center">NA</td>

                            }

                            <td class="border border-gray-300 px-4 py-2 text-center">
                                @if (Proyecto.Facturable)
                                {
                                    <span class="text-green-600 font-bold">Sí</span>
                                }
                                else
                                {
                                    <span class="text-red-600 font-bold">No</span>
                                }
                            </td>

                            <td class="border border-gray-300 px-4 py-2 text-center">
                                @if (Proyecto.SubirDocs)
                                {
                                    <span class="text-green-600 font-bold">Sí</span>
                                }
                                else
                                {
                                    <span class="text-red-600 font-bold">No</span>
                                }
                            </td>
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FechaSubidaDocs?.ToString("dd/MM/yyyy").ToString())</td>
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.NumVisado?.ToString())</td>
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FechaVisado?.ToString("dd/MM/yyyy").ToString())</td>
                            <td class="border border-gray-300 px-4 py-2 text-center">@(Proyecto.FacturaVisado?.ToString())</td>
                        </tr>
                        
                    }
                </tbody>
            </table>

            @if (!string.IsNullOrEmpty(comentarioSeleccionado))
            {
                <div class="mt-4 p-4 border border-gray-300 rounded">
                    <h3 class="text-lg font-semibold text-blue-400">Comentario:</h3>
                    <p>@(comentarioSeleccionado)</p>
                </div>
            }
        </div>
                
            
        
    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataProyecto _proyecto { get; set; } = new DataProyecto();
        Result<E_Seguimiento> data = new();
        [Parameter] public EventCallback<bool> OnAplicaChangedProyecto { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaProyecto = !data.Value.AplicaProyecto;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operación falla
                    data.Value.AplicaProyecto = !data.Value.AplicaProyecto;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedProyecto.InvokeAsync(data.Value.AplicaProyecto);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaProyecto = !data.Value.AplicaProyecto;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "HitoProyecto", "ToggleAplica", DateTime.UtcNow);

        
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync<string>("authToken");

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataProyecto proyecto)
        {

            if (!string.IsNullOrEmpty(proyecto.Comentario))
            {


                comentarioSeleccionado = proyecto.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                    _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataProyectos.Count == 0)
                        {
                            data.Value.DataProyectos.Add(new DataProyecto()); // Agregar acta vacío si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, "HitoProyecto", "LoadApi", DateTime.UtcNow);

                throw;
            }
        
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalProyecto(DataProyecto proyecto = null, string seguimientoId = null)
        {
            if (proyecto != null)
            {
                _proyecto = proyecto; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vacío si no se pasa uno
                _proyecto = new DataProyecto();
            }

            var modal = _modal.ShowModal(typeof(AddEditProyectoObras), new Dictionary<string, object>
        {
            { nameof(AddEditProyectoObras._Proyecto), _proyecto },
            { nameof(AddEditProyectoObras.SeguimientoId), seguimientoId },
            { nameof(AddEditProyectoObras.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync("incidenciaadd");

            await InvokeAsync(StateHasChanged);
        }
    }

    `
  },
  {
    "ID": 68,
    "ServicesName": "HitoPTP",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPTP",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/PTP{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltPTP*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPTP)&quot;&gt;&lt;/AuthorizePage&gt;
    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;AsBuilt&quot;) == true || data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;PTP&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPTPAddPTP)&quot;&gt;
        
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalPTP(null,id);}'&gt;A&ntilde;adir PTP&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltPTPAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaPTP
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
                &lt;/AuthorizedContent&gt;

        &lt;/div&gt;

        @if (data.Value.DataPTPs?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var acta in data.Value.DataPTPs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalPTP(acta, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(acta)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @acta.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Tecnico != null)
                                    {
                                        @($&quot;{acta.Tecnico.Name} {acta.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(acta.TecnicoExternoNombre))
                                    {
                                        @acta.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (acta.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(acta.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }



                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPTP _localActa { get; set; } = new DataPTP();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedPTP { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPTP = !data.Value.AplicaPTP;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaPTP = !data.Value.AplicaPTP;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedPTP.InvokeAsync(data.Value.AplicaPTP);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaPTP = !data.Value.AplicaPTP;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPTP&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

        
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataPTP _localActa)
        {

            if (!string.IsNullOrEmpty(_localActa.Comentario))
            {


                comentarioSeleccionado = _localActa.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataPTPs.Count == 0)
                        {
                            data.Value.DataPTPs.Add(new DataPTP()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPTP&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalPTP(DataPTP ptp = null, string seguimientoId = null)
        {
            if (ptp != null)
            {
                _localActa = ptp; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _localActa = new DataPTP();
            }

            var modal = _modal.ShowModal(typeof(AddEditPTP), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditPTP._ptp), _localActa },
            { nameof(AddEditPTP.SeguimientoId), seguimientoId },
            { nameof(AddEditPTP.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },  
  {
    "ID": 69,
    "ServicesName": "HitoPuestaServicio",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoPuestaServicio",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/PuestaServicio{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.Radioelectrico.Modals
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoRadioelectricoPuestaEnServicioMemoriaPSC*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPuestaEnServicioMemoriaPSC)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Memoria puesta en servicio&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex  mt-3 gap-4&quot;&gt;
            @* &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalPuesta(null,id);}'&gt;A&ntilde;adir puesta&lt;/button&gt; *@
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPuestaEnServicioMemoriaPSCAddPuestaServicio)&quot;&gt;
        
                &lt;a href=&quot;@($&quot;/radioelectrico/?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir puesta en servicio&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPuestaEnServicioMemoriaPSCAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaPuestaEnServicio
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        @if (data.Value.SolicitudRadio?.Count &gt; 0)
        {
            &lt;div class=&quot;overflow-x-auto mt-3&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                        @* 	&lt;th class=&quot;p-2 border&quot;&gt;N&ordm; Visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha visado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Factura visado&lt;/th&gt; *@


                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var PuestaServicio in data.Value.SolicitudRadio.Where(x =&gt; x.TipoTrabajo == &quot;PSC&quot;))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalAddEdit(PuestaServicio)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectRadio(PuestaServicio)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;

                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(PuestaServicio.CreatedOn.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;).ToString())&lt;/td&gt;
                                
                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PuestaServicio.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                    @if (PuestaServicio.IngenieroAsignado != null)
                                    {
                                        @($&quot;{PuestaServicio.IngenieroAsignado.Name} {PuestaServicio.IngenieroAsignado.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(PuestaServicio.IngenieroteExt))
                                    {
                                        @PuestaServicio.IngenieroteExt
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                @if (PuestaServicio.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                }

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PuestaServicio.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (PuestaServicio.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PuestaServicio.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.NumVisado?.ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;).ToString())&lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@(PuestaServicio.FacturaVisado?.ToString())&lt;/td&gt; *@
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;

                    @if (radioSeleccionado != null &amp;&amp; radioSeleccionado.Comentarios?.Any() == true)
                {
                    &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                        &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentarios del plano seleccionado&lt;/span&gt;

                        @foreach (var v in radioSeleccionado.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                    &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                    &lt;/div&gt;
                                    @v.Name
                                &lt;/div&gt;
                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                }

                    @* 	@if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                } *@
            &lt;/div&gt;
        }


    }
    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataPuestaEnServicio _Puesta { get; set; } = new DataPuestaEnServicio();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedPuesta { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        //Parametros para la bidireccionalidad con radio

        List&lt;E_Proyecto&gt; Proyectos = null;

        string IdSeguimiento = &quot;&quot;;

        [Parameter] public string id { get; set; }

        [Parameter] public List&lt;E_Trabajo&gt; SolicitudRadio { get; set; }

        private E_Trabajo radioSeleccionado;

        public E_User usuarios { get; set; }

        List&lt;E_Tecnologias&gt; Tecnologias { get; set; }



        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaPuestaEnServicio = !data.Value.AplicaPuestaEnServicio;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaPuestaEnServicio = !data.Value.AplicaPuestaEnServicio;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedPuesta.InvokeAsync(data.Value.AplicaPuestaEnServicio);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaPuestaEnServicio = !data.Value.AplicaPuestaEnServicio;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPuestaServicio&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

                // M&eacute;todo para seleccionar el plano
        void SelectRadio(E_Trabajo radio)
        {
            radioSeleccionado = radio;
        }




        protected override async Task OnInitializedAsync()
        {
            try
            {
                Proyectos = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();
                        // Obtener el token almacenado (LocalStorage, Cookie, etc.)
                        var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

                        if (!string.IsNullOrEmpty(token))
                        {
                            // Leer las propiedades del token JWT usando UserService
                            if (_user.CheckTokenIsValid(token))
                            {
                                _user.ReadJWTProperties(token);
                            }
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPuestaServicio&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        // private string comentarioSeleccionado;

        // private void ShowComment(DataPuestaEnServicio _Puesta)
        // {

        // 	if (!string.IsNullOrEmpty(_Puesta.Comentario))
        // 	{


        // 		comentarioSeleccionado = _Puesta.Comentario;
        // 	}

        // }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.SolicitudRadio != null)
                        {
                            SolicitudRadio = data.Value.SolicitudRadio;
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoPuestaServicio&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }



        //Modal AddEdit
        bool IsSaved = false;

        E_Trabajo AddEditTrabajo = new()
            {
                Comentarios = new(),
                FechaObjetivo = DateTime.Now
            };

        void OpenModalAddEdit(E_Trabajo edit = null)
        {
            if (edit != null)
            {
                AddEditTrabajo = edit;
            }
            else
            {
                AddEditTrabajo = new()
                    {
                        Comentarios = new(),
                        FechaObjetivo = DateTime.Now
                    };
            }

            var modal = _modal.ShowModal(typeof(AddEditTrabajoModal), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditTrabajoModal.AddTrabajo), AddEditTrabajo},
                {nameof(AddEditTrabajoModal.Saved),IsSaved},
                {nameof(AddEditTrabajoModal.IdSeguimiento),IdSeguimiento},
                {nameof(AddEditTrabajoModal.Proyectos),Proyectos},
                {nameof(AddEditTrabajoModal.Tecnologias),Tecnologias},
            }, FixedWidth: 80);

            modal.OnCloseModal += ResponseModalAddEdit;
        }

        async void ResponseModalAddEdit(bool success)
        {
            AddEditTrabajo = new E_Trabajo()
                {
                    Comentarios = new(),
                    FechaObjetivo = DateTime.Now
                };
            IsSaved = false;
            IdSeguimiento = &quot;&quot;;

            if (success)
            {
                await LoadApi();
            }

            await _localStorage.RemoveItemAsync(&quot;radioelectricoadd&quot;);
            await InvokeAsync(StateHasChanged);
        }


        // Modal AddEditActa

        // public E_Seguimiento addeditModal = new E_Seguimiento();
        // public bool IsSaved = false;

        // void OpenModalPuesta(DataPuestaEnServicio puesta = null, string seguimientoId = null)
        // {
        // 	if (puesta != null)
        // 	{
        // 		_Puesta = puesta; // Usar el acta existente para editar
        // 	}
        // 	else
        // 	{
        // 		// Crear un nuevo acta vac&iacute;o si no se pasa uno
        // 		_Puesta = new DataPuestaEnServicio();
        // 	}

        // 	var modal = _modal.ShowModal(typeof(AddEditPuesta), new Dictionary&lt;string, object&gt;
        // {
        // 	{ nameof(AddEditPuesta._Puesta), _Puesta },
        // 	{ nameof(AddEditPuesta.SeguimientoId), seguimientoId },
        // 	{ nameof(AddEditPuesta.Saved), IsSaved }
        // }, FixedWidth: 80);

        // 	modal.OnCloseModal += CloseModalActa;
        // }


        // async void CloseModalActa(bool reload)
        // {
        // 	addeditModal = new E_Seguimiento();

        // 	if (reload)
        // 	{
        // 		await LoadApi();
        // 	}

        // 	await Task.Delay(100);

        // 	await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

        // 	await InvokeAsync(StateHasChanged);
        // }
    }
    `
  },
  {
    "ID": 70,
    "ServicesName": "HitoReplanteoLOS",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/HitoReplanteoLOS",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/ReplanteoLOS/{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoReplanteoLOSInformeLOS*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOS)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Acta Replanteo&quot;) == true)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Informe LOS&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-3&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOSInformeLOSAddInformeLOS)&quot;&gt;
            
            &lt;button class=&quot;p-2 bg-teal-500 text-white rounded mr-4&quot; @onclick='()=&gt;{IsSaved=false; OpenModalReplanteoLOS(null,id);}'&gt;A&ntilde;adir infome LOS&lt;/button&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOSInformeLOSAplica)&quot;&gt;
            
            &lt;Checkbox Checked=data.Value.AplicaReplanteoLOS
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        @if (data.Value.DataReplanteosLOS?.Count &gt; 0)
        {
            &lt;div class=&quot;rounded-md overflow-x-auto mt-5&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                            @* &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;

                    &lt;tbody&gt;
                        @foreach (var acta in data.Value.DataReplanteosLOS.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                        {
                            &lt;tr&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                    &lt;div class=&quot;flex space-x-2&quot;&gt;
                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalReplanteoLOS(acta, id)'&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; ShowComment(acta)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                comment
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;

                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @acta.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                &lt;/td&gt;

                                @* 	&lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((acta.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt; *@
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Tecnico != null)
                                    {
                                        @($&quot;{acta.Tecnico.Name} {acta.Tecnico.LastName}&quot;)
                                    }
                                    else if (!string.IsNullOrWhiteSpace(acta.TecnicoExternoNombre))
                                    {
                                        @acta.TecnicoExternoNombre
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;))
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                                @if (acta.FechaAprobacion == null)
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2text-center&quot;&gt;
                                        @(acta.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                    &lt;/td&gt;
                                }
                                else
                                {
                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                }
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.Facturable)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @if (acta.SubirDocs)
                                    {
                                        &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                    }
                                &lt;/td&gt;
                                &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                    @(acta.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;).ToString())
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }

                    &lt;/tbody&gt;

                &lt;/table&gt;

                @if (!string.IsNullOrEmpty(comentarioSeleccionado))
                {
                    &lt;div class=&quot;mt-4 p-4 border border-gray-300 rounded&quot;&gt;
                        &lt;h3 class=&quot;text-lg font-semibold text-blue-400&quot;&gt;Comentario:&lt;/h3&gt;
                        &lt;p&gt;@(comentarioSeleccionado)&lt;/p&gt;
                    &lt;/div&gt;
                }

            &lt;/div&gt;
        }
        else
        {
            &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
        }

    }

    @code {

        [Parameter] public string Hito { get; set; }
        [Parameter] public DataReplanteoLOS _InformeLOS { get; set; } = new DataReplanteoLOS();
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedReplanteoLOS { get; set; }
        DataActaReplanteo actaSeleccionada = new();

        [Parameter] public string id { get; set; }

        public E_User usuarios { get; set; }


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaReplanteoLOS = !data.Value.AplicaReplanteoLOS;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaReplanteoLOS = !data.Value.AplicaReplanteoLOS;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedReplanteoLOS.InvokeAsync(data.Value.AplicaReplanteoLOS);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaReplanteoLOS = !data.Value.AplicaReplanteoLOS;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoReplanteoLOS&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }




        protected override async Task OnInitializedAsync()
        {
            // Obtener el token almacenado (LocalStorage, Cookie, etc.)
            var token = await _localStorage.GetItemAsync&lt;string&gt;(&quot;authToken&quot;);

            if (!string.IsNullOrEmpty(token))
            {
                // Leer las propiedades del token JWT usando UserService
                if (_user.CheckTokenIsValid(token))
                {
                    _user.ReadJWTProperties(token);
                }
            }
        }

        private string comentarioSeleccionado;

        private void ShowComment(DataReplanteoLOS _localActa)
        {

            if (!string.IsNullOrEmpty(_localActa.Comentario))
            {


                comentarioSeleccionado = _localActa.Comentario;
            }

        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;


                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataReplanteosLOS.Count == 0)
                        {
                            data.Value.DataReplanteosLOS.Add(new DataReplanteoLOS()); // Agregar acta vac&iacute;o si no existen
                        }
                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoReplanteoLOS&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        // Modal AddEditActa

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalReplanteoLOS(DataReplanteoLOS acta = null, string seguimientoId = null)
        {
            if (acta != null)
            {
                _InformeLOS = acta; // Usar el acta existente para editar
            }
            else
            {
                // Crear un nuevo acta vac&iacute;o si no se pasa uno
                _InformeLOS = new DataReplanteoLOS();
            }

            var modal = _modal.ShowModal(typeof(AddEditReplanteoLOS), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddEditReplanteoLOS._localActa), _InformeLOS },
            { nameof(AddEditReplanteoLOS.SeguimientoId), seguimientoId },
            { nameof(AddEditReplanteoLOS.Saved), IsSaved }
        }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalActa;
        }


        async void CloseModalActa(bool reload)
        {
            addeditModal = new E_Seguimiento();

            if (reload)
            {
                await LoadApi();
            }

            await Task.Delay(100);

            await _localStorage.RemoveItemAsync(&quot;incidenciaadd&quot;);

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 71,
    "ServicesName": "Index",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Index",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/seguimientomovil&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectos)&quot;&gt;&lt;/AuthorizePage&gt;

    @*MovilProyectos*@
    &lt;div class=&quot;w-full h-fit p-6 gap-6&quot;&gt;
        &lt;!-- Encabezado con t&iacute;tulo y barra de b&uacute;squeda --&gt;
        &lt;div class=&quot;w-full p-2 flex justify-between items-center&quot;&gt;
            &lt;span class=&quot;text-blue-400 text-2xl font-bold&quot;&gt;Proyectos m&oacute;vil&lt;/span&gt;
            &lt;input type=&quot;search&quot; class=&quot;p-2 rounded border border-slate-300/50&quot; @bind-value=&quot;SetSearch&quot; placeholder=&quot;Buscar proyecto...&quot; /&gt;
        &lt;/div&gt;

        &lt;!-- Tabla de proyectos --&gt;
        &lt;div class=&quot;w-full h-fit mt-4 overflow-x-auto&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        @*&lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;*@
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Acciones&lt;/th&gt;
                        @*&lt;/AuthorizedContent&gt;*@
                        &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Nombre Proyecto&lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Cliente&lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;SubProyectos&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var v in proyectos.Where(x =&gt; !string.IsNullOrEmpty(x.nombre) &amp;&amp; x.nombre != &quot;NA&quot;)
                    .Where(ExcludeProjects)
                    .OrderBy(x =&gt; x.nombre).Where(x =&gt; string.IsNullOrEmpty(Search) ? true : x.nombre.ToLower().Contains(Search.ToLower())))
                    {
                        &lt;tr class=&quot;hover:bg-slate-50&quot;&gt;
                        
                                @*&lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;*@
                                &lt;td class=&quot;p-2 text-center border border-slate-300/50&quot;&gt;
                                    &lt;div class=&quot;flex space-x-3&quot;&gt;
                                        &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosEditar)&quot;&gt;
                
                                            &lt;span class=&quot;material-symbols-outlined text-blue-400 cursor-pointer&quot; @onclick=&quot;()=&gt; OpenModalHitos(v)&quot;&gt;
                                                edit
                                            &lt;/span&gt;
                                        &lt;/AuthorizedContent&gt;
                                        &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosAddObra)&quot;&gt;
                                        @*&lt;AuthorizedContent Roles=&quot;@([&quot;Admin&quot;])&quot; &gt;*@
                                            &lt;span class=&quot;material-symbols-outlined text-blue-400 cursor-pointer&quot; @onclick=&quot;()=&gt; OpenModalProyecto(v)&quot;&gt;
                                                upload
                                            &lt;/span&gt;
                                        &lt;/AuthorizedContent&gt;
                                    &lt;/div&gt;
                                &lt;/td&gt;
                            @* &lt;/AuthorizedContent&gt;*@
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyecto)&quot;&gt;
                
                                    &lt;a href=&quot;@($&quot;/seguimientomovil/{v.Id}&quot;)&quot; class=&quot;text-blue-400 font-bold hover:underline&quot;&gt;@v.nombre&lt;/a&gt;
                                &lt;/AuthorizedContent&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                &lt;span class=&quot;text-slate-700&quot;&gt;@v.cliente&lt;/span&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                &lt;span class=&quot;text-slate-700&quot;&gt;@string.Join(&quot;, &quot;, v.subproyectos)&lt;/span&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;
        &lt;/div&gt;
    &lt;/div&gt;


    @code {
        List&lt;E_Proyecto&gt; proyectos { get; set; } = new();

        protected override async Task OnInitializedAsync()
        {
            _main.BackgroundImage = &quot;&quot;;
            await LoadProyectos();
        }

        string Search { get; set; }

        public string SetSearch
        {
            get
            {
                return Search;
                InvokeAsync(StateHasChanged);
            }
            set
            {
                Search = value;
                InvokeAsync(StateHasChanged);
            }
        }

        public E_Proyecto proyectoModal = null;

        Func&lt;E_Proyecto, bool&gt; ExcludeProjects =&gt; (x =&gt; x.nombre != &quot;LPSESP1_1_AICT_LEG&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_AURE_LEG&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_ATE_OTI&quot; &amp;&amp; x.nombre != &quot;Proyecto_pruebas_desarrollo&quot; &amp;&amp;
        x.nombre != &quot;LPSESP1_1_BIGM_LEG&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_CENT_LICEN&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_FIDE_AUDITORIA&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_SORT_APAGADO&quot; &amp;&amp;
        x.nombre != &quot;LPSESP1_1_GTT_ING&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_CELL_BIM&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_CELL_DOC&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_TERAS_PRL&quot; &amp;&amp; x.nombre != &quot;LPSESP1_5_VODA_ANU2023&quot; &amp;&amp;
        x.nombre != &quot;LPSESP1_1_CELL_Fase 2&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_CELL_LEG&quot; &amp;&amp; x.nombre != &quot;LPSESP1_1_CELL_SITES.LEV&quot; &amp;&amp; x.nombre != &quot;LPSESP1_5_ZTE_ING&quot;);


        void OpenModalHitos(E_Proyecto proyecto)
        {
            proyectoModal = proyecto;
            var modal = _modal.ShowModal(typeof(ModifyViewProyecto), new Dictionary&lt;string, object&gt;
            {
                {nameof(ModifyViewProyecto.proyecto), proyectoModal}
            }, FixedWidth: 70);

            modal.OnCloseModal += CloseModalHitos;
        }

        void CloseModalHitos(bool success)
        {
            proyectoModal = null;
            InvokeAsync(StateHasChanged);
        }

        //

        void OpenModalProyecto(E_Proyecto proyecto)
        {
            proyectoModal = proyecto;
            var modal = _modal.ShowModal(typeof(AddEditProyecto), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddEditProyecto.Proyecto), proyectoModal}
            }, FixedWidth: 70);

            modal.OnCloseModal += CloseModalProyecto;
        }

        async void CloseModalProyecto(bool success)
        {
            proyectoModal = null;

            await LoadProyectos();
        }

        async Task LoadProyectos()
        {
            try
            {
            _main.IsLoading = true;

                    proyectos = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; true).ToListAsync();

                    await InvokeAsync(StateHasChanged);

                    _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;SeguimientoMovil &gt; Modals &gt; Index&quot;, &quot;LoadProyectos&quot;, DateTime.UtcNow);

                throw;
            }
        
        }
    }
    `
  },
  {
    "ID": 72,
    "ServicesName": "InfoHito",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/InfoHito",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/InfoHito{id}&quot;
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoInformacion)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data.Value != null)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Informaci&oacute;n&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2 mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoInformacionAddVisita)&quot;&gt;
                
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoInformacionAddTrabajoRadio)&quot;&gt;
            
            &lt;a href=&quot;@($&quot;radioelectrico?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir trabajo Radio&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;!-- Contenedor que agrupa tabla y comentarios --&gt;
        &lt;div class=&quot;w-full flex flex-col gap-5 mt-5&quot;&gt;

            &lt;!-- Tabla --&gt;
            &lt;div class=&quot;overflow-x-auto w-full&quot;&gt;
                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                        &lt;tr&gt;
                        @*  &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo LPS&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Ceco&lt;/th&gt; *@
                            &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo propietario&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo operador&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo seguimiento&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Estado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Nombre&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Zona&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Localidad&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Subproyecto&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Contrata&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Fecha asignaci&oacute;n del cliente&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;T&eacute;cnico cliente&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;N&ordm; de pedido&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Dinero a facturar&lt;/th&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Dinero facturado&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        &lt;tr class=&quot;hover:bg-slate-50&quot;&gt;
                            &lt;td class=&quot;border border-gray-300 px-4 py-2 hover:underline cursor-pointer text-blue-400&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoInformacionAddObra)&quot;&gt;
            
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick='()=&gt; OpenModalObra(data.Value)'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;
                                    &lt;/AuthorizedContent&gt;

                                &lt;/div&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Codigo1&lt;/td&gt;
                            @* &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Ceco&lt;/td&gt; *@
                            @* &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Codigo1&lt;/td&gt; *@
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Codigo2&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.CodigoOtros&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Estado.Last().Estado&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Nombre&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Municipio.Zona&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Municipio.Localidad&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Subproyecto&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.Contrata&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.FechaAsignacionCliente&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.TecnicoCliente&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.DataPedido.NumeroPedido&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.DataPedido.CantidadAFacturar&lt;/td&gt;
                            &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;@data.Value.DataPedido.DineroFacturado&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;

            &lt;!-- Comentarios (debajo de la tabla) --&gt;
            &lt;div class=&quot;w-full p-4 bg-white border border-slate-300/50 rounded-lg shadow&quot;&gt;
                &lt;div class=&quot;flex flex-col gap-3&quot;&gt;
                    &lt;!-- Bot&oacute;n para a&ntilde;adir comentario --&gt;
                    &lt;div class=&quot;text-blue-400 w-full flex items-center gap-3 mb-2&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;w-fit p-2 bg-blue-400 text-white shadow-md rounded&quot;
                                @onclick=&quot;@(() =&gt; data.Value.Comentarios.Add(new(){Name = $&quot;{_user.name} {_user.surname}&quot;, Comentario = &quot;&quot;, ProfilePic = _user.profilePic, Id = _user.id, Fecha = DateTime.Now}))&quot;&gt;
                            A&ntilde;adir comentario
                        &lt;/button&gt;
                    &lt;/div&gt;

                    &lt;!-- Lista de comentarios --&gt;
                    &lt;div class=&quot;flex flex-col gap-3 overflow-auto max-h-[30vh]&quot;&gt;
                        @foreach (var v in data.Value.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-col p-2 bg-white border rounded shadow&quot;&gt;
                                &lt;div class=&quot;flex items-center gap-2&quot;&gt;
                                    &lt;div class=&quot;h-10 w-10 rounded-full bg-cover bg-center&quot;
                                        style=&quot;background-image: url(@(v.ProfilePic));&quot;&gt;&lt;/div&gt;
                                    &lt;span&gt;@(v.Name)&lt;/span&gt;
                                    &lt;span&gt;|&lt;/span&gt;
                                    &lt;span&gt;
                                        @($&quot;{v.Fecha.ToRealLocalTime(_main.OffsetHoursTime).ToString(&quot;dd&quot;)} de {v.Fecha.ToRealLocalTime(_main.OffsetHoursTime).ToString(&quot;MMMM&quot;)} de {v.Fecha.ToRealLocalTime(_main.OffsetHoursTime).ToString(&quot;yyyy&quot;)}, {v.Fecha.ToRealLocalTime(_main.OffsetHoursTime).ToString(&quot;HH:mm:ss&quot;)}&quot;)
                                    &lt;/span&gt;
                                &lt;/div&gt;
                                &lt;textarea class=&quot;w-full p-2 border rounded mt-2&quot;
                                        @bind=&quot;v.Comentario&quot; readonly=&quot;@(v.Id != _user.id)&quot;&gt;
                                        &lt;/textarea&gt;

                                &lt;!-- Botones de acci&oacute;n --&gt;
                                @if (v.Id == _user.id)
                                {
                                    &lt;div class=&quot;mt-2 flex justify-end gap-2&quot;&gt;
                                        &lt;button type=&quot;button&quot; class=&quot;p-2 bg-green-500 text-white text-sm rounded&quot;
                                                @onclick=&quot;SaveComentarios&quot;&gt;
                                            Guardar
                                        &lt;/button&gt;
                                        &lt;button type=&quot;button&quot; class=&quot;p-2 bg-red-500 text-white text-sm rounded&quot;
                                                @onclick=&quot;() =&gt; data.Value.Comentarios.Remove(v)&quot;&gt;
                                            Eliminar
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                }
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    }




    @code {

        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        // Result&lt;PaginatedResult&lt;E_Seguimiento&gt;&gt; data2 = new();

        [Parameter] public string id { get; set; }

        private E_Proyecto proyectoDefault = new E_Proyecto { };

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task SaveComentarios()
        {
            _main.IsLoading = true;

            try
            {
                // Llama a tu m&eacute;todo EditSeguimientoMovil para reemplazar la entidad completa
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (response.IsSuccess)
                {
                    await LoadApi(); // Recarga los datos desde la API para actualizar la UI
                    Console.WriteLine(&quot;Comentarios guardados correctamente.&quot;);
                }
                else
                {
                    Console.WriteLine(&quot;Error al guardar los comentarios.&quot;);
                }
            }
            catch (Exception ex)
            {
                await _mongoContext.RegistroError(ex.Message, _user.name, _user.id, &quot;InfoHito&quot;, &quot;SaveComentarios&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                _main.IsLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }





        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.Comentarios == null)
                        {
                            data.Value.Comentarios = new List&lt;E_Comentarios&gt;();
                        }

                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;InfoHito&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        // Modal AddEditObra

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        public E_Proyecto proyectoAddObra = null;

        void OpenModalObra(E_Seguimiento edit = null)
        {
            if (edit != null)
            {
                addeditModal = edit; // Objeto seleccionado para editar
            }
            else
            {
                addeditModal = new E_Seguimiento
                    {
                        FechaAsignacionCliente = DateTime.Now // Valores predeterminados
                    };
            }

            var modal = _modal.ShowModal(typeof(AddObra), new Dictionary&lt;string, object&gt;
        {
            { nameof(AddObra.Proyecto), addeditModal.Proyecto ?? proyectoDefault }, // Asigna el proyecto
            { nameof(AddObra.AddEdit), addeditModal } // Asigna el objeto a editar
        }, FixedWidth: 80);

            modal.OnCloseModal += async (bool reload) =&gt;
            {
                if (reload)
                {
                    await LoadApi(); // Recarga datos despu&eacute;s de guardar
                }
                await InvokeAsync(StateHasChanged);
            };
        }
    }
    `
  },  
  {
    "ID": 73,
    "ServicesName": "NewEditObra",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/NewEditObra",
    "ServicesDescription":`
    `,
    "Code:":`
    @* @page &quot;/seguimientomovil/obra/{id}&quot; *@
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Helpers
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
    @using SeguimientoMovilLogic.Extra.DataSeguimiento

        &lt;div class=&quot;grid grid-cols-10 h-screen&quot;&gt;
        &lt;!-- Etiquetas flotantes --&gt;
        &lt;div class=&quot;fixed top-11 left-1/2 -translate-x-1/2 z-50 flex space-x-4 bg-transparent shadow-lg p-2 rounded-lg&quot; &gt;

            @if(data.Value != null)
            {
                foreach (var item in data.Value.Proyecto.HitosProyecto)
                {
                    if (item == &quot;Acceso Documentaci&oacute;n y Visita&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion1')&quot;&gt;
                            INF
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;Acta Replanteo&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion3')&quot;&gt;
                            ACR
                        &lt;/button&gt;

                    }
                    if (item == &quot;Plano M2 CAP&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion4')&quot;&gt;
                            PM2
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;CVE&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion6')&quot;&gt;
                            CVE
                        &lt;/button&gt;

                    }
                    if (item == &quot;C&aacute;lculo PLL&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion7')&quot;&gt;
                            CPLL
                        &lt;/button&gt;

                    }
                    if (item == &quot;Plano PLL&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion8')&quot;&gt;
                            PPLL
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;Memoria Radioel&eacute;ctrico&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion10')&quot;&gt;
                            MER
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;Fotomontaje&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion12')&quot;&gt;
                            FT
                        &lt;/button&gt;

                    }
                    if (item == &quot;Proyecto&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion13')&quot;&gt;
                            PR
                        &lt;/button&gt;

                    }
                    if (item == &quot;Plano constructivo&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion14')&quot;&gt;
                            PLC
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;Coordinaci&oacute;n&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion16')&quot;&gt;
                            COOR
                        &lt;/button&gt;

                    }
                    if (item == &quot;Legalizaci&oacute;n AYTO&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion17')&quot;&gt;
                            LAY
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;DF&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion19')&quot;&gt;
                            DF
                        &lt;/button&gt;

                    }
                    if (item == &quot;Puesta en servicio&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion20')&quot;&gt;
                            PS
                        &lt;/button&gt;

                    }
                    if (item == &quot;CFO&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion21')&quot;&gt;
                            CFO
                        &lt;/button&gt;

                    }
                
                    if (item == &quot;Plano ASBuilt&quot;)
                    {
                        &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                                onclick=&quot;scrollToAccordion('accordion23')&quot;&gt;
                            PAB
                        &lt;/button&gt;

                    }
                }

                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion2')&quot;&gt;
                        REP
                    &lt;/button&gt;

                }
                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion5')&quot;&gt;
                        EMF
                    &lt;/button&gt;

                }
                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion9')&quot;&gt;
                        MPS
                    &lt;/button&gt;

                }
                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion11')&quot;&gt;
                        ST
                    &lt;/button&gt;

                }

                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion15')&quot;&gt;
                        VCSS
                    &lt;/button&gt;

                }
                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion18')&quot;&gt;
                        VDF
                    &lt;/button&gt;

                }
                if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                {
                    &lt;button class=&quot;px-4 text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion22')&quot;&gt;
                        VAB
                    &lt;/button&gt;

                }

                &lt;button class=&quot;px-4  text-sm font-medium text-gray-700 bg-blue-100 hover:bg-blue-200 rounded flex items-end&quot;
                            onclick=&quot;scrollToAccordion('accordion24')&quot;&gt;
                        PED
                    &lt;/button&gt;





            }
            
            



        &lt;/div&gt;
        &lt;!-- Columna izquierda (30%) --&gt;
        &lt;div class=&quot;col-span-3 bg-blue-500&quot;&gt;
            &lt;h1 class=&quot;text-white text-center&quot;&gt;Columna Izquierda (30%)&lt;/h1&gt;
        &lt;/div&gt;


        &lt;!-- Columna derecha (70%) --&gt;
        &lt;div class=&quot;col-span-7 bg-white-300 p-4&quot;&gt;
            
            &lt;h1 class=&quot;text-blue-custom text-lg font-bold mb-6&quot;&gt;Detalles del Seguimiento&lt;/h1&gt;
        
        
            &lt;!-- Acordeones --&gt;
            &lt;div class=&quot;space-y-4&quot;&gt;
                &lt;!-- Acorde&oacute;n 1 --&gt;
                @if (data.Value != null &amp;&amp; data.Value.Proyecto.HitosProyecto.Contains(&quot;Acceso Documentaci&oacute;n y Visita&quot;))
                {
                
                    

                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion1')&quot;&gt;
                            Informaci&oacute;n
                        &lt;/button&gt;

                    

                        &lt;div id=&quot;accordion1&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir informaci&oacute;n
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;
                            
                                &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
                                class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir visita&lt;/a&gt;

                                &lt;a href=&quot;@($&quot;radioelectrico?idseguimiento={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
                                class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3&quot;&gt;A&ntilde;adir trabajo Radio&lt;/a&gt;
                            &lt;/div&gt;

                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm &quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr class=&quot;rounded-lg&quot;&gt;

                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo LPS&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Ceco&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo propietario&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo operador&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo seguimiento&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Nombre&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Localidad&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Subproyecto&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Contrata&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Fecha asignaci&oacute;n del cliente&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;T&eacute;cnico cliente&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;

                                        @if (data.Value != null)
                                        {
                                            
                                            &lt;tr class=&quot;hover:bg-slate-50 rounded-lg&quot;&gt;


                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-blue-600 hover:underline cursor-pointer&quot; @onclick=&quot;()=&gt; OpenModalInfo()&quot;&gt;@data.Value.CodigoLPS&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Ceco&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Codigo1&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Codigo2&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.CodigoOtros&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Nombre&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Municipio.Localidad&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Subproyecto&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.Contrata&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.FechaAsignacionCliente&lt;/span&gt;
                                                &lt;/td&gt;
                                                &lt;td class=&quot;p-3 border border-slate-300/50&quot;&gt;
                                                    &lt;span class=&quot;text-slate-700&quot;&gt;@data.Value.TecnicoCliente&lt;/span&gt;
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }


                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 2 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion2')&quot;&gt;
                            Visitas y acceso Replanteo
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion2&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir visita y acceso Replanteo
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                                
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var replanteo in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)))
                                        {
                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, replanteo.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(replanteo.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(replanteo.Estados.Last().Nombre)
                                                &lt;/td&gt;



                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 3 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Acta Replanteo&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion3')&quot;&gt;
                            Acta replanteo
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion3&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir acta replanteo
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataActaReplanteos?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;

                                        &lt;tbody&gt;
                                            @foreach (var acta in data.Value.DataActaReplanteos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @acta.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (acta.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@acta.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @((acta.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (acta.Tecnico != null)
                                                        {
                                                            @($&quot;{acta.Tecnico.Name} {acta.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(acta.TecnicoExternoNombre))
                                                        {
                                                            @acta.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-gray-500&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @(acta.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;)
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @((acta.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())
                                                    &lt;/td&gt;
                                                    @if (acta.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                            @((acta.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())
                                                        &lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;
                                                    }
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (acta.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @((acta.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())
                                                    &lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;

                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                            else
                            {
                                &lt;p class=&quot;text-gray-500&quot;&gt;No se encontraron datos del acta de replanteo.&lt;/p&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 4 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano M2 CAP&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion4')&quot;&gt;
                            Plano M2 CAP
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion4&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Plano M2 CAP
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataPlanoM2CAPs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var PlanoM2 in data.Value.DataPlanoM2CAPs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoM2.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoM2.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoM2.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoM2.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoM2.Tecnico != null)
                                                        {
                                                            @($&quot;{PlanoM2.Tecnico.Name} {PlanoM2.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(PlanoM2.TecnicoExternoNombre))
                                                        {
                                                            @PlanoM2.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoM2.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoM2.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;)&lt;/td&gt;
                                                    @if (PlanoM2.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@PlanoM2.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;)&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoM2.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoM2.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PlanoM2.TecnicoDelineantePLano.Name @PlanoM2.TecnicoDelineantePLano.LastName&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 5 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion5')&quot;&gt;
                            Visitas y accesos Medidas EMF
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion5&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Visitas y accesos Medidas EMF
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;

                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var EMF in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)))
                                        {

                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;

                                                &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, EMF.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(EMF.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(EMF.Estados.Last().Nombre)
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 6 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;CVE&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion6')&quot;&gt;
                            CVE
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion6&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir CVE
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataCVEs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var CVE in data.Value.DataCVEs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CVE.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.CantidadAFacturar.ToString(&quot;F2&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CVE.Tecnico != null)
                                                        {
                                                            @($&quot;{CVE.Tecnico.Name} {CVE.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(CVE.TecnicoExternoNombre))
                                                        {
                                                            @CVE.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (CVE.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CVE.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CVE.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot; ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 7 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;C&aacute;lculo PLL&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion7')&quot;&gt;
                            C&aacute;lculo PLL
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion7&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir c&aacute;lculo PLL
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataCalculoPLLs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var CalculoPLL in data.Value.DataCalculoPLLs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((CalculoPLL.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CalculoPLL.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@CalculoPLL.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (CalculoPLL.Tecnico != null)
                                                        {
                                                            @($&quot;{CalculoPLL.Tecnico.Name} {CalculoPLL.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(CalculoPLL.TecnicoExternoNombre))
                                                        {
                                                            @CalculoPLL.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (CalculoPLL.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CalculoPLL.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CalculoPLL.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 8 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano PLL&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion8')&quot;&gt;
                            Plano PLL
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion8&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir plano PLL
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataPlanoPLLs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var PlanoPLL in data.Value.DataPlanoPLLs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoPLL.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoPLL.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@PlanoPLL.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoPLL.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (PlanoPLL.Tecnico != null)
                                                        {
                                                            @($&quot;{PlanoPLL.Tecnico.Name} {PlanoPLL.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(PlanoPLL.TecnicoExternoNombre))
                                                        {
                                                            @PlanoPLL.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoPLL.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoPLL.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (PlanoPLL.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoPLL.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoPLL.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoPLL.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;


                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;

                                                        @if (PlanoPLL.TecnicoDelineantePLano?.Name != null)
                                                        {
                                                            &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;@PlanoPLL.TecnicoDelineantePLano?.Name @PlanoPLL.TecnicoDelineantePLano?.LastName&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;NA&lt;/span&gt;
                                                        }

                                                    &lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 9 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion9')&quot;&gt;
                            Visitas y accesos Medidas PS
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion9&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Visitas y accesos Medidas PS
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var MedidasPS in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                                        {

                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;

                                                &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, MedidasPS.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(MedidasPS.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(MedidasPS.Estados.Last().Nombre)
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 10 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion10')&quot;&gt;
                            Memoria Radioel&eacute;ctrico
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion10&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir memoria Radioel&eacute;ctrico
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataMemoriaRadioelectricos?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var MemRadioelectrico in data.Value.DataMemoriaRadioelectricos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((MemRadioelectrico.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (MemRadioelectrico.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@MemRadioelectrico.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((MemRadioelectrico.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (MemRadioelectrico.Tecnico != null)
                                                        {
                                                            @($&quot;{MemRadioelectrico.Tecnico.Name} {MemRadioelectrico.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(MemRadioelectrico.TecnicoExternoNombre))
                                                        {
                                                            @MemRadioelectrico.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((MemRadioelectrico.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((MemRadioelectrico.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (MemRadioelectrico.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((MemRadioelectrico.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (MemRadioelectrico.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((MemRadioelectrico.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 11 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion11')&quot;&gt;
                            Visitas y accesos Subida Torre
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion11&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Visitas y accesos Subida Torre
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var SubidaTorre in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)))
                                        {

                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;

                                                &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, SubidaTorre.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(SubidaTorre.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(SubidaTorre.Estados.Last().Nombre)
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 12 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Fotomontaje&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion12')&quot;&gt;
                            Fotomontaje
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion12&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Fotomontaje
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataFotomontajes?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var Fotomontaje in data.Value.DataFotomontajes.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((Fotomontaje.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (Fotomontaje.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@Fotomontaje.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Fotomontaje.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (Fotomontaje.Tecnico != null)
                                                        {
                                                            @($&quot;{Fotomontaje.Tecnico.Name} {Fotomontaje.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(Fotomontaje.TecnicoExternoNombre))
                                                        {
                                                            @Fotomontaje.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Fotomontaje.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Fotomontaje.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (Fotomontaje.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Fotomontaje.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (Fotomontaje.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Fotomontaje.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 13 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Proyecto&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion13')&quot;&gt;
                            Proyecto
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion13&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Proyecto
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataProyectos?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var Proyecto in data.Value.DataProyectos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((Proyecto.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (Proyecto.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@Proyecto.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Proyecto.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (Proyecto.Tecnico != null)
                                                        {
                                                            @($&quot;{Proyecto.Tecnico.Name} {Proyecto.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(Proyecto.TecnicoExternoNombre))
                                                        {
                                                            @Proyecto.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Proyecto.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Proyecto.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (Proyecto.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Proyecto.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (Proyecto.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Proyecto.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 14 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion14')&quot;&gt;
                            Plano constructivo
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion14&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir plano constructivo
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataPlanoConstructivos?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var PlanoConstructivo in data.Value.DataPlanoConstructivos.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoConstructivo.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoConstructivo.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@PlanoConstructivo.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoConstructivo.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (PlanoConstructivo.Tecnico != null)
                                                        {
                                                            @($&quot;{PlanoConstructivo.Tecnico.Name} {PlanoConstructivo.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(PlanoConstructivo.TecnicoExternoNombre))
                                                        {
                                                            @PlanoConstructivo.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoConstructivo.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoConstructivo.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (PlanoConstructivo.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoConstructivo.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoConstructivo.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoConstructivo.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;


                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;

                                                        @if (PlanoConstructivo.TecnicoDelineantePLano?.Name != null)
                                                        {
                                                            &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;@PlanoConstructivo.TecnicoDelineantePLano?.Name @PlanoConstructivo.TecnicoDelineantePLano?.LastName&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;NA&lt;/span&gt;
                                                        }

                                                    &lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 15 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion15')&quot;&gt;
                            Visitas y accesos CSS
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion15&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Visitas y accesos CSS
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var CSS in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                                        {

                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;

                                                &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, CSS.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(CSS.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(CSS.Estados.Last().Nombre)
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 16 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Coordinaci&oacute;n&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion16')&quot;&gt;
                            Coordinaci&oacute;n
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion16&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir coordinaci&oacute;n
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataCoordinacions?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de nombramiento&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n PSS&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de OK doc contrata&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visado&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita 2&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita 3&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita 4&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de obra&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var Coordinacion in data.Value.DataCoordinacions.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((Coordinacion.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (Coordinacion.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@Coordinacion.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (Coordinacion.TecnicoCSS != null)
                                                        {
                                                            @($&quot;{Coordinacion.TecnicoCSS.Name} {Coordinacion.TecnicoCSS.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(Coordinacion.TecnicoCSSExternoNombre))
                                                        {
                                                            @Coordinacion.TecnicoCSSExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaNombramiento?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaAprobacionPSS?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaOkDocContrata?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaVisado?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaVisita1?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaVisita2?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaVisita3?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaVisita4?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaFinObra?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (Coordinacion.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((Coordinacion.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;

                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 17 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Legalizaci&oacute;n AYTO&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion17')&quot;&gt;
                            Legalizaci&oacute;n AYTO
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion17&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir legalizaci&oacute;n AYTO
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataLegalizacionAYTOs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var LegalAYTO in data.Value.DataLegalizacionAYTOs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((LegalAYTO.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (LegalAYTO.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@LegalAYTO.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((LegalAYTO.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (LegalAYTO.Tecnico != null)
                                                        {
                                                            @($&quot;{LegalAYTO.Tecnico.Name} {LegalAYTO.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(LegalAYTO.TecnicoExternoNombre))
                                                        {
                                                            @LegalAYTO.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((LegalAYTO.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((LegalAYTO.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (LegalAYTO.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((LegalAYTO.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (LegalAYTO.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((LegalAYTO.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 18 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion18')&quot;&gt;
                            Visitas y accesos DF
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion18&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Visitas y accesos DF
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var DF in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                                        {

                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;

                                                &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((DF.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, DF.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((DF.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(DF.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(DF.Estados.Last().Nombre)
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 19 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;DF&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion19')&quot;&gt;
                            DF
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion19&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir DF
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataDFs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var DF in data.Value.DataDFs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((DF.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (DF.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@DF.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((DF.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (DF.Tecnico != null)
                                                        {
                                                            @($&quot;{DF.Tecnico.Name} {DF.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(DF.TecnicoExternoNombre))
                                                        {
                                                            @DF.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((DF.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((DF.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (DF.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((DF.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (DF.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((DF.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }


                &lt;!-- Acorde&oacute;n 20 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Puesta en servicio&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion20')&quot;&gt;
                            Puesta en servicio
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion20&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir puesta en servicio
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataPuestaEnServicios?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var PuestaServicio in data.Value.DataPuestaEnServicios.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PuestaServicio.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PuestaServicio.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@PuestaServicio.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PuestaServicio.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (PuestaServicio.Tecnico != null)
                                                        {
                                                            @($&quot;{PuestaServicio.Tecnico.Name} {PuestaServicio.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(PuestaServicio.TecnicoExternoNombre))
                                                        {
                                                            @PuestaServicio.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PuestaServicio.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PuestaServicio.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (PuestaServicio.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PuestaServicio.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PuestaServicio.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PuestaServicio.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 21 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;CFO&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion21')&quot;&gt;
                            CFO
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion21&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir CFO
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataCFOs?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var CFO in data.Value.DataCFOs.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((CFO.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CFO.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@CFO.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CFO.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (CFO.Tecnico != null)
                                                        {
                                                            @($&quot;{CFO.Tecnico.Name} {CFO.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(CFO.TecnicoExternoNombre))
                                                        {
                                                            @CFO.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CFO.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CFO.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (CFO.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CFO.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (CFO.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((CFO.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }

                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 22 --&gt;
                @if (data?.Value?.Visitas != null &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion22')&quot;&gt;
                            Visitas y accesos Asbuilt
                        &lt;/button&gt;

                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion22&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir Visitas y accesos Asbuilt
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                                    &lt;thead class=&quot;bg-slate-100&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var Asbuilt in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                                        {

                                            &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;

                                                &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, Asbuilt.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(Asbuilt.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                                    @(Asbuilt.Estados.Last().Nombre)
                                                &lt;/td&gt;
                                            &lt;/tr&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 23 --&gt;
                @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
                {
                    &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                        &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                        &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                                onclick=&quot;toggleAccordion('accordion23')&quot;&gt;
                            Plano ASBuilt
                        &lt;/button&gt;


                        &lt;!-- Contenido del acorde&oacute;n --&gt;
                        &lt;div id=&quot;accordion23&quot; class=&quot;hidden px-4 py-2&quot;&gt;
                            &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                                &lt;AuthorizedContent&gt;
                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                            @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            add_circle
                                        &lt;/span&gt;
                                        A&ntilde;adir plano Asbuilt
                                    &lt;/button&gt;
                                &lt;/AuthorizedContent&gt;

                            &lt;/div&gt;
                            @if (data.Value.DataPlanoASBuilts?.Count &gt; 0)
                            {
                                &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                    &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                        &lt;thead&gt;
                                            &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de creaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Cantidad a facturar&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnico&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de entrega&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de aprobaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de rechazo&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Fecha de subida de documentaci&oacute;n&lt;/th&gt;
                                                &lt;th class=&quot;p-2 border&quot;&gt;Delineante&lt;/th&gt;

                                            &lt;/tr&gt;
                                        &lt;/thead&gt;
                                        &lt;tbody&gt;
                                            @foreach (var PlanoASBuilt in data.Value.DataPlanoASBuilts.Where(x =&gt; x.FechaCreacionData &gt; new DateTime(2018, 1, 1)))
                                            {
                                                &lt;tr&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoASBuilt.FechaCreacionData.ToString(&quot;dd/MM/yyyy HH:mm:ss&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoASBuilt.Facturable)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@PlanoASBuilt.CantidadAFacturar.ToString(&quot;F2&quot;)&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((PlanoASBuilt.FechaPlanificacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;
                                                        @if (PlanoASBuilt.Tecnico != null)
                                                        {
                                                            @($&quot;{PlanoASBuilt.Tecnico.Name} {PlanoASBuilt.Tecnico.LastName}&quot;)
                                                        }
                                                        else if (!string.IsNullOrWhiteSpace(PlanoASBuilt.TecnicoExternoNombre))
                                                        {
                                                            @PlanoASBuilt.TecnicoExternoNombre
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-black-300&quot;&gt;No asignado&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoASBuilt.FechaHito?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoASBuilt.FechaAprobacion?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    @if (PlanoASBuilt.FechaAprobacion == null)
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoASBuilt.FechaRechazo?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;NA&lt;/td&gt;

                                                    }

                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;
                                                        @if (PlanoASBuilt.SubirDocs)
                                                        {
                                                            &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                                        }
                                                    &lt;/td&gt;
                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2 text-center&quot;&gt;@((PlanoASBuilt.FechaSubidaDocs?.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;


                                                    &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;

                                                        @if (PlanoASBuilt.TecnicoDelineantePLano?.Name != null)
                                                        {
                                                            &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;@PlanoASBuilt.TecnicoDelineantePLano?.Name @PlanoASBuilt.TecnicoDelineantePLano?.LastName&lt;/span&gt;
                                                        }
                                                        else
                                                        {
                                                            &lt;span class=&quot;px-4 py-2 text-center&quot;&gt;NA&lt;/span&gt;
                                                        }

                                                    &lt;/td&gt;
                                                &lt;/tr&gt;
                                            }
                                        &lt;/tbody&gt;
                                    &lt;/table&gt;
                                &lt;/div&gt;
                            }
                        &lt;/div&gt;
                    &lt;/div&gt;
                }

                &lt;!-- Acorde&oacute;n 24 --&gt;

                &lt;div class=&quot;border border-gray-400 rounded-md shadow-custom&quot;&gt;
                    &lt;!-- Bot&oacute;n del acorde&oacute;n --&gt;
                    &lt;button class=&quot;w-full text-left text-lg px-4 py-2 bg-gray-100 hover:bg-gray-200 focus:outline-none&quot;
                            onclick=&quot;toggleAccordion('accordion24')&quot;&gt;
                        Pedido
                    &lt;/button&gt;

                    &lt;div id=&quot;accordion24&quot; class=&quot;hidden px-4 py-2&quot;&gt;

                        &lt;div class=&quot;w-full h-fit flex flex-wrap items-center gap-3 p-2&quot;&gt;
                            &lt;AuthorizedContent&gt;
                                &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                                        @onclick='()=&gt;{IsSaved=false; OpenModalInfo();}'&gt;
                                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                        add_circle
                                    &lt;/span&gt;
                                    A&ntilde;adir pedido
                                &lt;/button&gt;
                            &lt;/AuthorizedContent&gt;

                        &lt;/div&gt;
                        @if (data?.Value?.DataPedido != null)
                        {
                            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                                &lt;span class=&quot;w-full font-bold text-blue-400&quot;&gt;
                                    Se han facturado &lt;span class=&quot;text-emerald-400&quot;&gt;@(data.Value.DataPedido.Facturas.Sum(c =&gt; c.DineroFactura).ToString(&quot;F2&quot;))&euro;&lt;/span&gt;
                                    de &lt;span class=&quot;text-emerald-400&quot;&gt;@(data.Value.DataPedido.CantidadAFacturar.ToString(&quot;F2&quot;))&euro;&lt;/span&gt; totales &lt;br /&gt;
                                    @if (data.Value.DataPedido.Facturas.Sum(c =&gt; c.DineroFactura) &lt; data.Value.DataPedido.CantidadAFacturar)
                                    {
                                        &lt;span&gt;Faltan &lt;span class=&quot;text-red-400&quot;&gt;@((data.Value.DataPedido.CantidadAFacturar - data.Value.DataPedido.Facturas.Sum(c =&gt; c.DineroFactura)).ToString(&quot;F2&quot;))&euro;&lt;/span&gt; por facturar&lt;/span&gt;
                                    }
                                    else
                                    {
                                        &lt;span class=&quot;text-emerald-400&quot;&gt;Se ha facturado la obra&lt;/span&gt;
                                    }
                                &lt;/span&gt;
                            &lt;/div&gt;



                            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                                    &lt;thead&gt;
                                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha factura&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Trabajo facturado&lt;/th&gt;
                                            &lt;th class=&quot;p-2 border&quot;&gt;Cantidad facturada (&euro;)&lt;/th&gt;


                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                        @foreach (var Pedido in data.Value.DataPedido.Facturas)
                                        {
                                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((Pedido.FechaFactura.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(Pedido.TrabajoFacturado.ToString())&lt;/td&gt;
                                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(Pedido.DineroFactura.ToString())&lt;/td&gt;
                                        }
                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        }



                    &lt;/div&gt;


                &lt;/div&gt;



            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;


    @code {

        [Parameter] public string id { get; set; }
        // [Parameter] public List&lt;E_Visitas&gt; ListaVisitas { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }


        protected override async Task OnInitializedAsync()
        {
            await LoadApi();
        }

        async Task LoadApi()
        {
            _main.IsLoading = true;

            data = await _mongoContext.GetOneSeguimientoMovil(id);

            if (data.Value.Proyecto.HitosProyecto == null)
            {
                data.Value.Proyecto.HitosProyecto = new();
            }

            if (data.Value.DataActaReplanteos.Count == 0)
            {
                data.Value.DataActaReplanteos.Add(new());
            }
            if (data.Value.DataCalculoPLLs.Count == 0)
            {
                data.Value.DataCalculoPLLs.Add(new());

            }
            if (data.Value.DataCFOs.Count == 0)
            {
                data.Value.DataCFOs.Add(new());

            }
            if (data.Value.DataCoordinacions.Count == 0)
            {
                data.Value.DataCoordinacions.Add(new());

            }
            if (data.Value.DataCVEs.Count == 0)
            {
                data.Value.DataCVEs.Add(new());

            }
            if (data.Value.DataDFs.Count == 0)
            {
                data.Value.DataDFs.Add(new());

            }
            if (data.Value.DataFotomontajes.Count == 0)
            {
                data.Value.DataFotomontajes.Add(new());

            }
            if (data.Value.DataLegalizacionAYTOs.Count == 0)
            {
                data.Value.DataLegalizacionAYTOs.Add(new());

            }
            if (data.Value.DataMemoriaRadioelectricos.Count == 0)
            {
                data.Value.DataMemoriaRadioelectricos.Add(new());

            }
            if (data.Value.DataPlanoASBuilts.Count == 0)
            {
                data.Value.DataPlanoASBuilts.Add(new());

            }
            if (data.Value.DataPlanoConstructivos.Count == 0)
            {
                data.Value.DataPlanoConstructivos.Add(new());

            }
            if (data.Value.DataPlanoM2CAPs.Count == 0)
            {
                data.Value.DataPlanoM2CAPs.Add(new());

            }
            if (data.Value.DataPlanoPLLs.Count == 0)
            {
                data.Value.DataPlanoPLLs.Add(new());

            }
            if (data.Value.DataProyectos.Count == 0)
            {
                data.Value.DataProyectos.Add(new());

            }
            if (data.Value.DataPuestaEnServicios.Count == 0)
            {
                data.Value.DataPuestaEnServicios.Add(new());

            }

            await InvokeAsync(StateHasChanged);

            _main.IsLoading = false;
        }

        // colores de estados de la parte de visitas y accesos

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };


        //Modal informaci&oacute;n

        public E_Seguimiento addeditModal = new E_Seguimiento();
        public bool IsSaved = false;

        void OpenModalInfo(E_Seguimiento edit = null)
        {
            if (edit != null)
            {
                addeditModal = edit;
            }
            else
            {
                addeditModal = new E_Seguimiento();
            }

            var modal = _modal.ShowModal(typeof(AddEditInfo), new Dictionary&lt;string, object&gt;
        {
            {nameof(AddEditInfo.AddEdit), addeditModal},
            {nameof(AddEditInfo.Saved), IsSaved}
        }, FixedWidth: 80);

            modal.OnCloseModal += async (bool reload) =&gt;
            {
                if (reload)
                {
                    await LoadApi();
                }
                await InvokeAsync(StateHasChanged);
            };
        }
    }
    `
  },
  {
    "ID": 74,
    "ServicesName": "NewEditObra2.0",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/NewEditObra2.0",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/seguimientomovil/obra/{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoReplanteoVistaReplanteo*@

    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyecto)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;div class=&quot;grid grid-cols-[15%_85%] h-screen&quot;&gt;

        @if (data.Value != null &amp;&amp; data.Value.Proyecto != null)
        {

            &lt;!-- Columna izquierda --&gt;
            &lt;div class=&quot;bg-white p-6&quot;&gt;
                &lt;!-- C&oacute;digo operador --&gt;

                @* 	&lt;h3 class=&quot;w-full text-m font-semibold text-center text-gray-600&quot;&gt;
                    C&oacute;digo operador
                &lt;/h3&gt;
                &lt;h2 class=&quot;w-full text-xl font-bold text-center text-blue-400 mb-2&quot;&gt;
                    @(data.Value.Codigo2)
                &lt;/h2&gt;
                &lt;h3 class=&quot;w-full text-m font-semibold text-center text-gray-600&quot;&gt;
                    Nombre
                &lt;/h3&gt;
                &lt;h2 class=&quot;w-full text-xl font-bold text-center text-blue-400 break-words whitespace-normal&quot;&gt;
                    @(data.Value.Nombre)
                &lt;/h2&gt;
                &lt;hr class=&quot;my-4 border-t border-gray-300&quot;&gt; *@

                &lt;!-- Espaciado entre secciones --&gt;
                &lt;div class=&quot;mt-4&quot;&gt;
                    &lt;!-- Contenedor de botones del proyecto --&gt;

                    &lt;div class=&quot;flex flex-col gap-3&quot;&gt;


                        &lt;!-- Bot&oacute;n Informaci&oacute;n --&gt;
                        &lt;button class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500
    @(selectedComponent == &quot;Acceso Documentaci&oacute;n y Visita&quot; ? &quot;text-blue-400 text font-semibold&quot; : &quot;text-gray-600 hover:text-blue-400&quot;)&quot;
                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Acceso Documentaci&oacute;n y Visita&quot;))&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined text-lg leading-none&quot;&gt;info&lt;/span&gt;
                            Informaci&oacute;n
                            &lt;span class=&quot;ml-auto&quot;&gt;&lt;/span&gt; &lt;!-- Espacio reservado para alinear con la flecha en Replanteo --&gt;
                        &lt;/button&gt;

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Acta Replanteo&quot;) == true)
                        {
                            &lt;!-- Secci&oacute;n: Replanteo --&gt;
                            &lt;div class=&quot;w-full flex flex-col&quot;&gt;
                                &lt;!-- Bot&oacute;n principal de Replanteo --&gt;
                                &lt;button onclick=&quot;toggleSubmenu('replanteoSubmenu')&quot; class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500 whitespace-nowrap&quot;&gt;
                                    &lt;span class=&quot;material-symbols-outlined text-base leading-none&quot;&gt;description&lt;/span&gt;
                                    Replanteo
                                    &lt;span class=&quot;material-symbols-outlined ml-auto text-lg leading-none&quot;&gt;expand_more&lt;/span&gt;
                                &lt;/button&gt;

                                &lt;!-- Submen&uacute; anidado --&gt;
                                &lt;div id=&quot;replanteoSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                    &lt;!-- Bot&oacute;n Visita Replanteo --&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Replanteo&quot; ? &quot;text-blue-400 text font-semibold&quot; :  (aplicaVisitaReplanteo ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Replanteo&quot;))&quot;&gt;
                                            @* 	&lt;span class=&quot;material-symbols-outlined text-base leading-none&quot;&gt;place&lt;/span&gt; *@
                                            &middot; Visita Replanteo
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;!-- Bot&oacute;n Acta Replanteo --&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Acta Replanteo&quot; ? &quot;text-blue-400 text font-semibold&quot; : (aplicaActaReplanteo ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Acta Replanteo&quot;))&quot;&gt;

                                            &middot; Acta Replanteo
                                        &lt;/span&gt;
                                    &lt;/button&gt;


                                    &lt;button onclick=&quot;toggleSubmenu('LOSSubmenu')&quot;
                                            class=&quot;w-full flex items-center gap-2 text-sm mt-2 hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; LOS
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;LOSSubmenu&quot; class=&quot;ml-6 mt-3 hidden&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
    @(selectedComponent == &quot;Visita LOS&quot; ? &quot;text-blue-400 text font-semibold&quot; :  (aplicaVisitaLOS ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita LOS&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Visita LOS
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
                                        @(selectedComponent == &quot;Informe LOS&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaInformeLOS ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Informe LOS&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Informe LOS
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                    &lt;/div&gt;


                                &lt;/div&gt;
                            &lt;/div&gt;
                        }
                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano M2 CAP&quot;) == true)
                        {
                            &lt;button class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500
        @(selectedComponent == &quot;Plano M2 CAP&quot; ?  &quot;text-blue-400 text font-semibold&quot; : (aplicaPlanoM2CAP ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano M2 CAP&quot;))&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined text-base leading-none&quot;&gt;map&lt;/span&gt;
                                Planos M2
                                &lt;span class=&quot;ml-auto&quot;&gt;&lt;/span&gt;
                            &lt;/button&gt;
                        }
                        &lt;!-- Secci&oacute;n: Constructivo --&gt;
                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
                        {
                            &lt;div class=&quot;w-full flex flex-col&quot;&gt;
                                &lt;!-- Bot&oacute;n principal de Constructivo --&gt;
                                &lt;button onclick=&quot;toggleSubmenu('constructivoSubmenu')&quot;
                                        class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500 whitespace-nowrap&quot;&gt;
                                    &lt;span class=&quot;material-symbols-outlined text-lg leading-none&quot;&gt;construction&lt;/span&gt;
                                    Constructivo
                                    &lt;span class=&quot;material-symbols-outlined ml-auto text-lg leading-none&quot;&gt;expand_more&lt;/span&gt;
                                &lt;/button&gt;
                                &lt;div id=&quot;constructivoSubmenu&quot; class=&quot;ml-6 mt-3 w-full flex flex-col&quot;&gt;
                                    &lt;button onclick=&quot;toggleSubmenu('cveMastilSubmenu')&quot;
                                            class=&quot;w-full flex items-center gap-2 text-sm hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; CVE m&aacute;stil
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;cveMastilSubmenu&quot; class=&quot;ml-6 mt-3 hidden&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm whitespace-normal
                                                @(selectedComponent == &quot;Visita Mastil&quot; ? &quot;text-blue-400 text font-semibold&quot; :  (aplicaVisitaMastil ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita Mastil&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Visita m&aacute;stil
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
                                        @(selectedComponent == &quot;CVE&quot; ? &quot;text-blue-400 text-white font-semibold&quot; : (aplicaCVE ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;CVE&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Informe CVE
                                            &lt;/span&gt;
                                        &lt;/button&gt;

                                    &lt;/div&gt;

                                    &lt;button onclick=&quot;toggleSubmenu('cveTorreSubmenu')&quot;
                                            class=&quot;w-full flex items-center text-sm mt-2 hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; CVE Torre
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;cveTorreSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm whitespace-normal
    @(selectedComponent == &quot;Subida Torre&quot; ? &quot;text-blue-400 font-semibold&quot; :  (aplicaVisitaTorre ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Subida Torre&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Visita Torre
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
                                        @(selectedComponent == &quot;CVE Torre&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaCVEInformeTorre ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;CVE Torre&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Informe CVE
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;


                                    &lt;button onclick=&quot;toggleSubmenu('direccionObraSubmenu')&quot;
                                            class=&quot;w-full flex items-center text-sm mt-2 hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; Direcci&oacute;n de obra
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;direccionObraSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm whitespace-normal
    @(selectedComponent == &quot;Visita DF&quot; ? &quot;text-blue-400  font-semibold&quot; :  (aplicaVisitaDF ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita DF&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Visita DF
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
                                        @(selectedComponent == &quot;DF&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaDF ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;DF&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Doc. DF
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;

                                    &lt;button onclick=&quot;toggleSubmenu('fotomontajeSubmenu')&quot;
                                            class=&quot;w-full flex items-center text-sm mt-2 hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; Fotomontaje
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;fotomontajeSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm whitespace-normal
    @(selectedComponent == &quot;Fotomontaje&quot; ? &quot;text-blue-400 font-semibold&quot; :  (aplicaFoto ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Fotomontaje&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Fotomontaje
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
                                        @(selectedComponent == &quot;Fotomontaje Texto&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaDF ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Fotomontaje Texto&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                - Doc. Texto
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;
                                
                                        &lt;!-- Plano Constructivo y Proyecto T&eacute;cnico alineados --&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal

    @(selectedComponent == &quot;Plano constructivo&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaPlanoCons ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano constructivo&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                &middot; Plano constructivo
                                            &lt;/span&gt;
                                            &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;&lt;/span&gt;
                                        &lt;/button&gt;

                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal
    @(selectedComponent == &quot;Proyecto&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaProyecto ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Proyecto&quot;))&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                                &middot; Proyecto t&eacute;cnico
                                            &lt;/span&gt;
                                            &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;&lt;/span&gt;
                                        &lt;/button&gt;
                                
                                &lt;/div&gt;
                            &lt;/div&gt;
                        }


                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Coordinaci&oacute;n&quot;) == true)
                        {
                            &lt;!-- Secci&oacute;n: Coordinaci&oacute;n --&gt;
                            &lt;div class=&quot;w-full flex flex-col&quot;&gt;
                                &lt;!-- Bot&oacute;n principal de Constructivo --&gt;
                                &lt;button onclick=&quot;toggleSubmenu('coordinacionSubmenu')&quot;
                                        class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500 whitespace-nowrap&quot;&gt;
                                    &lt;span class=&quot;material-symbols-outlined text-lg leading-none&quot;&gt;manage_accounts&lt;/span&gt;

                                    Coordinaci&oacute;n
                                    &lt;span class=&quot;material-symbols-outlined ml-auto text-lg leading-none&quot;&gt;expand_more&lt;/span&gt;
                                &lt;/button&gt;
                                &lt;div id=&quot;coordinacionSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Visita CSS&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaVisitaCSS ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita CSS&quot;))&quot;&gt;
                                            &middot; Visita coordinaci&oacute;n
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Coordinaci&oacute;n&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaCoordinador ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Coordinaci&oacute;n&quot;))&quot;&gt;
                                            &middot; Coordinador
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;DocCoordinacion&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaDocCoordinacion ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;DocCoordinacion&quot;))&quot;&gt;

                                            &middot; Doc. Contrata
                                        &lt;/span&gt;

                                    &lt;/button&gt;



                                &lt;/div&gt;
                            &lt;/div&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
                        {
                            &lt;!-- Secci&oacute;n: Radioel&eacute;ctrico --&gt;
                            &lt;div class=&quot;w-full flex flex-col&quot;&gt;
                                &lt;!-- Bot&oacute;n principal de Constructivo --&gt;
                                &lt;button onclick=&quot;toggleSubmenu('radioelectricoSubmenu')&quot;
                                        class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500 whitespace-nowrap&quot;&gt;
                                    &lt;span class=&quot;material-symbols-outlined text-lg leading-none&quot;&gt;wifi_tethering&lt;/span&gt;

                                    Radioel&eacute;ctrico
                                    &lt;span class=&quot;material-symbols-outlined ml-auto text-lg leading-none&quot;&gt;expand_more&lt;/span&gt;
                                &lt;/button&gt;
                                &lt;div id=&quot;radioelectricoSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm whitespace-normal
    @(selectedComponent == &quot;Medidas EMF&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaVisitaEMF ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Medidas EMF&quot;))&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; Visita EMF
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;C&aacute;lculo PLL&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaCalculoPLL ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;C&aacute;lculo PLL&quot;))&quot;&gt;
                                            &middot; C&aacute;lculo PLL
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Plano PLL&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaPlanoPLL ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano PLL&quot;))&quot;&gt;

                                            &middot; Plano PLL
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Memoria Radioel&eacute;ctrico&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaMem ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Memoria Radioel&eacute;ctrico&quot;))&quot;&gt;

                                            &middot; Memoria radioel&eacute;ctrico
                                        &lt;/span&gt;

                                    &lt;/button&gt;

                                    &lt;button onclick=&quot;toggleSubmenu('puestaEnServicioSubmenu')&quot;
                                            class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; Puesta en servicio
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;puestaEnServicioSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center gap-2 text-sm whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48 	@(selectedComponent == &quot;Medidas PS&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaVisitaPS ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Medidas PS&quot;))&quot;&gt;
                                                - Visita PSC
                                            &lt;/span&gt;

                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex items-center gap-2 w-48
                                            @(selectedComponent == &quot;Puesta en servicio&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaPuesta ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Puesta en servicio&quot;))&quot;&gt;

                                                - Memoria PSC
                                            &lt;/span&gt;

                                        &lt;/button&gt;


                                    &lt;/div&gt;

                                &lt;/div&gt;
                            &lt;/div&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;ASBuilt&quot;) == true)
                        {
                            &lt;!-- Secci&oacute;n: AsBuilt --&gt;
                            &lt;div class=&quot;w-full flex flex-col&quot;&gt;

                                &lt;button onclick=&quot;toggleSubmenu('AsBuiltSubmenu')&quot;
                                        class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500 whitespace-nowrap&quot;&gt;
                                    &lt;span class=&quot;material-symbols-outlined text-lg leading-none&quot;&gt;table_view&lt;/span&gt;

                                    AsBuilt
                                    &lt;span class=&quot;material-symbols-outlined ml-auto text-lg leading-none&quot;&gt;expand_more&lt;/span&gt;
                                &lt;/button&gt;
                                &lt;div id=&quot;AsBuiltSubmenu&quot; class=&quot;ml-6 mt-3&quot;&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Visita Asbuilt&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaVisitaAsBuilt ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita Asbuilt&quot;))&quot;&gt;
                                            &middot; Visita AsBuilt
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Plano ASBuilt&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaAsbuilt ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano ASBuilt&quot;))&quot;&gt;
                                            &middot; Plano AsBuilt
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Informe ASBuilt&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaInformeAsBuilt ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Informe ASBuilt&quot;))&quot;&gt;

                                            &middot; Informe
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;PPI&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaPPI ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;PPI&quot;))&quot;&gt;

                                            &middot; PPI
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;Recepcion Obra&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaRecepcionObra ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Recepcion Obra&quot;))&quot;&gt;

                                            &middot; Acta recepci&oacute;n obra
                                        &lt;/span&gt;

                                    &lt;/button&gt;
                                    &lt;button class=&quot;w-full flex items-center gap-2 text-sm mt-2 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48
    @(selectedComponent == &quot;PTP&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaPTP ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;PTP&quot;))&quot;&gt;

                                            &middot; PTP
                                        &lt;/span&gt;

                                    &lt;/button&gt;

                                    &lt;button onclick=&quot;toggleSubmenu('docFinObraSubmenu')&quot;
                                            class=&quot;w-full flex items-center text-sm mt-2 hover:text-blue-500 whitespace-normal&quot;&gt;
                                        &lt;span class=&quot;flex items-center gap-2 w-48&quot;&gt;
                                            &middot; Doc. fin de obra
                                        &lt;/span&gt;
                                        &lt;span class=&quot;material-symbols-outlined text-lg leading-none ml-auto&quot;&gt;expand_more&lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;div id=&quot;docFinObraSubmenu&quot; class=&quot;ml-4 pl-2 mt-3 hidden&quot;&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex-shrink-0 w-48 text-left
    @(selectedComponent == &quot;Boletin Electrico&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaBoletin ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Boletin Electrico&quot;))&quot;&gt;
                                                - Bolet&iacute;n el&eacute;ctrico
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex-shrink-0 w-48 text-left
    @(selectedComponent == &quot;Cert. Residuos&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaCertResiduos ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Cert. Residuos&quot;))&quot;&gt;
                                                - Cert. tratamiento residuos
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex-shrink-0 w-48 text-left&quot;&gt;- Cert. Game-system&lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex-shrink-0 w-48 text-left&quot;&gt;- Medici&oacute;n toma tierras&lt;/span&gt;
                                        &lt;/button&gt;
                                        &lt;button class=&quot;w-full flex items-center text-sm mt-2 whitespace-normal&quot;&gt;
                                            &lt;span class=&quot;flex-shrink-0 w-48 text-left
    @(selectedComponent == &quot;CFO&quot; ? &quot;text-blue-400 font-semibold&quot; : (aplicaCFO ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;CFO&quot;))&quot;&gt;

                                                - CFO
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/div&gt;




                                &lt;/div&gt;
                            &lt;/div&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Legalizaci&oacute;n AYTO&quot;) == true)
                        {
                            &lt;button class=&quot;w-full flex items-center gap-2 text-base text-gray-700 hover:text-blue-500
        @(selectedComponent == &quot;Legalizaci&oacute;n AYTO&quot; ?  &quot;text-blue-400 text font-semibold&quot; : (aplicaAYTO ? &quot;bg-white hover:text-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;Legalizaci&oacute;n AYTO&quot;))&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined text-base leading-none&quot;&gt;gavel&lt;/span&gt;
                                Licencias
                                &lt;span class=&quot;ml-auto&quot;&gt;&lt;/span&gt;
                            &lt;/button&gt;
                        }

                        @* 	@if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)))
                        { 
                        &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Medidas EMF&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-blue-400&quot;)&quot;
                        @onclick=&quot;@(() =&gt; ShowComponent(&quot;Medidas EMF&quot;))&quot;&gt;
                            Visita medidas EMF
                        &lt;/button&gt;
                        } 

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;CVE&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;CVE&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaCVE ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;CVE&quot;))&quot;&gt;
                                CVE
                            &lt;/button&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;C&aacute;lculo PLL&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;C&aacute;lculo PLL&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaCalculoPLL ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;C&aacute;lculo PLL&quot;))&quot;&gt;
                                C&aacute;lculo PLL
                            &lt;/button&gt;
                        } 

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano PLL&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Plano PLL&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaPlanoPLL ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano PLL&quot;))&quot;&gt;
                                Plano PLL
                            &lt;/button&gt;
                        }

                        @if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                        { 
                        &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Medidas PS&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-blue-400&quot;)&quot;
                        @onclick=&quot;@(() =&gt; ShowComponent(&quot;Medidas PS&quot;))&quot;&gt;
                            Visita medidas PS
                        &lt;/button&gt;
                        } 

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Memoria Radioel&eacute;ctrico&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaMem ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Memoria Radioel&eacute;ctrico&quot;))&quot;&gt;
                                Memoria radioel&eacute;ctrico
                            &lt;/button&gt;
                        } 

                        @if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;))) 
                        {
                        &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Subida Torre&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-blue-400&quot;)&quot;
                        @onclick=&quot;@(() =&gt; ShowComponent(&quot;Subida Torre&quot;))&quot;&gt;
                            Visita subida torre
                        &lt;/button&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Fotomontaje&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Fotomontaje&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaFoto ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Fotomontaje&quot;))&quot;&gt;
                                Fotomontaje
                            &lt;/button&gt;
                        } 

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Proyecto&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Proyecto&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaProyecto ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Proyecto&quot;))&quot;&gt;
                                Proyecto
                            &lt;/button&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano constructivo&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Plano constructivo&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaPlanoCons ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano constructivo&quot;))&quot;&gt;
                                Plano constructivo
                            &lt;/button&gt;
                        } 

                            @if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                        { 
                        &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Visita CSS&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-blue-400&quot;)&quot;
                        @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita CSS&quot;))&quot;&gt;
                            Visita CSS
                        &lt;/button&gt; 
                        } 

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Coordinaci&oacute;n&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-medium text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Coordinaci&oacute;n&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-gray-200&quot;)&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Coordinaci&oacute;n&quot;))&quot;&gt;
                                Coordinaci&oacute;n
                            &lt;/button&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Legalizaci&oacute;n AYTO&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Legalizaci&oacute;n AYTO&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaAYTO ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Legalizaci&oacute;n AYTO&quot;))&quot;&gt;
                                Legalizaci&oacute;n AYTO
                            &lt;/button&gt;
                        } 



                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;DF&quot;) == true)
                        {

                                @if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                        { 
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Visita DF&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-blue-400&quot;)&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita DF&quot;))&quot;&gt;
                                Visita DF
                            &lt;/button&gt;
                            } 
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;DF&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaDF ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;DF&quot;))&quot;&gt;
                                DF
                            &lt;/button&gt; 
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Puesta en servicio&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Puesta en servicio&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaPuesta ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;Puesta en servicio&quot;))&quot;&gt;
                                Puesta en servicio
                            &lt;/button&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;CFO&quot;) == true)
                        {
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;CFO&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaCFO ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                                    @onclick=&quot;@(() =&gt; ShowComponent(&quot;CFO&quot;))&quot;&gt;
                                CFO
                            &lt;/button&gt;
                        }

                        @if (data?.Value?.Proyecto?.HitosProyecto?.Contains(&quot;Plano ASBuilt&quot;) == true)
                        {


                            @if (data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                        { 
                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Visita Asbuilt&quot; ? &quot;bg-blue-400 text-white&quot; : &quot;bg-white hover:bg-blue-400&quot;)&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Visita Asbuilt&quot;))&quot;&gt;
                                Visita Asbuilt
                            &lt;/button&gt;
                            } 

                            &lt;button class=&quot;px-4 py-2 text-l font-bold text-black rounded flex items-center justify-start text-left w-full
        @(selectedComponent == &quot;Plano ASBuilt&quot; ? &quot;bg-blue-400 text-white&quot; : (aplicaAsbuilt ? &quot;bg-white hover:bg-blue-400&quot; : &quot;bg-white hover:bg-gray-100 text-gray-400&quot;))&quot;
                            @onclick=&quot;@(() =&gt; ShowComponent(&quot;Plano ASBuilt&quot;))&quot;&gt;
                                Plano ASBuilt
                            &lt;/button&gt;
                        }

                            &lt;button class=&quot;px-4 py-2 text-l font-medium text-black bg-white hover:bg-gray-200 rounded flex items-center justify-start text-left w-full&quot;
                                @onclick=&quot;@(() =&gt; ShowComponent(&quot;Pedido&quot;))&quot;&gt;
                            Pedido
                        &lt;/button&gt; *@


                    &lt;/div&gt;



                &lt;/div&gt;
            &lt;/div&gt;


            &lt;!-- Columna derecha --&gt;
            &lt;div class=&quot;grid grid-rows-[15%_85%] bg-white h-screen&quot;&gt;

                &lt;!-- Fila superior --&gt;
                &lt;div class=&quot;bg-blue-100 p-4 text-xl text-center flex items-center justify-around&quot;&gt;
                    &lt;!-- Secci&oacute;n de C&oacute;digo propietario --&gt;
                    &lt;div class=&quot;text-center&quot;&gt;
                        &lt;h3 class=&quot;text-xl font-semibold text-gray-600&quot;&gt;
                            C&oacute;digo propietario
                        &lt;/h3&gt;
                        &lt;h2 class=&quot;text-2xl font-bold text-blue-400&quot;&gt;
                            @(data.Value.Codigo1)
                        &lt;/h2&gt;
                    &lt;/div&gt;
                    &lt;!-- L&iacute;nea vertical divisoria --&gt;
                    &lt;div class=&quot;h-full w-0.5 bg-gray-300 mx-4&quot;&gt;&lt;/div&gt;
                    &lt;!-- Secci&oacute;n de C&oacute;digo operador --&gt;
                    &lt;div class=&quot;text-center&quot;&gt;
                        &lt;h3 class=&quot;text-xl font-semibold text-gray-600&quot;&gt;
                            C&oacute;digo operador
                        &lt;/h3&gt;
                        @if (!string.IsNullOrEmpty(data.Value.Codigo2))
                        {
                            &lt;h2 class=&quot;text-2xl font-bold text-blue-400&quot;&gt;
                                @(data.Value.Codigo2)
                            &lt;/h2&gt;
                        }
                        else
                        {
                            &lt;div class=&quot;flex items-center text-gray-500 space-x-2&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined text-2xl text-red-500&quot;&gt;
                                    warning
                                &lt;/span&gt;
                                &lt;p class=&quot;text-xs text-red-500 font-medium&quot;&gt;Falta el c&oacute;digo operador&lt;/p&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                    &lt;!-- L&iacute;nea vertical divisoria --&gt;
                    &lt;div class=&quot;h-full w-0.5 bg-gray-300 mx-4&quot;&gt;&lt;/div&gt;
                    &lt;!-- Secci&oacute;n de C&oacute;digo de seguimiento --&gt;
                    &lt;div class=&quot;text-center&quot;&gt;
                        &lt;h3 class=&quot;text-xl font-semibold text-gray-600&quot;&gt;
                            C&oacute;digo seguimiento
                        &lt;/h3&gt;
                        @if (!string.IsNullOrEmpty(data.Value.CodigoOtros))
                        {
                            &lt;h2 class=&quot;text-2xl font-bold text-blue-400&quot;&gt;
                                @(data.Value.CodigoOtros)
                            &lt;/h2&gt;
                        }
                        else
                        {
                            &lt;div class=&quot;flex items-center text-gray-500 space-x-2&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined text-2xl text-red-500&quot;&gt;
                                    warning
                                &lt;/span&gt;
                                &lt;p class=&quot;text-xs text-red-500 font-medium&quot;&gt;Falta el c&oacute;digo seguimiento&lt;/p&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                    &lt;!-- L&iacute;nea vertical divisoria --&gt;
                    &lt;div class=&quot;h-full w-0.5 bg-gray-300 mx-4&quot;&gt;&lt;/div&gt;
                    &lt;!-- Secci&oacute;n de Nombre --&gt;
                    &lt;div class=&quot;text-center&quot;&gt;
                        &lt;h3 class=&quot;text-xl font-semibold text-gray-600&quot;&gt;
                            Nombre
                        &lt;/h3&gt;
                        &lt;h2 class=&quot;text-2xl font-bold text-blue-400 break-words whitespace-normal&quot;&gt;
                            @(data.Value.Nombre)
                        &lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;



                &lt;!-- Fila intermedio --&gt;
                &lt;div class=&quot;p-4 bg white&quot;&gt;

                    @if (selectedComponent == &quot;Acceso Documentaci&oacute;n y Visita&quot;)
                    {
                        &lt;InfoHito id=&quot;@selectedId&quot; /&gt;
                    }
                    else if (selectedComponent == &quot;Acta Replanteo&quot;)
                    {
                        &lt;HitoActaReplanteo OnAplicaChanged=&quot;HandleAplicaChanged&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Plano M2 CAP&quot;)
                    {
                        &lt;HitoPlanoM2CAP OnAplicaChangedM2CAP=&quot;HandleAplicaChangedM2CAP&quot; id=&quot;@selectedId&quot; /&gt;
                    }
                    else if (selectedComponent == &quot;CVE&quot;)
                    {
                        &lt;HitoCVE OnAplicaChangedCVE=&quot;HandleAplicaChangedCVE&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;CVE Torre&quot;)
                    {
                        &lt;HitoCVETorre OnAplicaChangedCVEinformeTorre=&quot;HandleAplicaChangedCVETorre&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;C&aacute;lculo PLL&quot;)
                    {

                        &lt;HitoCalculoPLL OnAplicaChangedCalculoPLL=&quot;HandleAplicaChangedPLL&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Plano PLL&quot;)
                    {
                        &lt;HitoPlanoPLL OnAplicaChangedPlanoPLL=&quot;HandleAplicaChangedPlanoPLL&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Memoria Radioel&eacute;ctrico&quot;)
                    {
                        &lt;HitoMemRadioelectrico OnAplicaChangedMem=&quot;HandleAplicaChangedMem&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Fotomontaje&quot;)
                    {
                        &lt;HitoFotomontaje OnAplicaChangedFoto=&quot;HandleAplicaChangedFoto&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Fotomontaje Texto&quot;)
                    {
                        &lt;HitoFotoTexto OnAplicaChangedFotoTexto=&quot;HandleAplicaChangedFoto&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Proyecto&quot;)
                    {
                        &lt;HitoProyecto OnAplicaChangedProyecto=&quot;HandleAplicaChangedproyecto&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Plano constructivo&quot;)
                    {
                        &lt;HitoPlanoCosntructivo OnAplicaChangedPlanoCons=&quot;HandleAplicaChangedPlanoCons&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Coordinaci&oacute;n&quot;)
                    {
                        &lt;HitoCoordinacion OnAplicaChangedCoordinador=&quot;HandleAplicaChangedCoordinador&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;DocCoordinacion&quot;)
                    {
                        &lt;HitoDocsCoordinacion OnAplicaChangedDocCoordinacion=&quot;HandleAplicaChangedDocCoordinacion&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Legalizaci&oacute;n AYTO&quot;)
                    {
                        &lt;HitoAYTO OnAplicaChangedAYTO=&quot;HandleAplicaChangedAYTO&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;DF&quot;)
                    {
                        &lt;HitoDF OnAplicaChangedDF=&quot;HandleAplicaChangedDF&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Puesta en servicio&quot;)
                    {
                        &lt;HitoPuestaServicio OnAplicaChangedPuesta=&quot;HandleAplicaChangedPuesta&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;CFO&quot;)
                    {
                        &lt;HitoCFO OnAplicaChangedCFO=&quot;HandleAplicaChangedCFO&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Plano ASBuilt&quot;)
                    {
                        &lt;HitoPlanoAsbuilt OnAplicaChangedAsBuilt=&quot;HandleAplicaChangedAsBuilt&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Pedido&quot;)
                    {
                        &lt;Pedido id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Informe ASBuilt&quot;)
                    {
                        &lt;HitoInformeAsBuilt OnAplicaChangedInformeAsBuilt=&quot;HandleAplicaChangedInformeAsBuilt&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                    else if (selectedComponent == &quot;PPI&quot;)
                    {
                        &lt;HitoPPI OnAplicaChangedPPI=&quot;HandleAplicaChangedPPI&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                    else if (selectedComponent == &quot;Recepcion Obra&quot;)
                    {
                        &lt;HitoActaRecepcionObra OnAplicaChangedRecepcionObra=&quot;HandleAplicaChangedRecepcionObra&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                    else if (selectedComponent == &quot;PTP&quot;)
                    {
                        &lt;HitoPTP OnAplicaChangedPTP=&quot;HandleAplicaChangedPTP&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                    else if (selectedComponent == &quot;Boletin Electrico&quot;)
                    {
                        &lt;HitoBoletinElectrico OnAplicaChangedBoletin=&quot;HandleAplicaChangedBoletin&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                    else if (selectedComponent == &quot;Informe LOS&quot;)
                    {
                        &lt;HitoReplanteoLOS OnAplicaChangedReplanteoLOS=&quot;HandleAplicaChangedInformeLOS&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Cert. Residuos&quot;)
                    {
                        &lt;HitoCertTratamientoResiduos OnAplicaChangedCertResiduos=&quot;HandleAplicaChangedCertResiduos&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                    //VISITAS

                    else if (selectedComponent == &quot;Replanteo&quot;)
                    {
                        &lt;VisitaReplanteo OnAplicaChangedVisitaRep=&quot;HandleAplicaChangedVisitaRep&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Medidas EMF&quot;)
                    {
                        &lt;VisitaMedidasEMF OnAplicaChangedVisitaEMF=&quot;HandleAplicaChangedVisitaEMF&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Medidas PS&quot;)
                    {
                        &lt;VisitaMedidasPS OnAplicaChangedVisitaPS=&quot;HandleAplicaChangedVisitaPS&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Subida Torre&quot;)
                    {
                        &lt;VisitaSubidaTorre OnAplicaChangedVisitaTorre=&quot;HandleAplicaChangedVisitaTorre&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Visita CSS&quot;)
                    {
                        &lt;VisitaCSS OnAplicaChangedVisitaCSS=&quot;HandleAplicaChangedVisitaCSS&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Visita DF&quot;)
                    {
                        &lt;VisitaDF OnAplicaChangedVisitaDF=&quot;HandleAplicaChangedVisitaDF&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Visita Asbuilt&quot;)
                    {
                        &lt;VisitaAsbuilt OnAplicaChangedVisitaAsBuilt=&quot;HandleAplicaChangedVisitaAsBuilt&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Visita Mastil&quot;)
                    {
                        &lt;VisitaMastil OnAplicaChangedVisitaMastil=&quot;HandleAplicaChangedVisitaMastil&quot; id=&quot;@selectedId&quot; /&gt;

                    }
                    else if (selectedComponent == &quot;Visita LOS&quot;)
                    {
                        &lt;VisitaLOS OnAplicaChangedVisitaLOS=&quot;HandleAplicaChangedVisitaLOS&quot; id=&quot;@selectedId&quot; /&gt;

                    }

                &lt;/div&gt;

            &lt;/div&gt;
        }

    &lt;/div&gt;


    @code {
        [Parameter] public string id { get; set; }
        // [Parameter] public List&lt;E_Visitas&gt; ListaVisitas { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        private string selectedId = string.Empty;
        private string selectedComponent;

        private void toggleSubmenu(string submenuId)
        {
            // L&oacute;gica para mostrar/ocultar el submen&uacute; usando JavaScript
            var script = $@&quot;
                const submenu = document.getElementById('{submenuId}');
                if (submenu.classList.contains('hidden')) {{
                    submenu.classList.remove('hidden');
                }} else {{
                    submenu.classList.add('hidden');
                }}
            &quot;;
            _js.InvokeVoidAsync(&quot;eval&quot;, script);
        }

        private bool aplicaVisitaReplanteo;

        private void HandleAplicaChangedVisitaRep(bool newValue)
        {
            aplicaVisitaReplanteo = newValue;
            StateHasChanged();
        }
        private bool aplicaVisitaMastil;

        private void HandleAplicaChangedVisitaMastil(bool newValue)
        {
            aplicaVisitaMastil = newValue;
            StateHasChanged();
        }

        private bool aplicaVisitaTorre;

        private void HandleAplicaChangedVisitaTorre(bool newValue)
        {
            aplicaVisitaTorre = newValue;
            StateHasChanged();
        }

        private bool aplicaCVEInformeTorre;

        private void HandleAplicaChangedCVETorre(bool newValue)
        {
            aplicaCVEInformeTorre = newValue;
            StateHasChanged();
        }

        private bool aplicaVisitaDF;

        private void HandleAplicaChangedVisitaDF(bool newValue)
        {
            aplicaVisitaDF = newValue;
            StateHasChanged();
        }

        private bool aplicaVisitaEMF;

        private void HandleAplicaChangedVisitaEMF(bool newValue)
        {
            aplicaVisitaEMF = newValue;
            StateHasChanged();
        }

        private bool aplicaVisitaPS;

        private void HandleAplicaChangedVisitaPS(bool newValue)
        {
            aplicaVisitaPS = newValue;
            StateHasChanged();
        }
        private bool aplicaVisitaAsBuilt;

        private void HandleAplicaChangedVisitaAsBuilt(bool newValue)
        {
            aplicaVisitaAsBuilt = newValue;
            StateHasChanged();
        }
        private bool aplicaInformeAsBuilt;

        private void HandleAplicaChangedInformeAsBuilt(bool newValue)
        {
            aplicaInformeAsBuilt = newValue;
            StateHasChanged();
        }

        private bool aplicaPPI;

        private void HandleAplicaChangedPPI(bool newValue)
        {
            aplicaPPI = newValue;
            StateHasChanged();
        }

        private bool aplicaRecepcionObra;

        private void HandleAplicaChangedRecepcionObra(bool newValue)
        {
            aplicaRecepcionObra = newValue;
            StateHasChanged();
        }

        private bool aplicaPTP;

        private void HandleAplicaChangedPTP(bool newValue)
        {
            aplicaPTP = newValue;
            StateHasChanged();
        }

        private bool aplicaBoletin;

        private void HandleAplicaChangedBoletin(bool newValue)
        {
            aplicaBoletin = newValue;
            StateHasChanged();
        }


        private bool aplicaVisitaCSS;

        private void HandleAplicaChangedVisitaCSS(bool newValue)
        {
            aplicaVisitaCSS = newValue;
            StateHasChanged();
        }

        private bool aplicaCoordinador;

        private void HandleAplicaChangedCoordinador(bool newValue)
        {
            aplicaCoordinador = newValue;
            StateHasChanged();
        }

        private bool aplicaDocCoordinacion;

        private void HandleAplicaChangedDocCoordinacion(bool newValue)
        {
            aplicaDocCoordinacion = newValue;
            StateHasChanged();
        }

        private bool aplicaInformeLOS;

        private void HandleAplicaChangedInformeLOS(bool newValue)
        {
            aplicaInformeLOS = newValue;
            StateHasChanged();
        }

        private bool aplicaVisitaLOS;

        private void HandleAplicaChangedVisitaLOS(bool newValue)
        {
            aplicaInformeLOS = newValue;
            StateHasChanged();
        }

        private bool aplicaCertResiduos;

        private void HandleAplicaChangedCertResiduos(bool newValue)
        {
            aplicaCertResiduos = newValue;
            StateHasChanged();
        }


        private bool aplicaActaReplanteo;

        private void HandleAplicaChanged(bool newValue)
        {
            aplicaActaReplanteo = newValue;
            StateHasChanged();
        }

        private bool aplicaPlanoM2CAP;

        private void HandleAplicaChangedM2CAP(bool newValue)
        {
            aplicaPlanoM2CAP = newValue;
            StateHasChanged();
        }
        private bool aplicaCVE;

        private void HandleAplicaChangedCVE(bool newValue)
        {
            aplicaCVE = newValue;
            StateHasChanged();
        }

        private bool aplicaCalculoPLL;

        private async Task HandleAplicaChangedPLL(bool newValue)
        {
            aplicaCalculoPLL = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaPlanoPLL;

        private async Task HandleAplicaChangedPlanoPLL(bool newValue)
        {
            aplicaPlanoPLL = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaMem;

        private async Task HandleAplicaChangedMem(bool newValue)
        {
            aplicaMem = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaFoto;

        private async Task HandleAplicaChangedFoto(bool newValue)
        {
            aplicaFoto = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaProyecto;

        private async Task HandleAplicaChangedproyecto(bool newValue)
        {
            aplicaProyecto = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaPlanoCons;

        private async Task HandleAplicaChangedPlanoCons(bool newValue)
        {
            aplicaPlanoCons = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaAYTO;

        private async Task HandleAplicaChangedAYTO(bool newValue)
        {
            aplicaAYTO = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaDF;

        private async Task HandleAplicaChangedDF(bool newValue)
        {
            aplicaDF = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaPuesta;

        private async Task HandleAplicaChangedPuesta(bool newValue)
        {
            aplicaPuesta = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }

        private bool aplicaCFO;

        private async Task HandleAplicaChangedCFO(bool newValue)
        {
            aplicaCFO = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }


        private bool aplicaAsbuilt;

        private async Task HandleAplicaChangedAsBuilt(bool newValue)
        {
            aplicaAsbuilt = newValue;
            await InvokeAsync(StateHasChanged); // Asegura la actualizaci&oacute;n del estado
        }


        private void ShowComponent(string componentName)
        {
            selectedComponent = componentName;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                selectedId = id;
                await LoadApi();
            }
        }
        protected override async Task OnInitializedAsync()
        {
            await LoadApi();
            selectedComponent = &quot;Acceso Documentaci&oacute;n y Visita&quot;;

            aplicaActaReplanteo = data?.Value?.AplicaActaReplanteo ?? false;
            aplicaPlanoM2CAP = data?.Value?.AplicaPlanoM2CAP ?? false;
            aplicaCVE = data?.Value?.AplicaCVE ?? false;
            aplicaCalculoPLL = data?.Value?.AplicaCalculoPLL ?? false;
            aplicaPlanoPLL = data?.Value?.AplicaPlanoPLL ?? false;
            aplicaMem = data?.Value?.AplicaMemoriaRadioelectrico ?? false;
            aplicaFoto = data?.Value?.AplicaFotomontaje ?? false;
            aplicaProyecto = data?.Value?.AplicaProyecto ?? false;
            aplicaPlanoCons = data?.Value?.AplicaPlanoConstructivo ?? false;
            aplicaAYTO = data?.Value?.AplicaLegalizacionAYTO ?? false;
            aplicaDF = data?.Value?.AplicaDF ?? false;
            aplicaPuesta = data?.Value?.AplicaPuestaEnServicio ?? false;
            aplicaCFO = data?.Value?.AplicaCFO ?? false;
            aplicaAsbuilt = data?.Value?.AplicaPlanoASBuilt ?? false;
            aplicaVisitaReplanteo = data?.Value.AplicaVisitaReplanteo ?? false;
            aplicaVisitaMastil = data?.Value.AplicaVisitaMastil ?? false;
            aplicaVisitaTorre = data?.Value.AplicaVisitaTorre ?? false;
            aplicaCVEInformeTorre = data?.Value.AplicaCVETorre ?? false;
            aplicaVisitaDF = data?.Value.AplicaVisitaDF ?? false;
            aplicaFoto = data?.Value.AplicaFotoTexto ?? false;
            aplicaVisitaEMF = data?.Value.AplicaVisitaEMF ?? false;
            aplicaVisitaPS = data?.Value.AplicaVisitaPS ?? false;
            aplicaVisitaAsBuilt = data?.Value.AplicaVisitaAsbuilt ?? false;
            aplicaInformeAsBuilt = data?.Value.AplicaInformeAsBuilt ?? false;
            aplicaPPI = data?.Value.AplicaPPI ?? false;
            aplicaRecepcionObra = data?.Value.AplicaRecepcionObra ?? false;
            aplicaPTP = data?.Value.AplicaPTP ?? false;
            aplicaBoletin = data?.Value.AplicaBoletinElectrico ?? false;
            aplicaVisitaCSS = data?.Value.AplicaVisitaCSS ?? false;
            aplicaCoordinador = data?.Value.AplicaCoordinacion ?? false;
            aplicaDocCoordinacion = data?.Value.AplicaDocCoordinacion ?? false;
            aplicaInformeLOS = data?.Value.AplicaReplanteoLOS ?? false;
            aplicaVisitaLOS = data?.Value.AplicaVisitaLOS ?? false;
            aplicaCertResiduos = data?.Value.AplicaVisitaLOS ?? false;
        }


        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.Comentarios == null)
                        {
                            data.Value.Comentarios = new List&lt;E_Comentarios&gt;();
                        }

                        if (data.Value.Proyecto.HitosProyecto == null)
                        {
                            data.Value.Proyecto.HitosProyecto = new();
                        }

                        if (data.Value.DataActaReplanteos.Count == 0)
                        {
                            data.Value.DataActaReplanteos.Add(new());
                        }
                        if (data.Value.DataCalculoPLLs.Count == 0)
                        {
                            data.Value.DataCalculoPLLs.Add(new());

                        }
                        if (data.Value.DataCFOs.Count == 0)
                        {
                            data.Value.DataCFOs.Add(new());

                        }
                        if (data.Value.DataCoordinacions.Count == 0)
                        {
                            data.Value.DataCoordinacions.Add(new());

                        }
                        if (data.Value.DataCVEs.Count == 0)
                        {
                            data.Value.DataCVEs.Add(new());

                        }
                        if (data.Value.DataDFs.Count == 0)
                        {
                            data.Value.DataDFs.Add(new());

                        }
                        if (data.Value.DataFotomontajes.Count == 0)
                        {
                            data.Value.DataFotomontajes.Add(new());

                        }
                        if (data.Value.DataLegalizacionAYTOs.Count == 0)
                        {
                            data.Value.DataLegalizacionAYTOs.Add(new());

                        }
                        if (data.Value.DataMemoriaRadioelectricos.Count == 0)
                        {
                            data.Value.DataMemoriaRadioelectricos.Add(new());

                        }
                        if (data.Value.DataPlanoASBuilts.Count == 0)
                        {
                            data.Value.DataPlanoASBuilts.Add(new());

                        }
                        if (data.Value.DataPlanoConstructivos.Count == 0)
                        {
                            data.Value.DataPlanoConstructivos.Add(new());

                        }
                        if (data.Value.DataPlanoM2CAPs.Count == 0)
                        {
                            data.Value.DataPlanoM2CAPs.Add(new());

                        }
                        if (data.Value.DataPlanoPLLs.Count == 0)
                        {
                            data.Value.DataPlanoPLLs.Add(new());

                        }
                        if (data.Value.DataProyectos.Count == 0)
                        {
                            data.Value.DataProyectos.Add(new());

                        }
                        if (data.Value.DataPuestaEnServicios.Count == 0)
                        {
                            data.Value.DataPuestaEnServicios.Add(new());

                        }
                        if (data.Value.DataCVEsTorre.Count == 0)
                        {
                            data.Value.DataCVEsTorre.Add(new());

                        }

                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;HitoMemRadioelectrico&quot;, &quot;OnInitializedAsync&quot;, DateTime.UtcNow);

                throw;
            }
            
        }
    }
    `
  },
  {
    "ID": 75,
    "ServicesName": "Pedido",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/Pedido",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/pedido{id}&quot;
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Pedido&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        @if (data?.Value?.DataPedido != null)
        {
            &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                &lt;span class=&quot;w-full font-bold text-blue-400&quot;&gt;
                    Se han facturado &lt;span class=&quot;text-emerald-400&quot;&gt;@(data.Value.DataPedido.Facturas.Sum(c =&gt; c.DineroFactura).ToString(&quot;F2&quot;))&euro;&lt;/span&gt;
                    de &lt;span class=&quot;text-emerald-400&quot;&gt;@(data.Value.DataPedido.CantidadAFacturar.ToString(&quot;F2&quot;))&euro;&lt;/span&gt; totales &lt;br /&gt;
                    @if (data.Value.DataPedido.Facturas.Sum(c =&gt; c.DineroFactura) &lt; data.Value.DataPedido.CantidadAFacturar)
                    {
                        &lt;span&gt;Faltan &lt;span class=&quot;text-red-400&quot;&gt;@((data.Value.DataPedido.CantidadAFacturar - data.Value.DataPedido.Facturas.Sum(c =&gt; c.DineroFactura)).ToString(&quot;F2&quot;))&euro;&lt;/span&gt; por facturar&lt;/span&gt;
                    }
                    else
                    {
                        &lt;span class=&quot;text-emerald-400&quot;&gt;Se ha facturado la obra&lt;/span&gt;
                    }
                &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class=&quot;overflow-x-auto&quot;&gt;
                &lt;table class=&quot;min-w-full border-collapse border border-gray-300&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr class=&quot;bg-slate-100&quot;&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Fecha factura&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Trabajo facturado&lt;/th&gt;
                            &lt;th class=&quot;p-2 border&quot;&gt;Cantidad facturada (&euro;)&lt;/th&gt;

                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var Pedido in data.Value.DataPedido.Facturas)
                        {
                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@((Pedido.FechaFactura.ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(Pedido.TrabajoFacturado.ToString())&lt;/td&gt;
                        &lt;td class=&quot;border border-gray-300 px-4 py-2&quot;&gt;@(Pedido.DineroFactura.ToString())&lt;/td&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
        }

    @code {
        [Parameter] public string Hito { get; set; }
        Result&lt;E_Seguimiento&gt; data = new();
        [Parameter] public string id { get; set; }
        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data.Value.DataPedido == null)
                        {
                            data.Value.DataPedido = new();
                        }
                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;Pedido&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }
    }
    `
  },
  {
    "ID": 76,
    "ServicesName": "SeguimientoProyecto",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/SeguimientoProyecto",
    "ServicesDescription":`
    `,
    "Code": `
     @page &quot;/seguimientomovil/{id}&quot;
        @using Amazon.Runtime.Documents
        @using DocumentFormat.OpenXml.Office2010.Word
        @using DocumentFormat.OpenXml.Wordprocessing
        @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Helpers
        @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals
        @using SeguimientoMovilLogic.Extra.DataSeguimiento
        @using System.Reflection.Metadata
        @using System.Xml.Linq
        &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyecto)&quot;&gt;&lt;/AuthorizePage&gt;

        @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;*@
        @*MovilProyectosVerProyecto*@
        &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3&quot;&gt;
            &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Obras&lt;/h1&gt;
            &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;@(obras.Documents != null ? (obras.Documents.Count &gt; 0 ? $&quot;Aqu&iacute; se pueden ver todas las obras del proyecto {obras.Documents.First().Proyecto.nombre}&quot; : &quot;No hay obras en este proyecto&quot;) : &quot;Cargando obras...&quot;)&lt;/h2&gt;

            &lt;div class=&quot;w-full flex flex-wrap justify-between items-center&quot;&gt;
                &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                    @if (proyecto != null)
                    {
                        &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAddObra)&quot;&gt;
                    
                            &lt;button class=&quot;w-fit h-fit p-2 bg-blue-400 rounded flex flex-wrap items-center justify-center text-white&quot;
                                    @onclick=&quot;()=&gt; OpenModalObra(proyecto)&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    add
                                &lt;/span&gt;
                                A&ntilde;adir obra
                            &lt;/button&gt;
                        &lt;/AuthorizedContent&gt;
                    }

                    &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoExportartObra)&quot;&gt;
                    
                    &lt;a class=&quot;cursor-pointer p-2 rounded bg-blue-400 text-white&quot; href=&quot;api/SeguimientoObras/Export?Password=LPSSeguimientoObras2024&quot; target=&quot;_blank&quot; download @onclick=&quot;MostrarSnackbarCargando&quot;&gt;Exportar obras&lt;/a&gt;
                    &lt;/AuthorizedContent&gt;
                    &lt;input type=&quot;search&quot; placeholder=&quot;Buscar...&quot; class=&quot;p-2 text-sm rounded border border-slate-300&quot; @bind-value=&quot;searchSet&quot; /&gt;

                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;table class=&quot;min-w-full w-fit table-auto text-sm border border-collapse border-slate-300/50&quot;&gt;
                    @if (selected != null)
                    {

                        &lt;tr&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo propietario: &lt;/th&gt;

                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                @selected.Codigo1
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo operador: &lt;/th&gt;

                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                @selected.Codigo2
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Nombre: &lt;/th&gt;

                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                @selected.Nombre
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;&Uacute;ltimo comentario: &lt;/th&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 whitespace-normal break-words&quot;&gt;
                                @{
                                    var ultimoComentario = selected.Comentarios?.OrderByDescending(c =&gt; c.Fecha).FirstOrDefault();
                                }
                                @(ultimoComentario != null
                                                            ? $&quot;{ultimoComentario.Name}: {ultimoComentario.Comentario}&quot;
                                                            : &quot;Sin comentarios&quot;)
                            &lt;/td&gt;
                        &lt;/tr&gt;


                    }

                &lt;/table&gt;

            &lt;/div&gt;



            &lt;div class=&quot;w-full h-fit ScrollbarTop overflow-x-auto&quot;&gt;
                &lt;div class=&quot;w-full min-h-[500px] ScrollbarTop flex flex-wrap justify-between items-start&quot;&gt;
                    @if (obras.Documents != null)
                    {

                        if (obras.Documents.Count &gt; 0)
                        {
                            @*    &lt;div class=&quot;overflow-x-auto min-h-[500px] flex flex-col justify-between&quot;&gt; *@
                            &lt;table class=&quot;min-w-full table-auto border border-collapse border-slate-300/50&quot;&gt;
                                &lt;thead class=&quot;sticky top-0 bg-white z-10 shadow-md&quot;&gt;

                                    &lt;tr&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;C&oacute;digo propietario&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Codigo1)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Codigo1&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;C&oacute;digo operador&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Codigo2)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Codigo2&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;C&oacute;digo seguimiento&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.CodigoOtros)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;CodigoOtros&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot;
                                                    THValue=&quot;Estado&quot;
                                                    valuesFilter=&quot;obras.Documents
                                                    .SelectMany(x =&gt; x.Estado) // Extrae todas las listas de Estado
                                                    .Select(e =&gt; e.Estado) // Suponiendo que la propiedad relevante es Nombre
                                                    .Distinct() // Filtra valores &uacute;nicos
                                                    .ToList()&quot;
                                                    FiltersChanged=&quot;@((e) =&gt; { get.DataFilter[&quot;Estado&quot;] = e; InvokeAsync(StateHasChanged); })&quot;&gt;
                                        &lt;/THTableObras&gt;



                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;Nombre&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Nombre)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Nombre&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;Cliente&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Proyecto.cliente)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Cliente&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;Proyecto&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Proyecto.nombre)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Proyecto&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;Subproyecto&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Subproyecto)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Subproyecto&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;Localidad&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Municipio.Localidad)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Localidad&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;Contrata&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Contrata)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Contrata&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime&quot; THValue=&quot;Fecha asignaci&oacute;n de cliente&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.FechaAsignacionCliente)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;FechaAsignacionCliente&quot;] = e.Select(x=&gt; x.ToString()).ToList(); InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;string&quot; THValue=&quot;T&eacute;cnico cliente&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.TecnicoCliente)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;TecnicoCliente&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot; THValue=&quot;Fecha de visita realizada replanteo&quot;
                                                    valuesFilter=&quot;@(obras.Documents.Where(x=&gt; x.Visitas.Count &gt; 0 &amp;&amp; x.Visitas.Any(c=&gt; c.TiposDeVisita.Contains(&quot;Replanteo&quot;)))
                                                    .SelectMany(x=&gt; x.Visitas.Where(x=&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;))).Select(z =&gt; z.FechaRealVisita)
                                            .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c) .Append(null).ToList())&quot; FiltersChanged=&quot;@((e) =&gt; {
                                                                                get.DataFilter[&quot;FinVisita&quot;] = e.Select(x =&gt;
                                                                                x == null
                                                                                    ? &quot;Sin dato&quot;
                                                                                    : x is DateTime fecha
                                                                                        ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                                        : x.ToString()
                                                                            ).ToList();
                                                                            InvokeAsync(StateHasChanged);
                                        })&quot;&gt;&lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot; THValue=&quot;Fecha de entrega Acta de replanteo&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                    .Where(x =&gt; x.DataActaReplanteos.Count &gt; 0)
                                                    .Select(x =&gt; x.DataActaReplanteos.Last().FechaHito)
                                                    .GroupBy(c =&gt; new { c })
                                                    .Select(x =&gt; x.Key.c)
                                                    .Append(null) // &lt;-- Agregar expl&iacute;citamente un valor nulo
                                                    .ToList())&quot;
                                                                                        FiltersChanged=&quot;@((e) =&gt; {
                                                    get.DataFilter[&quot;FinActaReplanteo&quot;] = e.Select(x =&gt;
                                                        x == null
                                                            ? &quot;Sin dato&quot;
                                                            : x is DateTime fecha
                                                                ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                : x.ToString()
                                                    ).ToList();
                                                    InvokeAsync(StateHasChanged);
                                                })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot; THValue=&quot;Fecha de entrega Plano M2 CAP&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                            .Where(x =&gt; x.SolicitudPlanos.Count &gt; 0 &amp;&amp; x.SolicitudPlanos.Any(c =&gt; c.TipoTrabajo.Contains(&quot;M2/CAP&quot;)))
                                                            .SelectMany(x =&gt; x.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;M2/CAP&quot;)).Select(z =&gt; z.FechaHito))
                                                            .GroupBy(c =&gt; new { c })
                                                            .Select(x =&gt; x.Key.c)
                                                            .Append(null) // &lt;-- Agregar expl&iacute;citamente un valor nulo
                                                            .ToList())&quot;
                                                                                                FiltersChanged=&quot;@((e) =&gt; {
                                                            get.DataFilter[&quot;FinPlanoM2&quot;] = e.Select(x =&gt;
                                                                x == null
                                                                    ? &quot;Sin dato&quot;
                                                                    : x is DateTime fecha
                                                                        ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                        : x.ToString()
                                                            ).ToList();
                                                            InvokeAsync(StateHasChanged);
                                                        })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot; THValue=&quot;Fecha de visita Medidas EMF&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.Visitas.Any(c =&gt; c.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)))
                                                        .SelectMany(x =&gt; x.Visitas
                                                            .Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;))
                                                            .Select(z =&gt; z.FechaRealVisita)
                                                        )
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // &lt;-- Agregar expl&iacute;citamente un valor nulo
                                                        .ToList())&quot;
                                                                                        FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinVisitaEMF&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega CVE&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                                .Where(x =&gt; x.DataCVEs.Count &gt; 0)
                                                                .Select(x =&gt; x.DataCVEs.Last().FechaHito)
                                                                .GroupBy(c =&gt; new { c })
                                                                .Select(x =&gt; x.Key.c)
                                                                .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                                .ToList())&quot;
                                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                                get.DataFilter[&quot;FinCVE&quot;] = e.Select(x =&gt;
                                                                    x == null
                                                                        ? &quot;Sin dato&quot;
                                                                        : x is DateTime fecha
                                                                            ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                            : x.ToString()
                                                                ).ToList();
                                                                InvokeAsync(StateHasChanged);
                                                            })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                                                            THValue=&quot;Fecha de entrega C&aacute;lculo PLL&quot;
                                                                                            valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.SolicitudRadio.Count &gt; 0 &amp;&amp; x.SolicitudRadio.Any(c =&gt; c.TipoTrabajo.Contains(&quot;Simulaci&oacute;n PLL&quot;)))
                                                        .SelectMany(x =&gt; x.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Simulaci&oacute;n PLL&quot;)))
                                                        .Select(z =&gt; z.FechaHito)
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                        .ToList())&quot;
                                                                                            FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinCalculoPLL&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                            THValue=&quot;Fecha de entrega Plano PLL&quot;
                                                            valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.SolicitudPlanos.Count &gt; 0 &amp;&amp; x.SolicitudPlanos.Any(c =&gt; c.TipoTrabajo.Contains(&quot;Radioel&eacute;ctrico&quot;)))
                                                        .SelectMany(x =&gt; x.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Radioel&eacute;ctrico&quot;)))
                                                        .Select(z =&gt; z.FechaHito)
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                        .ToList())&quot;
                                                                                            FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinPlanoPLL&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                                                    THValue=&quot;Fecha de visita Medidas PS&quot;
                                                                                    valuesFilter=&quot;@(obras.Documents
                                                .Where(x =&gt; x.Visitas.Count &gt; 0 &amp;&amp; x.Visitas.Any(c =&gt; c.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                                                .SelectMany(x =&gt; x.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                                                .Select(z =&gt; z.FechaRealVisita)
                                                .GroupBy(c =&gt; new { c })
                                                .Select(x =&gt; x.Key.c)
                                                .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                get.DataFilter[&quot;FinVisitaPS&quot;] = e.Select(x =&gt;
                                                    x == null
                                                        ? &quot;Sin dato&quot;
                                                        : x is DateTime fecha
                                                            ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                            : x.ToString()
                                                ).ToList();
                                                InvokeAsync(StateHasChanged);
                                            })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                                                    THValue=&quot;Fecha de entrega memoria radioel&eacute;ctrico&quot;
                                                                                    valuesFilter=&quot;@(obras.Documents
                                                .Where(x =&gt; x.SolicitudRadio.Count &gt; 0 &amp;&amp; x.SolicitudRadio.Any(c =&gt; c.TipoTrabajo.Contains(&quot;Proyecto Radioel&eacute;ctrico&quot;)))
                                                .SelectMany(x =&gt; x.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Proyecto Radioel&eacute;ctrico&quot;)))
                                                .Select(z =&gt; z.FechaHito)
                                                .GroupBy(c =&gt; new { c })
                                                .Select(x =&gt; x.Key.c)
                                                .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                get.DataFilter[&quot;FinMemoriaRadio&quot;] = e.Select(x =&gt;
                                                    x == null
                                                        ? &quot;Sin dato&quot;
                                                        : x is DateTime fecha
                                                            ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                            : x.ToString()
                                                ).ToList();
                                                InvokeAsync(StateHasChanged);
            })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de visita de subida a torre&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                    .Where(x =&gt; x.Visitas.Count &gt; 0 &amp;&amp; x.Visitas.Any(c =&gt; c.TiposDeVisita.Contains(&quot;Subida Torre&quot;)))
                                                    .SelectMany(x =&gt; x.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)))
                                                    .Select(z =&gt; z.FechaRealVisita)
                                                    .GroupBy(c =&gt; new { c })
                                                    .Select(x =&gt; x.Key.c)
                                                    .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                    .ToList())&quot;
                                                                                            FiltersChanged=&quot;@((e) =&gt; {
                                                    get.DataFilter[&quot;FinVisitaTorre&quot;] = e.Select(x =&gt;
                                                        x == null
                                                            ? &quot;Sin dato&quot;
                                                            : x is DateTime fecha
                                                                ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                : x.ToString()
                                                    ).ToList();
                                                    InvokeAsync(StateHasChanged);
                                                })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega fotomontaje&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                .Where(x =&gt; x.SolicitudPlanos.Count &gt; 0 &amp;&amp; x.SolicitudPlanos.Any(c =&gt; c.TipoTrabajo.Contains(&quot;Fotomontaje&quot;)))
                                                .SelectMany(x =&gt; x.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Fotomontaje&quot;)))
                                                .Select(z =&gt; z.FechaHito)
                                                .GroupBy(c =&gt; new { c })
                                                .Select(x =&gt; x.Key.c)
                                                .Append(null) // Agrega expl&iacute;citamente un valor nulo para 'Sin dato'
                                                .ToList())&quot;
                                                                                FiltersChanged=&quot;@((e) =&gt; {
                                                get.DataFilter[&quot;FinFotomontaje&quot;] = e.Select(x =&gt;
                                                    x == null
                                                        ? &quot;Sin dato&quot;
                                                        : x is DateTime fecha
                                                            ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                            : x.ToString()
                                                ).ToList();
                                                InvokeAsync(StateHasChanged);
                                            })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega proyecto&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                            .Where(x =&gt; x.DataProyectos.Count &gt; 0)
                                                            .Select(x =&gt; x.DataProyectos.Last().FechaHito)
                                                            .GroupBy(c =&gt; new { c })
                                                            .Select(x =&gt; x.Key.c)
                                                            .Append(null) // Agregar expl&iacute;citamente un valor nulo para 'Sin dato'
                                                            .ToList())&quot;
                                                                                        FiltersChanged=&quot;@((e) =&gt; {
                                                            get.DataFilter[&quot;FinProyecto&quot;] = e.Select(x =&gt;
                                                                x == null
                                                                    ? &quot;Sin dato&quot;
                                                                    : x is DateTime fecha
                                                                        ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                        : x.ToString()
                                                            ).ToList();
                                                            InvokeAsync(StateHasChanged);
                                                        })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega plano constructivo&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                    .Where(x =&gt; x.SolicitudPlanos.Count &gt; 0 &amp;&amp; x.SolicitudPlanos.Any(c =&gt; c.TipoTrabajo.Contains(&quot;Constructivo&quot;)))
                                                    .SelectMany(x =&gt; x.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Constructivo&quot;)))
                                                    .Select(z =&gt; z.FechaHito)
                                                    .GroupBy(c =&gt; new { c })
                                                    .Select(x =&gt; x.Key.c)
                                                    .Append(null) 
                                                    .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                    get.DataFilter[&quot;FinPlanoConstructivo&quot;] = e.Select(x =&gt;
                                                        x == null
                                                            ? &quot;Sin dato&quot;
                                                            : x is DateTime fecha
                                                                ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                : x.ToString()
                                                    ).ToList();
                                                    InvokeAsync(StateHasChanged);
            })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de visita CSS&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                    .Where(x =&gt; x.Visitas.Count &gt; 0 &amp;&amp; x.Visitas.Any(c =&gt; c.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                                                    .SelectMany(x =&gt; x.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                                                    .Select(z =&gt; z.FechaRealVisita)
                                                    .GroupBy(c =&gt; new { c })
                                                    .Select(x =&gt; x.Key.c)
                                                    .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                    .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                    get.DataFilter[&quot;FinVisitaCSS&quot;] = e.Select(x =&gt;
                                                        x == null
                                                            ? &quot;Sin dato&quot;
                                                            : x is DateTime fecha
                                                                ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                : x.ToString()
                                                    ).ToList();
                                                    InvokeAsync(StateHasChanged);
                                                })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega legalizaci&oacute;n AYTO&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                    .Where(x =&gt; x.DataLegalizacionAYTOs.Count &gt; 0)
                                                    .Select(x =&gt; x.DataLegalizacionAYTOs.Last().FechaHito)
                                                    .GroupBy(c =&gt; new { c })
                                                    .Select(x =&gt; x.Key.c)
                                                    .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                    .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                    get.DataFilter[&quot;FinLegalizacionAYTO&quot;] = e.Select(x =&gt;
                                                        x == null
                                                            ? &quot;Sin dato&quot;
                                                            : x is DateTime fecha
                                                                ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                : x.ToString()
                                                    ).ToList();
                                                    InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras
                                                    T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de visita DF&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                .Where(x =&gt; x.Visitas.Count &gt; 0 &amp;&amp; x.Visitas.Any(c =&gt; c.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                                                .SelectMany(x =&gt; x.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                                                .Select(z =&gt; z.FechaRealVisita)
                                                .GroupBy(c =&gt; new { c })
                                                .Select(x =&gt; x.Key.c)
                                                .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                .ToList())&quot;
                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                get.DataFilter[&quot;FinVisitaDF&quot;] = e.Select(x =&gt;
                                                    x == null
                                                        ? &quot;Sin dato&quot;
                                                        : x is DateTime fecha
                                                            ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                            : x.ToString()
                                                ).ToList();
                                                InvokeAsync(StateHasChanged);
                                            })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega DF&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                            .Where(x =&gt; x.DataDFs.Count &gt; 0)
                                                            .Select(x =&gt; x.DataDFs.Last().FechaHito)
                                                            .GroupBy(c =&gt; new { c })
                                                            .Select(x =&gt; x.Key.c)
                                                            .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                            .ToList())&quot;
                                                                                            FiltersChanged=&quot;@((e) =&gt; {
                                                            get.DataFilter[&quot;FinDF&quot;] = e.Select(x =&gt;
                                                                x == null
                                                                    ? &quot;Sin dato&quot;
                                                                    : x is DateTime fecha
                                                                        ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                        : x.ToString()
                                                            ).ToList();
                                                            InvokeAsync(StateHasChanged);
                                                        })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega puesta en servicio&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.SolicitudRadio.Count &gt; 0 &amp;&amp; x.SolicitudRadio.Any(c =&gt; c.TipoTrabajo.Contains(&quot;PSC&quot;)))
                                                        .SelectMany(x =&gt; x.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;PSC&quot;)))
                                                        .Select(z =&gt; z.FechaHito)
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                        .ToList())&quot;
                                                                                        FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinPSC&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega CFO&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.DataCFOs.Count &gt; 0)
                                                        .Select(x =&gt; x.DataCFOs.Last().FechaHito)
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                        .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinCFO&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                        })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de visita ASBuilt&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.Visitas.Count &gt; 0 &amp;&amp; x.Visitas.Any(c =&gt; c.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                                                        .SelectMany(x =&gt; x.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                                                        .Select(z =&gt; z.FechaRealVisita)
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                        .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinVisitaASBuilt&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;DateTime?&quot;
                                                    THValue=&quot;Fecha de entrega plano AsBuilt&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                        .Where(x =&gt; x.SolicitudPlanos.Count &gt; 0 &amp;&amp; x.SolicitudPlanos.Any(c =&gt; c.TipoTrabajo.Contains(&quot;Constructivo&quot;)))
                                                        .SelectMany(x =&gt; x.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Constructivo&quot;)))
                                                        .Select(z =&gt; z.FechaHito)
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(null) // Agregar expl&iacute;citamente un valor nulo para &quot;Sin dato&quot;
                                                        .ToList())&quot;
                                                                                    FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;FinPlanoAsBuilt&quot;] = e.Select(x =&gt;
                                                            x == null
                                                                ? &quot;Sin dato&quot;
                                                                : x is DateTime fecha
                                                                    ? fecha.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                    : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;
                                        &lt;THTableObras T=&quot;string&quot;
                                                    THValue=&quot;N&ordm; de pedido&quot;
                                                    valuesFilter=&quot;@(obras.Documents
                                                        .Select(x =&gt; x.DataPedido.NumeroPedido)
                                                        .Where(numero =&gt; !string.IsNullOrEmpty(numero)) // Filtra valores nulos o vac&iacute;os
                                                        .GroupBy(c =&gt; new { c })
                                                        .Select(x =&gt; x.Key.c)
                                                        .Append(&quot;Sin dato&quot;) // Agregar expl&iacute;citamente &quot;Sin dato&quot; cuando no haya n&uacute;mero de pedido
                                                        .ToList())&quot;
                                                                                        FiltersChanged=&quot;@((e) =&gt; {
                                                        get.DataFilter[&quot;NumeroPedido&quot;] = e.Select(x =&gt;
                                                            string.IsNullOrEmpty(x?.ToString()) ? &quot;Sin dato&quot; : x.ToString()
                                                        ).ToList();
                                                        InvokeAsync(StateHasChanged);
                                                    })&quot;&gt;
                                        &lt;/THTableObras&gt;


                                        &lt;THTableObras T=&quot;float&quot; THValue=&quot;Dinero a facturar&quot;
                                                    valuesFilter=&quot;obras.Documents.Select(x=&gt; x.DataPedido.CantidadAFacturar)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;DineroPedido&quot;] = e.Select(x=&gt; x.ToString()).ToList(); InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        &lt;THTableObras T=&quot;float&quot; THValue=&quot;Dinero facturado&quot;
                                                    valuesFilter=&quot;obras.Documents.Select(x=&gt; x.DataPedido.DineroFacturado)
        .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;DineroFacturado&quot;] = e.Select(x=&gt; x.ToString()).ToList(); InvokeAsync(StateHasChanged);})&quot;&gt;&lt;/THTableObras&gt;

                                        @*  &lt;THTableObras T=&quot;float&quot; THValue=&quot;Dinero facturado&quot;&gt;&lt;/THTableObras&gt; *@
                                    &lt;/tr&gt;
                                &lt;/thead&gt;
                                &lt;tbody&gt;

                                    &lt;Virtualize Context=&quot;v&quot; Items=&quot;obras.Documents.Filter(get)&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                                &lt;div class=&quot;w-fit flex flex-wrap gap-2&quot;&gt;
                                                    &lt;a @onclick=&quot;@(async ()=&gt; {await _localStorage.RemoveItemAsync(&quot;seguimientomoviladd&quot;);})&quot; href=&quot;@(_user.Permissions.Contains(PermissionConstantsSeguimiento.EditSeguimiento) || _user.Roles.Contains(&quot;Admin&quot;) ? $&quot;/seguimientomovil/obra/{v.Id}&quot; : &quot;&quot;)&quot; class=&quot;p-2 text-blue-600 hover:underline&quot;&gt;
                                                        @v.Codigo1
                                                    &lt;/a&gt;
                                                    @if (selected != v)
                                                    {
                                                        &lt;button type=&quot;button&quot; class=&quot;rounded w-fit p-1 flex flex-wrap items-center justify-center bg-green-400 text-white&quot;
                                                                @onclick=&quot;@(()=&gt; FijarDatos(v))&quot;&gt;
                                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                                search
                                                            &lt;/span&gt;
                                                        &lt;/button&gt;
                                                    }
                                                    else
                                                    {
                                                        &lt;button type=&quot;button&quot; class=&quot;rounded w-fit p-1 flex flex-wrap items-center justify-center bg-red-400 text-white&quot;
                                                                @onclick=&quot;@(()=&gt; DesfijarDatos(v))&quot;&gt;
                                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                                close
                                                            &lt;/span&gt;
                                                        &lt;/button&gt;
                                                    }
                                                &lt;/div&gt;
                                            &lt;/td&gt;
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Codigo2
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.CodigoOtros
                                            &lt;/td&gt;
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Estado.Last().Estado
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Nombre
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Proyecto.cliente
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Proyecto.nombre
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Subproyecto
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Municipio.Localidad
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.Contrata
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @(v.FechaAsignacionCliente.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;))
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.TecnicoCliente
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaReplanteo)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasReplanteo = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)).ToList();
                                                    if (visitasReplanteo.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasReplanteo.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue
                                                                                            ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                                            : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            @* 	@if (v.Proyecto.HitosProyecto.Contains(&quot;Acta Replanteo&quot;))
                                        { *@
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaActaReplanteo)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    @if (v.DataActaReplanteos.Count &gt; 0)
                                                    {
                                                        var ultimaFechaHito = v.DataActaReplanteos.Last().FechaHito;

                                                        &lt;span&gt;
                                                            @(ultimaFechaHito.HasValue ? ultimaFechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            @* 	} *@
                                            @* @if (v.Proyecto.HitosProyecto.Contains(&quot;Plano M2 CAP&quot;))
                                        { *@
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaPlanoM2CAP)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var planosM2CAP = v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;M2/CAP&quot;)).ToList();

                                                    @if (planosM2CAP.Count &gt; 0)
                                                    {
                                                        var ultimoPlano = planosM2CAP.Last();
                                                        &lt;span&gt;
                                                            @(ultimoPlano.FechaHito.HasValue ? ultimoPlano.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            @* } *@

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaEMF)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasEMF = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)).ToList();
                                                    if (visitasEMF.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasEMF.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue
                                                                                            ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;)
                                                                                            : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaCVE)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var dataCVEs = v.DataCVEs.ToList();

                                                    @if (dataCVEs.Count &gt; 0)
                                                    {
                                                        var ultimaCVE = dataCVEs.Last();
                                                        &lt;span&gt;
                                                            @(ultimaCVE.FechaHito.HasValue ? ultimaCVE.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaCalculoPLL)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var solicitudesPLL = v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Simulaci&oacute;n PLL&quot;)).ToList();

                                                    @if (solicitudesPLL.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = solicitudesPLL.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaPlanoPLL)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var solicitudesPLL = v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;PLL&quot;)).ToList();

                                                    @if (solicitudesPLL.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = solicitudesPLL.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaPS)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasPS = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)).ToList();

                                                    @if (visitasPS.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasPS.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;

                                        @* 	@if (v.Proyecto.HitosProyecto.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;))
                                            {
                                            *@	&lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                    @if (!v.AplicaMemoriaRadioelectrico)
                                                    {
                                                        &lt;span&gt;NA&lt;/span&gt;
                                                    }
                                                    else
                                                    {
                                                        var solicitudesRadio = v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Proyecto Radioel&eacute;ctrico&quot;)).ToList();

                                                        @if (solicitudesRadio.Count &gt; 0)
                                                        {
                                                            var ultimaSolicitud = solicitudesRadio.Last();
                                                            &lt;span&gt;
                                                                @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                            &lt;/span&gt;
                                                        }
                                                    }
                                                &lt;/td&gt;
                                        @* 	} *@


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaTorre)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasTorre = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)).ToList();

                                                    @if (visitasTorre.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasTorre.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaFotomontaje)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var solicitudesFotomontaje = v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Fotomontaje&quot;)).ToList();

                                                    @if (solicitudesFotomontaje.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = solicitudesFotomontaje.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaProyecto)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var proyectos = v.DataProyectos.ToList();

                                                    @if (proyectos.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = proyectos.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;




                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaPlanoConstructivo)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var solicitudesConstructivo = v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Constructivo&quot;)).ToList();

                                                    @if (solicitudesConstructivo.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = solicitudesConstructivo.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaCSS)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasCSS = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)).ToList();

                                                    @if (visitasCSS.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasCSS.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;

                                            @* @if (v.Proyecto.HitosProyecto.Contains(&quot;Legalizaci&oacute;n AYTO&quot;))
                                            { *@
                                                &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                    @if (!v.AplicaLegalizacionAYTO)
                                                    {
                                                        &lt;span&gt;NA&lt;/span&gt;
                                                    }
                                                    else
                                                    {
                                                        var legalizacionAYTOs = v.DataLegalizacionAYTOs.ToList();

                                                        @if (legalizacionAYTOs.Count &gt; 0)
                                                        {
                                                            var ultimaLegalizacion = legalizacionAYTOs.Last();
                                                            &lt;span&gt;
                                                                @(ultimaLegalizacion.FechaHito.HasValue ? ultimaLegalizacion.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                            &lt;/span&gt;
                                                        }
                                                    }
                                                &lt;/td&gt;
                                        @* 	} *@



                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaDF)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasDF = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)).ToList();

                                                    @if (visitasDF.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasDF.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaDF)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var dataDFs = v.DataDFs.ToList();

                                                    @if (dataDFs.Count &gt; 0)
                                                    {
                                                        var ultimaDataDF = dataDFs.Last();
                                                        &lt;span&gt;
                                                            @(ultimaDataDF.FechaHito.HasValue ? ultimaDataDF.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaPuestaEnServicio)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var solicitudPSC = v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;PSC&quot;)).ToList();

                                                    @if (solicitudPSC.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = solicitudPSC.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaCFO)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var dataCFOs = v.DataCFOs.ToList();

                                                    @if (dataCFOs.Count &gt; 0)
                                                    {
                                                        var ultimaDataCFO = dataCFOs.Last();
                                                        &lt;span&gt;
                                                            @(ultimaDataCFO.FechaHito.HasValue ? ultimaDataCFO.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaVisitaAsbuilt)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var visitasAsbuilt = v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)).ToList();

                                                    @if (visitasAsbuilt.Count &gt; 0)
                                                    {
                                                        var ultimaVisita = visitasAsbuilt.Last();
                                                        &lt;span&gt;
                                                            @(ultimaVisita.FechaRealVisita.HasValue ? ultimaVisita.FechaRealVisita.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            @* 	@if (v.Proyecto.HitosProyecto.Contains(&quot;Plano ASBuilt&quot;))
                                        { *@
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @if (!v.AplicaPlanoASBuilt)
                                                {
                                                    &lt;span&gt;NA&lt;/span&gt;
                                                }
                                                else
                                                {
                                                    var solicitudAsbuilt = v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;AsBuilt&quot;)).ToList();

                                                    @if (solicitudAsbuilt.Count &gt; 0)
                                                    {
                                                        var ultimaSolicitud = solicitudAsbuilt.Last();
                                                        &lt;span&gt;
                                                            @(ultimaSolicitud.FechaHito.HasValue ? ultimaSolicitud.FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                                        &lt;/span&gt;
                                                    }
                                                }
                                            &lt;/td&gt;


                                            @* } *@
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.DataPedido.NumeroPedido
                                            &lt;/td&gt;
                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.DataPedido.CantidadAFacturar.ToString(&quot;F2&quot;) &euro;
                                            &lt;/td&gt;

                                            &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                                @v.DataPedido.DineroFacturado.ToString(&quot;F2&quot;) &euro;
                                            &lt;/td&gt;
                                        &lt;/tr&gt;
                                    &lt;/Virtualize&gt;
                                &lt;/tbody&gt;
                            &lt;/table&gt;

                            @*    &lt;/div&gt; *@

                            &lt;Paginator countAllDocuments=&quot;(int)obras.CountAllDocuments&quot; countPages=&quot;obras.PageCount&quot; filters=&quot;get&quot; ReloadData=&quot;()=&gt;LoadSeguimientos()&quot;&gt;

                            &lt;/Paginator&gt;
                        }


                    }
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        @code {
            [Parameter] public string id { get; set; }

            PaginatedResult&lt;E_Seguimiento&gt; obras = new();

            E_Proyecto? proyecto = null;
            E_Seguimiento? selected = null;

            string searchSet
            {
                get
                {
                    return get.Search;
                }
                set
                {
                    get.Search = value;

                    LoadSeguimientos();
                }
            }

            public void FijarDatos(E_Seguimiento seg)
            {
                selected = seg;

                InvokeAsync(StateHasChanged);
            }

            public void DesfijarDatos(E_Seguimiento des)
            {
                selected = null;

                InvokeAsync(StateHasChanged);
            }

            Dictionary&lt;Type, string&gt; tableData = new()
            {
                {typeof(DataActaReplanteo), &quot;Acta replanteo&quot; },
                {typeof(DataPlano), &quot;Plano&quot; },
                {typeof(DataCVE), &quot;CVE&quot; },
                {typeof(DataCalculoPLL), &quot;C&aacute;lculo PLL&quot; },
                {typeof(DataPlanoPLL), &quot;Plano PLL&quot; },
                {typeof(DataMemoriaRadioelectrico), &quot;Memoria radiol&eacute;ctrico&quot; },
                {typeof(DataFotomontaje), &quot;Fotomontaje&quot; },
                {typeof(DataProyecto), &quot;Proyecto&quot; },
                {typeof(DataPlanoConstructivo), &quot;Plano constructivo&quot; },
                {typeof(DataCoordinacion), &quot;Coordinaci&oacute;n&quot; },
                {typeof(DataLegalizacionAYTO), &quot;Legalizaci&oacute;n AYTO&quot; },
                {typeof(DataDF), &quot;DF&quot; },
                {typeof(DataPuestaEnServicio), &quot;Puesta en servicio&quot; },
                {typeof(DataCFO), &quot;CFO&quot; },
                {typeof(DataASBuilt), &quot;ASBuilt&quot; },
                {typeof(DataPlanoASBuilt), &quot;Plano ASBuilt&quot; },
            };

            public GetPaginatedSeguimientoMovilDTORequest get = new()
                {
                    PageNumber = 1,
                    PageSize = 120,
                    Search = &quot;&quot;,
                    DataFilter = new()
                };

            protected override async Task OnParametersSetAsync()
            {
                obras = new();
                _main.BackgroundImage = &quot;&quot;;
                await LoadSeguimientos();
            }

            private void MostrarSnackbarCargando()

            {
                _snackbar.InsertSnackbar(new($&quot;Cargando...&quot;, &quot;pending&quot;, 5000, &quot;bg-blue-400&quot;, &quot;text-white&quot;));

            }



            //Obra
            public E_Proyecto proyectoAddObra = null;

            void OpenModalObra(E_Proyecto proyecto)
            {
                proyectoAddObra = proyecto;

                var modal = _modal.ShowModal(typeof(AddObra), new Dictionary&lt;string, object&gt;
                {
                    {nameof(AddObra.Proyecto), proyectoAddObra}
                }, FixedWidth: 80);

                modal.OnCloseModal += CloseModalObra;
            }

            async void CloseModalObra(bool success)
            {

                if (success)
                {
                    await LoadSeguimientos();
                }
                proyectoAddObra = null;
                await InvokeAsync(StateHasChanged);
            }

            async Task LoadSeguimientos()
            {
                try
                {
                _main.IsLoading = true;

                        var pageSize = _main.QueryParameters(_nav)[&quot;pageSize&quot;];
                        var pageNumber = _main.QueryParameters(_nav)[&quot;pageNumber&quot;];

                        if (!string.IsNullOrEmpty(pageSize) &amp;&amp; !string.IsNullOrEmpty(pageNumber))
                        {
                            get.PageNumber = int.Parse(pageNumber);
                            get.PageSize = int.Parse(pageSize);
                        }


                        get.IdProyecto = id;

                        obras = await _mongoContext.GetPaginatedSeguimientoMovil(get);

                        List&lt;E_Visitas&gt; visitasRemove = new List&lt;E_Visitas&gt;();

                        foreach (var v in obras.Documents)
                        {
                            foreach (var visita in v.Visitas)
                            {
                                if (visita.TiposDeVisita.Count == 0)
                                {
                                    visitasRemove.Add(visita);
                                }
                            }

                            foreach (var z in visitasRemove)
                            {
                                v.Visitas.Remove(z);
                            }

                            visitasRemove.Clear();

                            if (v.Proyecto.HitosProyecto == null)
                            {
                                v.Proyecto.HitosProyecto = new();
                            }
                        }

                        proyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; x.Id == id).FirstOrDefaultAsync();

                        await InvokeAsync(StateHasChanged);
                        _main.IsLoading = false;
                }
                catch (Exception e)
                {
                    
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;SeguimientoProyecto&quot;, &quot;LoadSeguimientos&quot;, DateTime.UtcNow);

                    throw;
                }
                
            }
        }
    `
  },  
  {
    "ID": 77,
    "ServicesName": "SeguimientoProyecto2.0",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/SeguimientoProyecto2.0",
    "ServicesDescription":`
    `,
    "Code": `
    @* @page &quot;/seguimientomovil/{id}&quot;  *@
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Helpers
    @using LPSGrupo.Components.Areas.MovilF.SeguimientoMovil.Modals

    &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3&quot;&gt;
        &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Obras&lt;/h1&gt;
        &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;@(obras.Documents != null ? (obras.Documents.Count &gt; 0 ? $&quot;Aqu&iacute; se pueden ver todas las obras del proyecto {obras.Documents.First().Proyecto.nombre}&quot; : &quot;No hay obras en este proyecto&quot;) : &quot;Cargando obras...&quot;)&lt;/h2&gt;

        &lt;div class=&quot;w-full flex flex-wrap justify-between items-center&quot;&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                @if (proyecto != null)

                {
                    &lt;button class=&quot;w-fit h-fit p-2 bg-blue-400 rounded flex flex-wrap items-center justify-center text-white&quot;
                            @onclick=&quot;()=&gt; OpenModalObra(proyecto)&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            add
                        &lt;/span&gt;
                        A&ntilde;adir obra
                    &lt;/button&gt;
                }

                &lt;a class=&quot;cursor-pointer p-2 rounded bg-blue-400 text-white&quot; href=&quot;api/SeguimientoObras/Export?Password=LPSSeguimientoObras2024&quot; target=&quot;_blank&quot; download @onclick=&quot;MostrarSnackbarCargando&quot;&gt;Exportar obras&lt;/a&gt;


            &lt;/div&gt;

        &lt;/div&gt;

        &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
            &lt;table class=&quot;min-w-full w-fit table-auto text-sm border border-collapse border-slate-300/50&quot;&gt;
                @if (selected != null)
                {

                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo propietario: &lt;/th&gt;

                        &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                            @selected.Codigo1
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;C&oacute;digo operador: &lt;/th&gt;

                        &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                            @selected.Codigo2
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50&quot;&gt;Nombre: &lt;/th&gt;

                        &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                            @selected.Nombre
                        &lt;/td&gt;
                    &lt;/tr&gt;
                }

            &lt;/table&gt;

        &lt;/div&gt;

        &lt;div class=&quot;w-full h-fit ScrollbarTop overflow-x-auto&quot;&gt;
            &lt;div class=&quot;w-full min-h-[500px] ScrollbarTop flex flex-wrap justify-between items-start&quot;&gt;
                @if (obras.Documents != null)
                {
                    &lt;table class=&quot;table-auto overflow-x-auto w-full h-fit text-sm rounded border border-slate-300/50&quot;&gt;
                        &lt;thead&gt;
                            &lt;tr&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    C&oacute;digo propietario
                                    
                                    &lt;THTableObras T=&quot;string&quot; THValue=&quot;C&oacute;digo propietario&quot; valuesFilter=&quot;obras.Documents.Select(x=&gt; x.Codigo1)
    .GroupBy(c=&gt; new {c}).Select(x=&gt; x.Key.c).ToList()&quot; FiltersChanged=&quot;@((e) =&gt; {get.DataFilter[&quot;Codigo1&quot;] = e; InvokeAsync(StateHasChanged);})&quot;&gt;
                                    &lt;/THTableObras&gt;
                                    
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    C&oacute;digo operador
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    C&oacute;digo seguimiento
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px] max-w-[300px]&quot;&gt;
                                    Nombre
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Cliente
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Proyecto
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Subproyecto
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Localidad
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Contrata
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha asignaci&oacute;n de cliente
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    T&eacute;cnico cliente
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita realizada replanteo
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega Acta de replanteo
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega Plano M2 CAP
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita Medidas EMF
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega CVE
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega c&aacute;lculo pll
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega plano pll
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita Medidas PS
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega memoria radioel&eacute;ctrico
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita de subida a torre
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega fotomontaje
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega proyecto
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega plano constructivo
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita CSS
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega legalizaci&oacute;n AYTO
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita DF
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega DF
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega puesta en servicio
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega CFO
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de visita ASBuilt
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Fecha de entrega plano AsBuilt
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    N&ordm; de pedido
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Dinero a facturar
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 text-sm border border-slate-300/50 min-w-[150px]&quot;&gt;
                                    Dinero facturado
                                &lt;/th&gt;
                            &lt;/tr&gt;
                        &lt;/thead&gt;

                        &lt;tbody&gt;

                            @foreach (var v in obras.Documents)

                            {
                                &lt;tr&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                        &lt;div class=&quot;w-fit flex flex-wrap gap-2&quot;&gt;
                                            &lt;a @onclick=&quot;@(async ()=&gt; {await _localStorage.RemoveItemAsync(&quot;seguimientomoviladd&quot;);})&quot; href=&quot;@(_user.Permissions.Contains(PermissionConstantsSeguimiento.EditSeguimiento) || _user.Roles.Contains(&quot;Admin&quot;) ? $&quot;/seguimientomovil/obra/{v.Id}&quot; : &quot;&quot;)&quot; class=&quot;p-2 text-blue-600 hover:underline&quot;&gt;
                                                @v.Codigo1
                                            &lt;/a&gt;
                                            @if (selected != v)
                                            {
                                                &lt;button type=&quot;button&quot; class=&quot;rounded w-fit p-1 flex flex-wrap items-center justify-center bg-green-400 text-white&quot;
                                                        @onclick=&quot;@(()=&gt; FijarDatos(v))&quot;&gt;
                                                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                        search
                                                    &lt;/span&gt;
                                                &lt;/button&gt;
                                            }
                                            else
                                            {
                                                &lt;button type=&quot;button&quot; class=&quot;rounded w-fit p-1 flex flex-wrap items-center justify-center bg-red-400 text-white&quot;
                                                        @onclick=&quot;@(()=&gt; DesfijarDatos(v))&quot;&gt;
                                                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                        close
                                                    &lt;/span&gt;
                                                &lt;/button&gt;
                                            }
                                        &lt;/div&gt;
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Codigo2
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.CodigoOtros
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Nombre
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Proyecto.cliente
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Proyecto.nombre
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Subproyecto
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Municipio.Localidad
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.Contrata
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @(v.FechaAsignacionCliente.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;))
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.TecnicoCliente
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)).Count() &gt; 0)
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                    &lt;/td&gt;

                                @* 	@if (v.Proyecto.HitosProyecto.Contains(&quot;Acta Replanteo&quot;))
                                    { *@
                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                            @if (v.AplicaActaReplanteo &amp;&amp; v.DataActaReplanteos.Count &gt; 0)
                                                @(v.DataActaReplanteos.Last().FechaHito != null ? v.DataActaReplanteos.Last().FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                        
                                        &lt;/td&gt;

                                @* 	} *@
                                    @* @if (v.Proyecto.HitosProyecto.Contains(&quot;Plano M2 CAP&quot;))
                                    { *@
                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;M2/CAP&quot;)).Count() &gt; 0)
                                            @(v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;M2/CAP&quot;)).Last().FechaHito != null ? v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;M2/CAP&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)

                                        &lt;/td&gt;

                                    @* } *@

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)).Count() &gt; 0)
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.AplicaCVE &amp;&amp; v.DataCVEs.Count &gt; 0)
                                            @(v.DataCVEs.Last().FechaHito != null ? v.DataCVEs.Last().FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                
                                    &lt;/td&gt;


                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Simulaci&oacute;n PLL&quot;)).Count() &gt; 0)
                                            @(v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Simulaci&oacute;n PLL&quot;)).Last().FechaHito != null ? v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Simulaci&oacute;n PLL&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)





                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Radioel&eacute;ctrico&quot;)).Count() &gt; 0)
                                            @(v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Radioel&eacute;ctrico&quot;)).Last().FechaHito != null ? v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Radioel&eacute;ctrico&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)).Count() &gt; 0)
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                    &lt;/td&gt;

                                    @if (v.Proyecto.HitosProyecto.Contains(&quot;Memoria Radioel&eacute;ctrico&quot;))
                                    {

                                        &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                            @if (v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Proyecto Radioel&eacute;ctrico&quot;)).Count() &gt; 0)
                                                @(v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Proyecto Radioel&eacute;ctrico&quot;)).Last().FechaHito != null ? v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Proyecto Radioel&eacute;ctrico&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                        &lt;/td&gt;

                                    }
                                    else
                                    {
                                        &lt;td class=&quot;p-2 border border-slate-300/50 text-center font-bold&quot;&gt;
                                            NA
                                        &lt;/td&gt;
                                    }

                                    &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)).Count() &gt; 0)
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)



                                    &lt;/td&gt;


                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Fotomontaje&quot;)).Count() &gt; 0)
                                            @(v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Fotomontaje&quot;)).Last().FechaHito != null ? v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Fotomontaje&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)

                                    &lt;/td&gt;



                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.AplicaProyecto &amp;&amp; v.DataProyectos.Count &gt; 0)
                                            @(v.DataProyectos.Last().FechaHito != null ? v.DataProyectos.Last().FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                
                                    &lt;/td&gt;



                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Constructivo&quot;)).Count() &gt; 0)
                                            @(v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Constructivo&quot;)).Last().FechaHito != null ? v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;Constructivo&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)).Count() &gt; 0)
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)



                                    &lt;/td&gt;

                                
                                    @if (v.Proyecto.HitosProyecto.Contains(&quot;Legalizaci&oacute;n AYTO&quot;))
                                    {

                                        &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                            @if (v.AplicaLegalizacionAYTO &amp;&amp; v.DataLegalizacionAYTOs.Count &gt; 0)
                                                @(v.DataLegalizacionAYTOs.Last().FechaHito != null ? v.DataLegalizacionAYTOs.Last().FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                        
                                        &lt;/td&gt;

                                    }
                                    else
                                    {
                                        &lt;td class=&quot;p-2 border border-slate-300/50 text-center font-bold&quot;&gt;
                                            NA
                                        &lt;/td&gt;
                                    }

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)).Count() &gt; 0)
                                        {
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                        }
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.AplicaDF &amp;&amp; v.DataDFs.Count &gt; 0)
                                            @(v.DataDFs.Last().FechaHito != null ? v.DataDFs.Last().FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                        
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;PSC&quot;)).Count() &gt; 0)
                                            @(v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;PSC&quot;)).Last().FechaHito != null ? v.SolicitudRadio.Where(x =&gt; x.TipoTrabajo.Contains(&quot;PSC&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.AplicaCFO &amp;&amp; v.DataCFOs.Count &gt; 0)
                                            @(v.DataCFOs.Last().FechaHito != null ? v.DataCFOs.Last().FechaHito.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                        
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)).Count() &gt; 0)
                                        {
                                            @(v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)).Last().FechaRealVisita != null ? v.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)).Last().FechaRealVisita!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)
                                        }
                                    &lt;/td&gt;

                                @* 	@if (v.Proyecto.HitosProyecto.Contains(&quot;Plano ASBuilt&quot;))
                                    { *@
                                        &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @if (v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;AsBuilt&quot;)).Count() &gt; 0)
                                            @(v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;AsBuilt&quot;)).Last().FechaHito != null ? v.SolicitudPlanos.Where(x =&gt; x.TipoTrabajo.Contains(&quot;AsBuilt&quot;)).Last().FechaHito!.Value.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) : &quot;&quot;)


                                        &lt;/td&gt;

                                    @* } *@
                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.DataPedido.NumeroPedido
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.DataPedido.CantidadAFacturar.ToString(&quot;F2&quot;) &euro;
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 text-center&quot;&gt;
                                        @v.DataPedido.DineroFacturado.ToString(&quot;F2&quot;) &euro;
                                    &lt;/td&gt;
                                &lt;/tr&gt;

                            }
                        &lt;/tbody&gt;
                    &lt;/table&gt;

                    &lt;Paginator countAllDocuments=&quot;(int)obras.CountAllDocuments&quot; countPages=&quot;obras.PageCount&quot; filters=&quot;get&quot; ReloadData=&quot;()=&gt;LoadSeguimientos()&quot;&gt;

                    &lt;/Paginator&gt;

                }

            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    @code {

        [Parameter] public string id { get; set; }

        PaginatedResult&lt;E_Seguimiento&gt; obras = new();

        E_Proyecto? proyecto = null;
        E_Seguimiento? selected = null;

        public void FijarDatos(E_Seguimiento seg)
        {
            selected = seg;

            InvokeAsync(StateHasChanged);
        }


        public void DesfijarDatos(E_Seguimiento des)
        {
            selected = null;

            InvokeAsync(StateHasChanged);
        }

        public GetPaginatedSeguimientoMovilDTORequest get = new()
            {
                PageNumber = 1,
                PageSize = 10,
                Search = &quot;&quot;,
                DataFilter = new()
            };

        protected override async Task OnParametersSetAsync()
        {
            obras = new();
            _main.BackgroundImage = &quot;&quot;;
            await LoadSeguimientos();
        }

        private void MostrarSnackbarCargando()

        {
            _snackbar.InsertSnackbar(new($&quot;Cargando...&quot;, &quot;pending&quot;, 5000, &quot;bg-blue-400&quot;, &quot;text-white&quot;));

        }


        //Obra
        public E_Proyecto proyectoAddObra = null;

        void OpenModalObra(E_Proyecto proyecto)
        {
            proyectoAddObra = proyecto;

            var modal = _modal.ShowModal(typeof(AddObra), new Dictionary&lt;string, object&gt;
            {
                {nameof(AddObra.Proyecto), proyectoAddObra}
            }, FixedWidth: 80);

            modal.OnCloseModal += CloseModalObra;
        }

        async void CloseModalObra(bool success)
        {

            if (success)
            {
                await LoadSeguimientos();
            }
            proyectoAddObra = null;
            await InvokeAsync(StateHasChanged);
        }

        async Task LoadSeguimientos()
        {

            _main.IsLoading = true;

            var pageSize = _main.QueryParameters(_nav)[&quot;pageSize&quot;];
            var pageNumber = _main.QueryParameters(_nav)[&quot;pageNumber&quot;];

            if (!string.IsNullOrEmpty(pageSize) &amp;&amp; !string.IsNullOrEmpty(pageNumber))
            {
                get.PageNumber = int.Parse(pageNumber);
                get.PageSize = int.Parse(pageSize);
            }

            get.IdProyecto = id;

            obras = await _mongoContext.GetPaginatedSeguimientoMovil(get);

            List&lt;E_Visitas&gt; visitasRemove = new List&lt;E_Visitas&gt;();

            foreach (var v in obras.Documents)
            {
                foreach (var visita in v.Visitas)
                {
                    if (visita.TiposDeVisita.Count == 0)
                    {
                        visitasRemove.Add(visita);
                    }
                }

                foreach (var z in visitasRemove)
                {
                    v.Visitas.Remove(z);
                }

                visitasRemove.Clear();

                if (v.Proyecto.HitosProyecto == null)
                {
                    v.Proyecto.HitosProyecto = new();
                }
            }

            proyecto = await _mongoContext.Data&lt;E_Proyecto&gt;(DatabaseIdentifiers.Movil).Find(x =&gt; x.Id == id).FirstOrDefaultAsync();

            await InvokeAsync(StateHasChanged);

            _main.IsLoading = false;
        }
    }
    `
  },
  {
    "ID": 78,
    "ServicesName": "VisitaAsbuilt",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaAsbuilt",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/visitaAsbuilt{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoAsBuiltVisitaAsbuilt*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltVisitaAsbuilt)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos Asbuilt&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltVisitaAsbuiltAddSoliciVisita)&quot;&gt;
        
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoAsBuiltVisitaAsbuiltAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaVisitaAsbuilt
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var Asbuilt in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={Asbuilt.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(Asbuilt)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, Asbuilt.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Asbuilt.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (Asbuilt.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(Asbuilt.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(Asbuilt.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }
        &lt;/div&gt;

    }

    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaAsBuilt { get; set; }

        private E_Visitas visitaSeleccionada;

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaAsbuilt = !data.Value.AplicaVisitaAsbuilt;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaAsbuilt = !data.Value.AplicaVisitaAsbuilt;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaAsBuilt.InvokeAsync(data.Value.AplicaVisitaAsbuilt);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaAsbuilt = !data.Value.AplicaVisitaAsbuilt;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaAsbuilt&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
            _main.IsLoading = true;

                    data = await _mongoContext.GetOneSeguimientoMovil(id);


                    await InvokeAsync(StateHasChanged);

                    _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaAsbuilt&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 79,
    "ServicesName": "VisitaCSS",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaCSS",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/VisitaCSS{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoCoordinacionVisitaCoordinacion*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionVisitaCoordinacion)&quot;&gt;&lt;/AuthorizePage&gt;
    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos CSS&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionVisitaCoordinacionAddSoliciVisita)&quot;&gt;
            
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoCoordinacionVisitaCoordinacionAplica)&quot;&gt;
            
            &lt;Checkbox Checked=data.Value.AplicaVisitaCSS
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var CSS in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita CSS&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={CSS.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(CSS)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;

                            &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, CSS.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((CSS.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (CSS.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;

                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(CSS.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(CSS.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }
        &lt;/div&gt;
    }

    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaCSS { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }
        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaCSS = !data.Value.AplicaVisitaCSS;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaCSS = !data.Value.AplicaVisitaCSS;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaCSS.InvokeAsync(data.Value.AplicaVisitaCSS);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaCSS = !data.Value.AplicaVisitaCSS;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaCSS&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);


                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaCSS&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 80,
    "ServicesName": "VisitaDF",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaDF",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/VisitaDF&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoDireccionObraVisitaDF*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraVisitaDF)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)) *@)
    {

        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos DF&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraVisitaDFAddVisitaDF)&quot;&gt;
    
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoDireccionObraVisitaDFAplica)&quot;&gt;
    
            &lt;Checkbox Checked=data.Value.AplicaVisitaDF
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var DF in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita DF&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={DF.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(DF)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;

                            &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((DF.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((DF.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, DF.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((DF.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (DF.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(DF.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(DF.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }
        &lt;/div&gt;

    }
    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaDF { get; set; }

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaDF = !data.Value.AplicaVisitaDF;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaDF = !data.Value.AplicaVisitaDF;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaDF.InvokeAsync(data.Value.AplicaVisitaDF);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaDF = !data.Value.AplicaVisitaDF;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaDF&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        [Parameter] public string id { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);


                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaDF&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },  
  {
    "ID": 81,
    "ServicesName": "VisitaLOS",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaLOS",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/VisitaLOS{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoReplanteoLOSVisitaLOS*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOSVisitaLOS)&quot;&gt;&lt;/AuthorizePage&gt;
    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos LOS&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOSVisitaLOSAddSoliciVisita)&quot;&gt;
            
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoLOSVisitaLOSAplica)&quot;&gt;
            
            &lt;Checkbox Checked=data.Value.AplicaVisitaLOS
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var replanteo in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita LOS&quot;)))
                    {
                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={replanteo.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(replanteo)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, replanteo.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (replanteo.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(replanteo.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(replanteo.Estados.Last().Nombre)
                            &lt;/td&gt;

                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;



            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }


        &lt;/div&gt;
    }

    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }

        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaLOS { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaLOS = !data.Value.AplicaVisitaLOS;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaLOS = !data.Value.AplicaVisitaLOS;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaLOS.InvokeAsync(data.Value.AplicaVisitaLOS);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaLOS = !data.Value.AplicaVisitaLOS;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaLOS&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        if (data?.Value?.Visitas != null)
                        {
                            Visit = data.Value.Visitas;
                        }


                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaLOS&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 82,
    "ServicesName": "VisitaMastil",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaMastil",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/visitaMastil{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoCVEMastilVisitaMastil*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastil)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Asbuilt&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos M&aacute;stil&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastilVisitaMastilAddSoliciVisitaMastil)&quot;&gt;
            
                &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
                class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVEMastilVisitaMastilAplica)&quot;&gt;
            
                &lt;Checkbox Checked=data.Value.AplicaVisitaMastil
                        ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                        Message=&quot;Aplica&quot;&gt;
                &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var Mastil in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Visita Mastil&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={Mastil.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(Mastil)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;

                            &lt;td class=&quot;p-3 border&quot;&gt;@((Mastil.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Mastil.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Mastil.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Mastil.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Mastil.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, Mastil.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((Mastil.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (Mastil.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(Mastil.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(Mastil.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }
        &lt;/div&gt;

    }

    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaMastil { get; set; }

        private E_Visitas visitaSeleccionada;

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaMastil = !data.Value.AplicaVisitaMastil;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaMastil = !data.Value.AplicaVisitaMastil;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaMastil.InvokeAsync(data.Value.AplicaVisitaMastil);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaMastil = !data.Value.AplicaVisitaMastil;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaMastil&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);


                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaMastil&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 83,
    "ServicesName": "VisitaMedidasEMF",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaMedidasEMF",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/visitaMedidasEMF{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoRadioelectricoVisitaEMF*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoVisitaEMF)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null@*  &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos Medidas EMF&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoVisitaEMFAddSoliciVisita)&quot;&gt;
        
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            
        &lt;/AuthorizedContent&gt;

            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoVisitaEMFAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaVisitaEMF
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;

                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var EMF in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas EMF&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={EMF.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(EMF)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;
                            

                            &lt;/td&gt;

                            &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, EMF.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((EMF.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (EMF.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(EMF.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(EMF.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }
        &lt;/div&gt;

    }

    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaEMF { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;


        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaEMF = !data.Value.AplicaVisitaEMF;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaEMF = !data.Value.AplicaVisitaEMF;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaEMF.InvokeAsync(data.Value.AplicaVisitaEMF);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaEMF = !data.Value.AplicaVisitaEMF;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaMedidasEMF&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }



        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);


                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaMedidasEMF&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 84,
    "ServicesName": "VisitaMedidasPS",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaMedidasPS",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/visitaMedidasPS{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoRadioelectricoPuestaEnServicioVisitaPSC*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPuestaEnServicioVisitaPSC)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos Medidas PSC&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPuestaEnServicioVisitaPSCAddSolicitudVisita)&quot;&gt;
        
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoRadioelectricoPuestaEnServicioVisitaPSCAplica)&quot;&gt;
        
            &lt;Checkbox Checked=data.Value.AplicaVisitaPS
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var MedidasPS in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Medidas PS&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={MedidasPS.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(MedidasPS)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;

                            &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, MedidasPS.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((MedidasPS.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (MedidasPS.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(MedidasPS.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(MedidasPS.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }

        &lt;/div&gt;
    }	
    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }
        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaPS { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaPS = !data.Value.AplicaVisitaPS;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaPS = !data.Value.AplicaVisitaPS;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaPS.InvokeAsync(data.Value.AplicaVisitaPS);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaPS = !data.Value.AplicaVisitaPS;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaMedidasPS&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }


        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);

                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaMedidasPS&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },  
  {
    "ID": 85,
    "ServicesName": "VisitaReplanteo",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaReplanteo",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/VisitaReplanteo{id}&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteo)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)) *@)
    {
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos replanteo&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoAddSoliciVisita)&quot;&gt;
            
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoReplanteoVistaReplanteoAplica)&quot;&gt;
            
                &lt;Checkbox Checked=data.Value.AplicaVisitaReplanteo
                ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                Message=&quot;Aplica&quot;&gt;
                &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;

        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var replanteo in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Replanteo&quot;)))
                    {
                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={replanteo.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(replanteo)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, replanteo.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((replanteo.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (replanteo.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;
                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(replanteo.Estados.Last().Index)) text-white text-sm&quot;&gt;
                            
                                @(replanteo.Estados.Last().Nombre)
                            &lt;/td&gt;

                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;



            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }


        &lt;/div&gt;
    }

    @code {
        [Parameter] public string Hito { get; set; }
        List&lt;string&gt; fechasReplanteo = new();
        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }

        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaRep { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaReplanteo = !data.Value.AplicaVisitaReplanteo;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaReplanteo = !data.Value.AplicaVisitaReplanteo;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaRep.InvokeAsync(data.Value.AplicaVisitaReplanteo);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaReplanteo = !data.Value.AplicaVisitaReplanteo;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaReplanteo&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

                
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }

        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();

        
            }
        }

        async Task LoadApi()
        {
            _main.IsLoading = true;

            data = await _mongoContext.GetOneSeguimientoMovil(id);

            if (data?.Value?.Visitas != null)
            {
                Visit = data.Value.Visitas;
            }

            await InvokeAsync(StateHasChanged);

            _main.IsLoading = false;
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 86,
    "ServicesName": "VisitaSubidaTorre",
    "ServicesRoute": "Components/Areas/MovilF/SeguimientoMovil/VisitaSubidaTorre",
    "ServicesDescription":`
    `,
    "Code": `
    @page &quot;/visitaTorre{id}&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;SeguimientoMovil.Supervisor&quot;})&quot; /&gt;
    MovilProyectosVerProyectoConstructivoCVETorreVisitaTorre*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorreVisitaTorre)&quot;&gt;&lt;/AuthorizePage&gt;

    @if (data?.Value?.Visitas != null @* &amp;&amp; data.Value.Visitas.Any(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)) *@)
    {
        
        &lt;div class=&quot;rounded-md shadow-custom mt-5&quot;&gt;
            &lt;div class=&quot;text-container&quot;&gt;
                &lt;h1 class=&quot;w-full text-3xl font-bold text-center text-blue-400&quot;&gt;Visita y accesos Subida Torre&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;flex mt-4&quot;&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorreVisitaTorreAddSoliciVisitaTorre)&quot;&gt;
    
            &lt;a href=&quot;@($&quot;visitasmovil/visitas/add?codigo={data.Value.CodigoLPS}&quot;)&quot; target=&quot;_blank&quot;
            class=&quot;w-fit rounded bg-blue-400 text-white p-2 flex flex-wrap place-items-center gap-3 mr-4&quot;&gt;A&ntilde;adir solicitud visita&lt;/a&gt;
            &lt;/AuthorizedContent&gt;
            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilProyectosVerProyectoConstructivoCVETorreVisitaTorreAplica)&quot;&gt;
    
            &lt;Checkbox Checked=data.Value.AplicaVisitaTorre
                    ChangeCheck=&quot;async () =&gt; await ToggleAplica()&quot;
                    Message=&quot;Aplica&quot;&gt;
            &lt;/Checkbox&gt;
            &lt;/AuthorizedContent&gt;
        &lt;/div&gt;
        &lt;div class=&quot;overflow-x-auto mt-4&quot;&gt;
            &lt;table class=&quot;w-full border border-slate-300/50 rounded-lg text-sm&quot;&gt;
                &lt;thead class=&quot;bg-slate-100&quot;&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Acciones&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de solicitud de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Autorizado&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de inicio de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de fin de acceso&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de planificaci&oacute;n&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;T&eacute;cnicos asignados&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Fecha de visita&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Facturable&lt;/th&gt;
                        &lt;th class=&quot;p-2 border&quot;&gt;Estado&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var SubidaTorre in data.Value.Visitas.Where(x =&gt; x.TiposDeVisita.Contains(&quot;Subida Torre&quot;)))
                    {

                        &lt;tr class=&quot;hover:bg-slate-50 text-center&quot;&gt;
                            &lt;td class=&quot;p-3 border text-center&quot;&gt;
                                &lt;div class=&quot;flex space-x-2&quot;&gt;
                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        {

                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={SubidaTorre.Id}&quot;);
                                                        })&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            edit
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                    &lt;button class=&quot;p-1 rounded bg-blue-400 text-white&quot; @onclick=&quot;() =&gt; SelectVisita(SubidaTorre)&quot;&gt;
                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                            comment
                                        &lt;/span&gt;
                                    &lt;/button&gt;

                                &lt;/div&gt;


                            &lt;/td&gt;

                            &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.FechaSolicitado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.Autorizado ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.FechaInicioAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.AccesoDocumentacion?.FechaFinAutorizado?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.FechaEstimadaVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((string.Join(&quot;, &quot;, SubidaTorre.AsignadoA?.Select(a =&gt; $&quot;{a.Name} {a.LastName}&quot;) ?? Array.Empty&lt;string&gt;()) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;@((SubidaTorre.FechaRealVisita?.ToLocalTime().ToString(&quot;dd/MM/yyyy&quot;) ?? &quot;NA&quot;).ToString())&lt;/td&gt;
                            &lt;td class=&quot;p-3 border&quot;&gt;
                                @if (SubidaTorre.Facturable)
                                {
                                    &lt;span class=&quot;text-green-600 font-bold&quot;&gt;S&iacute;&lt;/span&gt;
                                }
                                else
                                {
                                    &lt;span class=&quot;text-red-600 font-bold&quot;&gt;No&lt;/span&gt;
                                }
                            &lt;/td&gt;

                            &lt;td class=&quot;w-fit h-fit p-1 rounded @(ColorEstados(SubidaTorre.Estados.Last().Index)) text-white text-sm&quot;&gt;
                                @(SubidaTorre.Estados.Last().Nombre)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;

            @if (visitaSeleccionada != null &amp;&amp; visitaSeleccionada.Comentarios?.Any() == true)
            {
                &lt;div class=&quot;w-full p-2 flex flex-wrap gap-2&quot;&gt;
                    &lt;span class=&quot;w-full text-blue-400&quot;&gt;Comentario de la visita seleccionada&lt;/span&gt;

                    @foreach (var v in visitaSeleccionada.Comentarios)
                    {
                        &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                            &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                &lt;/div&gt;
                                @v.Name
                            &lt;/div&gt;
                            &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly&gt;&lt;/InputTextArea&gt;
                        &lt;/div&gt;
                    }
                &lt;/div&gt;
            }
        &lt;/div&gt;

    }
    @code {
        [Parameter] public string Hito { get; set; }

        Result&lt;E_Seguimiento&gt; data = new();

        [Parameter] public List&lt;E_Visitas&gt; Visit { get; set; }

        [Parameter] public string id { get; set; }

        [Parameter] public EventCallback&lt;bool&gt; OnAplicaChangedVisitaTorre { get; set; }

        // Variable para almacenar la visita seleccionada
        private E_Visitas visitaSeleccionada;

        private async Task ToggleAplica()
        {
            try
            {
                // Cambiar el estado localmente
                data.Value.AplicaVisitaTorre = !data.Value.AplicaVisitaTorre;

                // Guardar el cambio en la base de datos
                var response = await _mongoContext.EditSeguimientoMovil(data.Value);

                if (!response.IsSuccess)
                {
                    // Revertir el cambio local si la operaci&oacute;n falla
                    data.Value.AplicaVisitaTorre = !data.Value.AplicaVisitaTorre;
                }
                else
                {
                    // Notificar al componente padre del cambio
                    await OnAplicaChangedVisitaTorre.InvokeAsync(data.Value.AplicaVisitaTorre);
                }
            }
            catch (Exception e)
            {
                data.Value.AplicaVisitaTorre = !data.Value.AplicaVisitaTorre;
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaSubidaTorre&quot;, &quot;ToggleAplica&quot;, DateTime.UtcNow);

            
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        // M&eacute;todo para seleccionar la visita
        void SelectVisita(E_Visitas visita)
        {
            visitaSeleccionada = visita;
        }


        protected override async Task OnParametersSetAsync()
        {
            if (!string.IsNullOrEmpty(id))
            {
                // Cargar los datos usando el ID recibido
                await LoadApi();
            }
        }

        async Task LoadApi()
        {
            try
            {
                _main.IsLoading = true;

                        data = await _mongoContext.GetOneSeguimientoMovil(id);


                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitaSubidaTorre&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        int selectedVisita = 0;

        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };
    }
    `
  },
  {
    "ID": 87,
    "ServicesName": "CalendarioDays",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Calendario/Components/CalendarioDays",
    "ServicesDescription":``,
    "Code":`
    @if (Festivos.Any(x =&gt; new DateTime(x.DiaFestivo.Year, x.DiaFestivo.Month, x.DiaFestivo.Day) == new DateTime(DayCheck.Year, DayCheck.Month, DayCheck.Day)
    &amp;&amp; x.UserEmail.ToLower() == User.Email.ToLower()))
    {
        &lt;div class=&quot;w-full h-full flex flex-wrap items-center justify-center bg-red-400/50&quot;&gt;
            &lt;select class=&quot;w-[50%] h-fit p-2 rounded border border-slate-300/50&quot; value=&quot;@(Festivos
    .First(x =&gt; new DateTime(x.DiaFestivo.Year, x.DiaFestivo.Month, x.DiaFestivo.Day) == new DateTime(DayCheck.Year, DayCheck.Month, DayCheck.Day) &amp;&amp; x.UserEmail.ToLower() == User.Email.ToLower())
    .AusenciaFestivos)&quot;
                    @onchange=&quot;e=&gt; ChangeFestivo.InvokeAsync((e, Festivos.First(x =&gt; new DateTime(x.DiaFestivo.Year, x.DiaFestivo.Month, x.DiaFestivo.Day) == new DateTime(DayCheck.Year, DayCheck.Month, DayCheck.Day) &amp;&amp; x.UserEmail.ToLower() == User.Email.ToLower()).Id))&quot;&gt;
                &lt;option value=&quot;&quot;&gt; ---- &lt;/option&gt;

                &lt;option value=&quot;@(TiposAusenciaFestivos.Festivo.ToString())&quot;&gt;@(TiposAusenciaFestivos.Festivo.ToString())&lt;/option&gt;
                &lt;option value=&quot;@(TiposAusenciaFestivos.Vacaciones.ToString())&quot;&gt;@(TiposAusenciaFestivos.Vacaciones.ToString())&lt;/option&gt;
                &lt;option value=&quot;@(TiposAusenciaFestivos.Cursos.ToString())&quot;&gt;@(TiposAusenciaFestivos.Cursos.ToString())&lt;/option&gt;
                &lt;option value=&quot;@(TiposAusenciaFestivos.ReconocimientoMedico.ToString())&quot;&gt;@(TiposAusenciaFestivos.ReconocimientoMedico.ToString().Replace(&quot;_&quot;, &quot; &quot;))&lt;/option&gt;
                &lt;option value=&quot;@(TiposAusenciaFestivos.Otros.ToString())&quot;&gt;@(TiposAusenciaFestivos.Otros.ToString())&lt;/option&gt;
            &lt;/select&gt;
        &lt;/div&gt;
    }
    else if (Visitas.Where(x =&gt; x.FechaEstimadaVisita != null).Any(x =&gt; new DateTime(x.FechaEstimadaVisita.Value.Year, x.FechaEstimadaVisita.Value.Month, x.FechaEstimadaVisita.Value.Day) == new DateTime(DayCheck.Year, DayCheck.Month, DayCheck.Day) &amp;&amp; x.AsignadoA.Any(c =&gt; c.Email.ToLower() == User.Email.ToLower())))
    {
        &lt;div class=&quot;w-full min-h-full h-fit flex flex-wrap items-center justify-center text-black&quot;&gt;
            @foreach (var v in Visitas.Where(x =&gt; x.FechaEstimadaVisita != null &amp;&amp; new DateTime(x.FechaEstimadaVisita.Value.Year, x.FechaEstimadaVisita.Value.Month, x.FechaEstimadaVisita.Value.Day) == new DateTime(DayCheck.Year, DayCheck.Month, DayCheck.Day) &amp;&amp; x.AsignadoA.Any(c =&gt; c.Email.ToLower() == User.Email.ToLower())))
            {
                if (v.Emplazamiento != null)
                {
                    if (v.Emplazamiento.Propietario != null &amp;&amp; v.Emplazamiento.Localidad != null)
                    {
                        &lt;div class=&quot;w-full h-fit text-center p-2&quot;&gt;
                            @v.Emplazamiento.Codigo - @v.Emplazamiento.Propietario.Nombre &lt;br /&gt; @v.Emplazamiento.Localidad.Localidad

                            @if (Visitas.IndexOf(v) != Visitas.Count - 1)
                            {
                                &lt;br /&gt; &lt;br /&gt; &lt;hr class=&quot;h-[2px] text-black bg-black w-full&quot;&gt;
                            }
                        &lt;/div&gt;
                    }
                }
                else
                {
                    &lt;div class=&quot;w-full h-fit text-center p-2&quot;&gt;
                        No hay emplazamiento asignado a&uacute;n
                    &lt;/div&gt;
                }
            }
        &lt;/div&gt;
    }
    else
    {
        &lt;div class=&quot;w-full h-full relative bg-green-400/50 p-2&quot;&gt;
            &lt;button class=&quot;absolute top-[5px] right-[5px] w-[10%] aspect-square rounded bg-slate-100 text-black shadow-md&quot;
                    @onclick=&quot;()=&gt; AddFestivo.InvokeAsync((DayCheck, User.Email))&quot;&gt;
                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                    add
                &lt;/span&gt;
            &lt;/button&gt;
        &lt;/div&gt;
    }

    @code {
        [Parameter] public List&lt;E_Festivos&gt; Festivos { get; set; }
        [Parameter] public List&lt;E_Visitas&gt; Visitas { get; set; }
        [Parameter] public VisitasLogic.UserDTO User { get; set; }
        [Parameter] public DateTime DayCheck { get; set; }
        [Parameter] public EventCallback&lt;(DateTime, string)&gt; AddFestivo { get; set; }
        [Parameter] public EventCallback&lt;(ChangeEventArgs, string)&gt; ChangeFestivo { get; set; }
    }
    `
  },
  {
    "ID": 88,
    "ServicesName": "CalendarioPage",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Calendario/CalendarioPage",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil/calendario&quot;
    @using LPSGrupo.Components.Areas.MovilF.Visitas.Calendario.Components
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasCalendario)&quot;&gt;&lt;/AuthorizePage&gt;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;Visitas.AccesoDocumentacion&quot;,&quot;Visitas.Ingeniero&quot;,&quot;Visitas.Tecnico&quot;,
    &quot;Visitas.Supervisor&quot;})&quot; /&gt;*@


    &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3&quot;&gt;
        &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Calendario&lt;/h1&gt;
        &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;Calendario para manejar los festivos, vacaciones, bajas y asignaciones&lt;/h2&gt;

        &lt;div class=&quot;w-full flex flex-wrap justify-between items-center&quot;&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;span class=&quot;text-blue-400 text-lg&quot;&gt;A&ntilde;o:&lt;/span&gt;
                &lt;input type=&quot;number&quot; placeholder=&quot;A&ntilde;o&quot; class=&quot;rounded p-2 border border-slate-300/50&quot; @bind-value=&quot;BindYear&quot; /&gt;

                &lt;span class=&quot;text-blue-400 text-lg&quot;&gt;Semana:&lt;/span&gt;
                &lt;input type=&quot;number&quot; max=&quot;52&quot; placeholder=&quot;Semana&quot; class=&quot;rounded p-2 border border-slate-300/50&quot; @bind-value=&quot;BindWeek&quot; /&gt;
            &lt;/div&gt;

            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full grid grid-cols-6&quot;&gt;
            &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50&quot;&gt;
                Usuarios
            &lt;/div&gt;

            &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50&quot;&gt;
                Lunes - @(monday.ToString(&quot;dd/MM/yyyy&quot;))
            &lt;/div&gt;

            &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50&quot;&gt;
                Martes - @(monday.AddDays(1).ToString(&quot;dd/MM/yyyy&quot;))
            &lt;/div&gt;

            &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50&quot;&gt;
                Mi&eacute;rcoles - @(monday.AddDays(2).ToString(&quot;dd/MM/yyyy&quot;))
            &lt;/div&gt;

            &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50&quot;&gt;
                Jueves - @(monday.AddDays(3).ToString(&quot;dd/MM/yyyy&quot;))
            &lt;/div&gt;

            &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50&quot;&gt;
                Viernes - @(monday.AddDays(4).ToString(&quot;dd/MM/yyyy&quot;))
            &lt;/div&gt;
            @if (usersSee != null &amp;&amp; visitas.Documents != null &amp;&amp; festivos.Documents != null)
            {
                foreach (var v in usersSee.OrderBy(x =&gt; x.Name))
                {
                    &lt;div class=&quot;p-2 col-span-1 text-center border border-slate-300/50 flex flex-wrap items-center gap-3&quot;&gt;
                        &lt;div class=&quot;h-[35px] aspect-square rounded-full&quot;
                            style=&quot;background-size: cover; background-image: url(@(v.ProfilePic))&quot;&gt;
                        &lt;/div&gt;

                        &lt;a class=&quot;underline underline-offset-4 hover:text-blue-600&quot; href=&quot;mailto:@(v.Email.ToLower())&quot; title=&quot;Enviar un correo a @($&quot;{v.Name} {v.LastName}&quot;)&quot;&gt;@($&quot;{v.Name} {v.LastName}&quot;)&lt;/a&gt;
                    &lt;/div&gt;

                    &lt;div class=&quot;relative col-span-1 text-center border border-slate-300/50 flex flex-wrap items-center justify-center&quot;&gt;
                        &lt;CalendarDays DayCheck=&quot;monday&quot; Festivos=&quot;festivos.Documents&quot; Visitas=&quot;visitas.Documents&quot; User=&quot;v&quot;
                                    AddFestivo=&quot;AddFestivo&quot; ChangeFestivo=&quot;ChangeFestivo&quot;&gt;&lt;/CalendarDays&gt;
                    &lt;/div&gt;

                    &lt;div class=&quot;relative col-span-1 text-center border border-slate-300/50 flex flex-wrap items-center justify-center&quot;&gt;
                        &lt;CalendarDays DayCheck=&quot;monday.AddDays(1)&quot; Festivos=&quot;festivos.Documents&quot; Visitas=&quot;visitas.Documents&quot; User=&quot;v&quot;
                                    AddFestivo=&quot;AddFestivo&quot; ChangeFestivo=&quot;ChangeFestivo&quot;&gt;&lt;/CalendarDays&gt;

                    &lt;/div&gt;

                    &lt;div class=&quot;relative col-span-1 text-center border border-slate-300/50 flex flex-wrap items-center justify-center&quot;&gt;
                        &lt;CalendarDays DayCheck=&quot;monday.AddDays(2)&quot; Festivos=&quot;festivos.Documents&quot; Visitas=&quot;visitas.Documents&quot; User=&quot;v&quot;
                                    AddFestivo=&quot;AddFestivo&quot; ChangeFestivo=&quot;ChangeFestivo&quot;&gt;&lt;/CalendarDays&gt;
                    &lt;/div&gt;

                    &lt;div class=&quot;relative col-span-1 text-center border border-slate-300/50 flex flex-wrap items-center justify-center&quot;&gt;
                        &lt;CalendarDays DayCheck=&quot;monday.AddDays(3)&quot; Festivos=&quot;festivos.Documents&quot; Visitas=&quot;visitas.Documents&quot; User=&quot;v&quot;
                                    AddFestivo=&quot;AddFestivo&quot; ChangeFestivo=&quot;ChangeFestivo&quot;&gt;&lt;/CalendarDays&gt;

                    &lt;/div&gt;

                    &lt;div class=&quot;relative col-span-1 text-center border border-slate-300/50 flex flex-wrap items-center justify-center&quot;&gt;
                        &lt;CalendarDays DayCheck=&quot;monday.AddDays(4)&quot; Festivos=&quot;festivos.Documents&quot; Visitas=&quot;visitas.Documents&quot; User=&quot;v&quot;
                                    AddFestivo=&quot;AddFestivo&quot; ChangeFestivo=&quot;ChangeFestivo&quot;&gt;&lt;/CalendarDays&gt;
                    &lt;/div&gt;
                }
            }
        &lt;/div&gt;
    &lt;/div&gt;

    @code {
        GetPaginatedFestivosDTORequest getFestivos = new GetPaginatedFestivosDTORequest()
            {
                DateRangeSearch = new(DateTime.Now, DateTime.Now.AddDays(7)),
                Search = &quot;&quot;,
                PageNumber = 1,
                PageSize = 100000000
            };

        GetPaginatedVisitasDTORequest getVisitas = new GetPaginatedVisitasDTORequest()
            {
                DateRangeSearch = new(DateTime.Now, DateTime.Now.AddDays(7)),
                PageSize = 1000000,
                PageNumber = 1,
                Search = &quot;&quot;
            };

        public List&lt;VisitasLogic.EditUserDTORequest&gt; usersSee { get; set; } = new();
        public PaginatedResult&lt;E_Visitas&gt; visitas { get; set; } = new();
        public PaginatedResult&lt;E_Festivos&gt; festivos { get; set; } = new();

        /* --------------------------------------------------------------------------------- */

        int selectedSemana { get; set; } = ((int)Math.Ceiling((decimal)(DateTime.Now.DayOfYear / 7))) + 1;
        int dataSelectedSemana =&gt; selectedSemana - 1;
        int ThisWeek = (int)Math.Ceiling((decimal)(DateTime.Now.DayOfYear / 7));

        int yearSelected { get; set; } = DateTime.Now.Year;

        int BindYear
        {
            get
            {
                return yearSelected;
            }
            set
            {
                yearSelected = value;
                LoadDataDays();
            }
        }

        int BindWeek
        {
            get
            {
                return selectedSemana;
            }
            set
            {
                selectedSemana = value;
                LoadDataDays();
            }
        }

        DateTime monday = DateTime.Now;

        protected override async Task OnInitializedAsync()
        {

            _main.BackgroundImage = &quot;&quot;; 
            await LoadDataDays();
        }

        async Task LoadDataDays()
        {
            try
            {
                _main.IsLoading = true;

                        await Task.Delay(100);

                        var weekSelected = dataSelectedSemana - ThisWeek;

                        monday = DateTime.Now.AddDays(weekSelected * 7);

                        while (monday.DayOfWeek != DayOfWeek.Monday)
                        {
                            monday = monday.AddDays(-1);
                        }

                        monday = new DateTime(yearSelected, monday.Month, monday.Day, 0, 0, 0);

                        getVisitas.DateRangeSearch = new(monday, monday.AddDays(5));
                        getFestivos.DateRangeSearch = new(monday, monday.AddDays(5));

                        await GetUsers();
                        await GetVisitas();
                        await GetFestivos();

                        await InvokeAsync(StateHasChanged);

                        await Task.Delay(200);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;CalendarioPage&quot;, &quot;LoadDataDays&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        async Task GetUsers()
        {
            usersSee = await _mongoUsers.Users
            .Find(x =&gt; new List&lt;string&gt;() { &quot;Visitas.Ingeniero&quot;, &quot;Visitas.Tecnico&quot;, &quot;Visitas.Supervisor&quot; }.Any(c =&gt; x.Roles.Any(d =&gt; d.Name.ToLower() == c.ToLower())))
            .As&lt;VisitasLogic.EditUserDTORequest&gt;().ToListAsync();
        }

        async Task GetVisitas()
        {
            visitas = await _mongoContext.GetPaginatedVisitas(getVisitas);
        }

        async Task GetFestivos()
        {

            festivos = await _mongoContext.GetPaginatedFestivos(getFestivos);

            // festivos.Documents.ForEach(x =&gt;
            // {
            //     x.DiaFestivo = x.DiaFestivo.AddDays(1);
            // });
        }

        async Task AddFestivo((DateTime date, string email) value)
        {
            try
            {
                    _main.IsLoading = true;

                            var festivo = new E_Festivos()
                                {
                                    DiaFestivo = value.date,
                                    AusenciaFestivos = TiposAusenciaFestivos.Festivo,
                                    UserEmail = value.email
                                };

                            await _mongoContext.AddFestivos(festivo);

                            await GetFestivos();

                            await InvokeAsync(StateHasChanged);

                            _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;CalendarioPage&quot;, &quot;AddFestivo&quot;, DateTime.UtcNow);

                throw;
            }
        
        }

        async Task ChangeFestivo((ChangeEventArgs e, string id) value)
        {
            try
            {
                _main.IsLoading = true;
                        if (value.e.Value == null)
                        {
                            await _mongoContext.DeleteFestivo(value.id);
                        }
                        else if (string.IsNullOrEmpty(value.e.Value.ToString()))
                        {
                            await _mongoContext.DeleteFestivo(value.id);
                        }
                        else
                        {
                            var festivo = festivos.Documents.First(x =&gt; x.Id == value.id);

                            festivo.AusenciaFestivos = (TiposAusenciaFestivos)Enum.Parse(typeof(TiposAusenciaFestivos), (value.e.Value.ToString()));

                            await _mongoContext.EditFestivos(festivo);
                        }

                        await GetFestivos();

                        await InvokeAsync(StateHasChanged);

                        _main.IsLoading = false;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;CalendarioPage&quot;, &quot;ChangeFestivo&quot;, DateTime.UtcNow);

                throw;
            }
        
        }
    }
    `
  },
  {
    "ID": 89,
    "ServicesName": "AddEmplazamientosPage",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Emplazamientos/AddEmplazamientosPage",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil/emplazamientos/add&quot;
    @* &lt;AuthorizePage Roles=&quot;@(new(){&quot;Visitas.AccesoDocumentacion&quot;,&quot;Visitas.Ingeniero&quot;,&quot;Visitas.Tecnico&quot;,
    &quot;Visitas.Supervisor&quot;})&quot; /&gt; *@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasEmplazamientos)&quot;&gt;&lt;/AuthorizePage&gt;
    @*MovilVisitasEmplazamientosAddEmplazamientos*@

    &lt;form class=&quot;w-full grid grid-cols-12 min-h-[calc(100dvh_-_55px)] gap-3 p-3&quot;
        onkeydown=&quot;return event.key != 'Enter';&quot;
        @onchange=&quot;_disconnection.SaveStatus&quot;
        @onsubmit=&quot;SaveAsync&quot;&gt;

        &lt;!-- Mapa --&gt;
        &lt;div id=&quot;map&quot; class=&quot;col-span-6 min-h-[400px] h-full rounded shadow-md bg-gray-100 border border-slate-300&quot; style=&quot;transition: none;&quot;&gt;
        &lt;/div&gt;

        &lt;!-- Formulario --&gt;
        @if (baseData != null)
        {
            &lt;div class=&quot;col-span-6 grid grid-cols-12 gap-3 h-full&quot;&gt;

                &lt;!-- Header del formulario --&gt;
                &lt;div class=&quot;col-span-12 rounded shadow-md border border-slate-300/50 p-4&quot;&gt;
                    &lt;h2 class=&quot;text-lg font-semibold text-blue-500&quot;&gt;
                        @(_main.QueryParameters(_nav)[&quot;id&quot;] == null ? &quot;A&ntilde;adir emplazamiento&quot; : &quot;Editar emplazamiento&quot;)
                    &lt;/h2&gt;
                &lt;/div&gt;

                &lt;!-- Campos del formulario --&gt;
                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;C&oacute;digo&lt;/label&gt;
                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind=&quot;add.Codigo&quot; required /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;Propietario&lt;/label&gt;
                    &lt;select class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind=&quot;add.PropietarioId&quot;&gt;
                        &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                        @foreach (var v in baseData.Clientes)
                        {
                            &lt;option value=&quot;@v.Id&quot;&gt;@v.Nombre&lt;/option&gt;
                        }
                    &lt;/select&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;Nombre del emplazamiento&lt;/label&gt;
                    &lt;input type=&quot;text&quot; class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind=&quot;add.Nombre&quot; required /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;Localidad&lt;/label&gt;
                    &lt;MudAutocomplete T=&quot;E_Localidades&quot; Class=&quot;w-full rounded border border-slate-300&quot;
                                    Clearable
                                    OnClearButtonClick='() =&gt; add.Localidad = null'
                                    Variant=&quot;Variant.Outlined&quot; Value=&quot;add.Localidad&quot;
                                    ValueChanged=&quot;(e) =&gt; {add.Localidad = e;}&quot;
                                    SearchFunc=&quot;(s) =&gt; ReloadProvinciasData(s)&quot;
                                    ToStringFunc=&quot;e =&gt; e == null ? null : e.Localidad&quot;&gt;
                    &lt;/MudAutocomplete&gt;
                &lt;/div&gt;

                &lt;!-- Coordenadas --&gt;
                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;Latitud&lt;/label&gt;
                    &lt;InputNumber TValue=&quot;double&quot; class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind-Value=&quot;LatitudeSet&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;Longitud&lt;/label&gt;
                    &lt;InputNumber TValue=&quot;double&quot; class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind-Value=&quot;LongitudSet&quot; /&gt;
                &lt;/div&gt;

                &lt;!-- Operadores --&gt;
                &lt;div class=&quot;col-span-12 rounded shadow-md border border-slate-300/50 p-3&quot;&gt;
                    &lt;label class=&quot;block text-gray-600 text-sm font-medium mb-1&quot;&gt;Operadores&lt;/label&gt;
                    &lt;select class=&quot;w-full rounded border border-slate-300 p-2&quot; @bind=&quot;SelectedOperador&quot;&gt;
                        &lt;option value=&quot;&quot;&gt;----&lt;/option&gt;
                        @foreach (var v in baseData.Operadores.Where(x =&gt; !add.Operadores.Select(c =&gt; c.Operador).Contains(x)))
                        {
                            &lt;option value=&quot;@v.Nombre&quot;&gt;@v.Nombre&lt;/option&gt;
                        }
                    &lt;/select&gt;

                    &lt;!-- Lista de operadores --&gt;
                    &lt;div class=&quot;mt-3&quot;&gt;
                        @foreach (var v in add.Operadores)
                        {
                            &lt;div class=&quot;grid grid-cols-12 p-2 rounded border border-slate-300/50 gap-3 items-center&quot;&gt;
                                &lt;span class=&quot;col-span-3 text-blue-500 font-medium&quot;&gt;@v.Operador.Nombre&lt;/span&gt;
                                &lt;input type=&quot;text&quot; class=&quot;col-span-8 rounded border border-slate-300 p-2&quot;
                                    placeholder=&quot;@($&quot;Introduce el c&oacute;digo para {v.Operador.Nombre}&quot;) &quot;
                                    @bind-value=&quot;v.Codigo&quot; required/&gt;
                                &lt;button type=&quot;button&quot; class=&quot;col-span-1 bg-red-500 text-white p-2 rounded hover:bg-red-600&quot;
                                        @onclick=&quot;() =&gt; add.Operadores.Remove(v)&quot;&gt;
                                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt;
                                &lt;/button&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;!-- Botones --&gt;
                &lt;div class=&quot;col-span-12 flex justify-end gap-3 mt-4&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot;bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600&quot;
                            @onclick=&quot;@(() =&gt; _nav.NavigateTo(&quot;visitasmovil/emplazamientos&quot;))&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            cancel
                        &lt;/span&gt;
                        Cancelar
                    &lt;/button&gt;
                    &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasEmplazamientosAddEmplazamientos)&quot;&gt;
                    &lt;button type=&quot;submit&quot; class=&quot;bg-teal-500 text-white px-4 py-2 rounded hover:bg-teal-600&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            save
                        &lt;/span&gt;
                        Guardar

                    &lt;/button&gt;
                    &lt;/AuthorizedContent&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/form&gt;

    &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
        &lt;!--Visitas--&gt;

        &lt;hr class=&quot;my-6 border-t border-gray-300&quot; /&gt;

        @if (ListadoVisitasAsociadasAEmplazamientos != null &amp;&amp; ListadoVisitasAsociadasAEmplazamientos.Any())
        {
            &lt;div class=&quot;overflow-x-auto bg-white rounded-lg shadow-lg&quot;&gt;
                &lt;table class=&quot;min-w-full table-auto&quot;&gt;
                    &lt;thead class=&quot;bg-gray-100&quot;&gt;
                        &lt;tr&gt;

                            &lt;th class=&quot;px-4 py-2 text-left text-sm font-medium text-gray-600&quot;&gt;Proyecto&lt;/th&gt;
                            &lt;th class=&quot;px-4 py-2 text-left text-sm font-medium text-gray-600&quot;&gt;Cliente&lt;/th&gt;
                            &lt;th class=&quot;px-4 py-2 text-left text-sm font-medium text-gray-600&quot;&gt;Cod1&lt;/th&gt;
                            &lt;th class=&quot;px-4 py-2 text-left text-sm font-medium text-gray-600&quot;&gt;Fecha Real Visita&lt;/th&gt;
                            &lt;th class=&quot;px-4 py-2 text-left text-sm font-medium text-gray-600&quot;&gt;Acciones&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        @foreach (var vis in ListadoVisitasAsociadasAEmplazamientos)
                        {
                            &lt;tr class=&quot;border-b hover:bg-gray-50&quot;&gt;
                                &lt;td class=&quot;px-4 py-2 text-sm text-gray-700&quot;&gt;@(!string.IsNullOrEmpty(vis.Proyecto?.nombre) ? vis.Proyecto?.nombre : &quot;No especificado&quot;)&lt;/td&gt;
                                &lt;td class=&quot;px-4 py-2 text-sm text-gray-700&quot;&gt;@(!string.IsNullOrEmpty(vis.Cliente?.Nombre) ? vis.Cliente?.Nombre : &quot;No especificado&quot;)&lt;/td&gt;
                                &lt;td class=&quot;px-4 py-2 text-sm text-gray-700&quot;&gt;@(!string.IsNullOrEmpty(vis.Codigo1) ? vis.Codigo1 : &quot;No especificado&quot;)&lt;/td&gt;
                                &lt;td class=&quot;px-4 py-2 text-sm text-gray-700&quot;&gt;@((vis.FechaRealVisita != null) ? vis.FechaRealVisita.Value.ToString(&quot;dd/MM/yyyy&quot;) : &quot;Sin fecha&quot;)&lt;/td&gt;
                                &lt;td class=&quot;px-4 py-2 text-sm&quot;&gt;
                                    &lt;button @onclick=&quot;() =&gt; RedirecVisita(vis.Id)&quot; class=&quot;px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200&quot;&gt;
                                        Ver Visita
                                    &lt;/button&gt;
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        }
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
        }
        else
        {
            &lt;div class=&quot;text-center text-gray-600 font-semibold&quot;&gt;
                No hay visitas asociadas
            &lt;/div&gt;
        }




    &lt;/div&gt;
    &lt;style&gt;
        * {
            transition: none;
        }
    &lt;/style&gt;
    @code {
        [Parameter] public string id { get; set; }

        public double LatitudeSet
        {
            get
            {
                if (add == null)
                {
                    // Puedes optar por devolver un valor predeterminado o manejar la situaci&oacute;n de alguna manera
                    return 0; // Valor predeterminado, por ejemplo
                }
                return add.Latitud;
            }
            set
            {
                if (add != null)
                {
                    add.Latitud = value;
                }
            }
        }

        public double LongitudSet
        {
            get
            {
                if (add == null)
                {
                    // Puedes optar por devolver un valor predeterminado o manejar la situaci&oacute;n de alguna manera
                    return 0; // Valor predeterminado, por ejemplo
                }
                return add.Longitud;
            }
            set
            {
                if (add != null)
                {
                    add.Longitud = value;
                }
            }
        }


        string SelectedOperador
        {
            get
            {
                return &quot;&quot;;
            }
            set
            {
                add.Operadores.Add(new E_OperadorEmplazamiento()
                    {
                        Codigo = &quot;&quot;,
                        Operador = baseData.Operadores.First(x =&gt; x.Nombre == value)
                    });

                InvokeAsync(StateHasChanged);
            }
        }

        List&lt;E_Localidades&gt; DataProvincias = new();
        List&lt;string&gt; DataProvinciasIdentifier =&gt; DataProvincias.Select(x =&gt; x.Localidad).ToList();

        private List&lt;E_Visitas&gt; ListadoVisitasAsociadasAEmplazamientos = new(); 

        E_Emplazamientos add { get; set; }

        BaseDataDTO baseData { get; set; }

        GetPaginatedEmplazamientosDTORequest emplazamientosSearch = new()
            {
                Search = &quot;&quot;,
                CheckOperadores = false,
                PageNumber = 1,
                PageSize = 100000000
            };

        private async Task RedirecVisita(string id)
        {
            string url = $&quot;/visitasmovil/visitas/add?id={id}&quot;;
            await _js.InvokeVoidAsync(&quot;window.open&quot;, url, &quot;_blank&quot;, &quot;noopener,noreferrer&quot;);
        }






        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender) return;

            _main.BackgroundImage = &quot;&quot;;

            await LoadBaseData();



            if (string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;id&quot;]))
            {
                add = new E_Emplazamientos()
                    {
                        Latitud = 40.417015080f,
                        Longitud = -3.703502420f,
                        Operadores = new()
                    };
            }
            else
            {
                await LoadEmplazamiento();
            }

            if (add != null)
            {

                var response = await _mongoContext.GetPaginatedEmplazamientos(emplazamientosSearch);
                var todosEmplazamientos = response.Documents;
            

                await _js.InvokeAsync&lt;string&gt;(&quot;GenerarMapa&quot;, add.Latitud, add.Longitud, todosEmplazamientos, add);
            }



            await LoadVisitasEmplazamiento();



            await InvokeAsync(StateHasChanged);

            _disconnection.SaveStatus += async () =&gt;
            {
                try
                {
                    if (add != null)
                        await _localStorage.SetItemAsync(&quot;emplazamientosadd&quot;, add);
                    else
                        await _localStorage.RemoveItemAsync(&quot;emplazamientosadd&quot;);
                }
                catch (Exception)
                { }
            };
        }


        async Task&lt;IEnumerable&lt;E_Localidades&gt;&gt; ReloadProvinciasData(string s)
        {
            try
            {
        if (string.IsNullOrEmpty(s)) return new List&lt;E_Localidades&gt;();

                if (s.Length &lt; 3) return new List&lt;E_Localidades&gt;();


                var response = await _mongoContext.GetPaginatedLocalidades(
                new GetPaginatedLocalidadesDTORequest()
                    {
                        PageNumber = 1,
                        PageSize = 100000000,
                        Search = s
                    });

                DataProvincias = response.Documents;

            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEmplazamientosPage&quot;, &quot;ReloadProvinciasData&quot;, DateTime.UtcNow);

                throw;
            }
            
            return DataProvincias;
        }

        private async Task LoadVisitasEmplazamiento()
        {
            
            ListadoVisitasAsociadasAEmplazamientos = await _mongoContext.GetVisitasByEmplazamientoId(_main.QueryParameters(_nav)[&quot;id&quot;]);
            ListadoVisitasAsociadasAEmplazamientos = ListadoVisitasAsociadasAEmplazamientos
            .OrderBy(x =&gt; x.FechaRealVisita != null) // Prioriza los elementos donde FechaVisita es null
            .ThenByDescending(x =&gt; x.FechaRealVisita) // Luego ordena por FechaVisita descendente
            .ToList();
    
        }

        async Task LoadEmplazamiento()
        {
            try
            {
            if (!string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;id&quot;]))
                    {
                        var response = await _mongoContext.GetOneEmplazamientos(_main.QueryParameters(_nav)[&quot;id&quot;]);

                        if (response.Value != null)
                        {
                            add = response.Value;
                        }
                    }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEmplazamientosPage&quot;, &quot;LoadEmplazamiento&quot;, DateTime.UtcNow);

                throw;
            }
        
        }
        async Task GenerarMapa()
        {
            await _js.InvokeAsync&lt;string&gt;(&quot;GenerarMapa&quot;);
        }

        


        async Task LoadBaseData()
        {
            try
            {
                var response = await _mongoContext.BaseDataVisitas();

                        baseData = response.Value;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEmplazamientosPage&quot;, &quot;LoadBaseData&quot;, DateTime.UtcNow);

                throw;
            }
            
    
        }

        async Task SaveAsync()
        {
            _main.IsLoading = true;

            if (!ValidateData())
            {
                _main.IsLoading = false;
                return;
            }

            add.Propietario = baseData.Clientes.First(x =&gt; x.Id == add.PropietarioId);

            try
            {
                if (string.IsNullOrEmpty(add.Id))
                {
                    var response = await _mongoContext.AddEmplazamientos(add);
                    if (!response.IsSuccess)
                    {
                        _snackbar.InsertSnackbar(new(&quot;No se puede crear el emplazamiento&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    }
                }
                else
                {
                    var response = await _mongoContext.EditEmplazamientos(add);
                }

            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddEmplazamientosPage&quot;, &quot;ReloadProvinciasData&quot;, DateTime.UtcNow);

                throw;
            }
    
            _main.IsLoading = false;
        _nav.NavigateTo(&quot;visitasmovil/emplazamientos&quot;);
        }

        bool ValidateData()
        {
            foreach (var v in add.Operadores)
            {
                if (string.IsNullOrEmpty(v.Codigo))
                {
                    return false;
                }
            }

            if (string.IsNullOrEmpty(add.PropietarioId))
            {
                return false;
            }

            return true;
        }

        [JSInvokable]
        public async Task SetPoints(double latitude, double longitude)
        {
            add.Latitud = latitude;
            add.Longitud = longitude;

            await InvokeAsync(StateHasChanged);
        }
    }
    `
  },
  {
    "ID": 90,
    "ServicesName": "Emplazamientos",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Emplazamientos/Emplazamientos",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil/emplazamientos&quot;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;Visitas.AccesoDocumentacion&quot;,&quot;Visitas.Ingeniero&quot;,&quot;Visitas.Tecnico&quot;,
    &quot;Visitas.Supervisor&quot;})&quot; /&gt;*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasEmplazamientos)&quot;&gt;&lt;/AuthorizePage&gt;
    &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3&quot;&gt;
        &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Emplazamientos&lt;/h1&gt;
        &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;Aqu&iacute; se pueden ver todos los emplazamientos&lt;/h2&gt;

        &lt;div class=&quot;w-full flex flex-wrap justify-between items-center&quot;&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasEmplazamientosAddEmplazamientos)&quot;&gt;
                
                    @*&lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsEmplazamientos.AddEmplazamientos)&quot;&gt;*@
                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                            @onclick='async ()=&gt;{
                            await _localStorage.RemoveItemAsync(&quot;emplazamientosadd&quot;);
                            _nav.NavigateTo(&quot;/visitasmovil/emplazamientos/add&quot;);}'&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            location_on
                        &lt;/span&gt;
                        A&ntilde;adir emplazamiento
                    &lt;/button&gt;


                    &lt;MudAutocomplete T=&quot;E_Emplazamientos&quot; ValueChanged=&quot;@(async (s)=&gt;{
                            await _localStorage.RemoveItemAsync(&quot;emplazamientosadd&quot;);
                            _nav.NavigateTo($&quot;/visitasmovil/emplazamientos/add?id={s.Id}&quot;);})&quot;
                                    SearchFunc=&quot;ReloadDataSearched&quot; ToStringFunc=&quot;(e)=&gt;e == null ?null: e.Codigo&quot; Variant=&quot;Variant.Outlined&quot;
                                    Placeholder=&quot;Editar un emplazamiento...&quot;&gt;
                    &lt;/MudAutocomplete&gt;
                &lt;/AuthorizedContent&gt;


            &lt;/div&gt;

            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasEmplazamientosCargaMasivaEmplazamientos)&quot;&gt;
        
                    @*&lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsEmplazamientos.AddEmplazamientos)&quot;&gt;*@
                    &lt;label for=&quot;file&quot; class=&quot;p-2 rounded bg-teal-400 text-white flex flex-wrap items-center gap-3 cursor-pointer&quot;&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            cloud_upload
                        &lt;/span&gt;
                        Carga masiva de emplazamientos
                    &lt;/label&gt;

                    &lt;InputFile id=&quot;file&quot; hidden OnChange=&quot;UploadCargaMasiva&quot;&gt;&lt;/InputFile&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div id=&quot;map&quot; class=&quot;w-full min-h-[calc(100dvh_-_55px)]&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;style&gt;
        * {
            transition: none;
        }
    &lt;/style&gt;
    @code {
        List&lt;E_Emplazamientos&gt; DataSearched = new();
        List&lt;E_Emplazamientos&gt; DataSearchedAddMap = new();

        List&lt;string&gt; DataSearchedIdentifier =&gt; DataSearched.Select(x =&gt; x.Codigo).ToList();

        GetPaginatedEmplazamientosDTORequest emplazamientosSearch = new()
            {
                Search = &quot;&quot;,
                CheckOperadores = false,
                PageNumber = 1,
                PageSize = 100000000
            };

        List&lt;E_Emplazamientos&gt; EmplazamientosMap = new();

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender) return;
            _main.BackgroundImage = &quot;&quot;;
    
            await _localStorage.RemoveItemAsync(&quot;emplazamientosadd&quot;);
            double latitudPredeterminada = 40.4167; // Por ejemplo, Madrid
            double longitudPredeterminada = -3.70325;
            try
            {
            // Obtener los datos de los emplazamientos
                    var response = await _mongoContext.GetPaginatedEmplazamientos(emplazamientosSearch);
                    EmplazamientosMap = response.Documents;

                    // Verificar los datos antes de pasarlos a JavaScript
                    if (EmplazamientosMap != null &amp;&amp; EmplazamientosMap.Any())
                    {
                        await _js.InvokeAsync&lt;string&gt;(&quot;GenerarMapa&quot;, latitudPredeterminada, longitudPredeterminada, EmplazamientosMap);
                    }
                    else
                    {
                        Console.WriteLine(&quot;No se encontraron emplazamientos.&quot;);
                    }
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;Emplazamientos&quot;, &quot;OnAfterRenderAsync&quot;, DateTime.UtcNow);

                throw;
            }

            

        }


        async Task UploadCargaMasiva(InputFileChangeEventArgs e)
        {
            try
            {
            _main.IsLoading = true;

                    if (e.File == null) { _main.IsLoading = false; return; }

                    var ms = new MemoryStream();

                    await e.File.OpenReadStream(e.File.Size).CopyToAsync(ms);

                    var response = await _mongoContext.MassiveUploadEmplazamientos(ms.ToArray());

                    _main.IsLoading = false;
            }
            catch (Exception ex)
            {
                
                await _mongoContext.RegistroError(ex.Message, _user.name, _user.id, &quot;Emplazamientos&quot;, &quot;UploadCargaMasiva&quot;, DateTime.UtcNow);

                throw;
            }
        

        }

        async Task&lt;IEnumerable&lt;E_Emplazamientos&gt;&gt; ReloadDataSearched(string s)
        {
            if (string.IsNullOrEmpty(s)) return new List&lt;E_Emplazamientos&gt;();
            if (s.Length &lt; 4) return new List&lt;E_Emplazamientos&gt;();

            emplazamientosSearch.Search = s;

            try
            {
            var response = await _mongoContext.GetPaginatedEmplazamientos(emplazamientosSearch);

                    DataSearched = response.Documents;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;Emplazamientos&quot;, &quot;ReloadDataSearched&quot;, DateTime.UtcNow);

                throw;
            }
        


            return DataSearched;
        }


        async Task&lt;IEnumerable&lt;E_Emplazamientos&gt;&gt; ReloadDataSearchedAddMap(string s)
        {
            if (string.IsNullOrEmpty(s)) return new List&lt;E_Emplazamientos&gt;();
            if (s.Length &lt; 4) return new List&lt;E_Emplazamientos&gt;();

            emplazamientosSearch.Search = s;
            try
            {
                var response = await _mongoContext.GetPaginatedEmplazamientos(emplazamientosSearch);

                        DataSearchedAddMap = response.Documents;
            }
            catch (Exception e)
            {
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;Emplazamientos&quot;, &quot;ReloadDataSearchedAddMap&quot;, DateTime.UtcNow);

                throw;
            }
            

            return DataSearchedAddMap.Where(x =&gt; !EmplazamientosMap.Any(c =&gt; c.Codigo == x.Codigo));
        }

        async Task GenerarMapa()
        {
            await _js.InvokeAsync&lt;string&gt;(&quot;GenerarMapa&quot;);
        }
        

        [JSInvokable]
        public void SetLocation(string id)
        {
            _nav.NavigateTo($&quot;/visitasmovil/emplazamientos/add?id={id}&quot;);
        }
    }
    `
  },
  {
    "ID": 91,
    "ServicesName": "AddVisitasPage",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Visitas/AddVisitasPage",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil/visitas/add&quot;
    @using static System.Net.WebRequestMethods

    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;Visitas.AccesoDocumentacion&quot;,&quot;Visitas.Ingeniero&quot;,&quot;Visitas.Tecnico&quot;,
    &quot;Visitas.Supervisor&quot;})&quot; /&gt;*@
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasAddVisita)&quot;&gt;&lt;/AuthorizePage&gt;

    &lt;form class=&quot;w-full grid grid-cols-12 min-h-[calc(100dvh_-_55px)] h-fit p-3 gap-3&quot; onkeydown=&quot;return event.key != 'Enter';&quot; @onsubmit=&quot;SaveAsync&quot;&gt;


        @if (baseData != null)
        {
            &lt;div class=&quot;col-span-12 h-fit grid grid-cols-12 gap-3&quot;&gt;
                &lt;div class=&quot;col-span-12 rounded shadow-md border border-slate-300/50 flex flex-wrap justify-between p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-fit text-blue-400 text-base flex flex-wrap items-center&quot;&gt;
                        @($&quot;Documentaci&oacute;n de acceso al site{(add.Emplazamiento != null ? $&quot; - {add.Emplazamiento.Nombre}&quot; : &quot;&quot;)}&quot;)
                    &lt;/h2&gt;

                    &lt;div class=&quot;flex items-center space-x-4&quot;&gt;
                        &lt;AuthorizedContent Roles=&quot;@([&quot;SeguimientoMovil.Supervisor&quot;])&quot;&gt;
                            &lt;Checkbox Checked=add.Facturable
                            ChangeCheck=&quot;()=&gt; {add.Facturable = !add.Facturable; StateHasChanged();}&quot; Message=&quot;&iquest;Facturable?&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/AuthorizedContent&gt;


                        &lt;Checkbox Checked=add.AccesoDocumentacion.SolicitarAcceso
                        ChangeCheck=&quot;()=&gt; {add.AccesoDocumentacion.SolicitarAcceso = !add.AccesoDocumentacion.SolicitarAcceso; StateHasChanged();}&quot; Message=&quot;&iquest;Solicitar acceso?&quot;&gt;
                        &lt;/Checkbox&gt;
                    &lt;/div&gt;

                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Fecha solicitado&lt;/h2&gt;
                    &lt;MudDatePicker Clearable Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border-slate-300/50&quot; @bind-Date=&quot;add.AccesoDocumentacion.FechaSolicitado&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Autorizado&lt;/h2&gt;
                    &lt;MudSelect T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; Clearable class=&quot;w-full rounded border border-slate-300/50&quot;
                    @bind-Value=&quot;add.AccesoDocumentacion.Autorizado&quot; ToStringFunc=&quot;e=&gt; e == null ? null :  e&quot;&gt;
                        &lt;MudSelectItem Value=&quot;@(&quot;Si&quot;)&quot;&gt;@($&quot;Si&quot;)&lt;/MudSelectItem&gt;
                        &lt;MudSelectItem Value=&quot;@(&quot;No&quot;)&quot;&gt;@($&quot;No&quot;)&lt;/MudSelectItem&gt;
                        &lt;MudSelectItem Value=&quot;@(&quot;Cancelado&quot;)&quot;&gt;@($&quot;Cancelado&quot;)&lt;/MudSelectItem&gt;
                    &lt;/MudSelect&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Fecha reclamado&lt;/h2&gt;
                    &lt;MudDatePicker Clearable Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border-slate-300/50&quot; @bind-Date=&quot;add.AccesoDocumentacion.FechaReclamado&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Fecha de inicio de autorizaci&oacute;n&lt;/h2&gt;
                    &lt;MudDatePicker Clearable Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border-slate-300/50&quot; @bind-Date=&quot;add.AccesoDocumentacion.FechaInicioAutorizado&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Fecha de fin de autorizaci&oacute;n&lt;/h2&gt;
                    &lt;MudDatePicker Clearable Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border-slate-300/50&quot; @bind-Date=&quot;add.AccesoDocumentacion.FechaFinAutorizado&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Responsable cliente&lt;/h2&gt;
                    @if (add.Emplazamiento != null)
                    {
                        &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; @bind-Value=&quot;add.AccesoDocumentacion.ResponsableCliente&quot;&gt;&lt;/MudTextField&gt;
                    }
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;C&oacute;digo JIRA&lt;/h2&gt;
                    @if (add.Cliente != null)
                    {
                        if (add.Cliente.Nombre == &quot;VODAFONE&quot; || add.Cliente.Nombre == &quot;SEMI&quot;)
                        {
                            &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; @bind-Value=&quot;add.AccesoDocumentacion.CodigoJIRA&quot;&gt;&lt;/MudTextField&gt;
                        }
                    }
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Contratista principal&lt;/h2&gt;
                    @if (add.Cliente != null)
                    {
                        if (add.Cliente.Nombre == &quot;VODAFONE&quot; || add.Cliente.Nombre == &quot;SEMI&quot;)
                        {
                            &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; @bind-Value=&quot;add.AccesoDocumentacion.Contratista&quot;&gt;&lt;/MudTextField&gt;
                        }
                    }
                &lt;/div&gt;

                &lt;div class=&quot;col-span-12 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;
                        @(_main.QueryParameters(_nav)[&quot;id&quot;] == null ? &quot;A&ntilde;adir visita&quot; : &quot;Editar visita&quot;)
                    &lt;/h2&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;div class=&quot;relative w-full text-blue-400 text-base&quot;&gt;
                        Emplazamiento

                        &lt;a href=&quot;/visitasmovil/emplazamientos/add?new=true&quot; target=&quot;_blank&quot; class=&quot;absolute w-fit h-fit top-0 right-[5px] rounded text-sm p-1 flex flex-wrap items-center justify-center bg-blue-400 text-white&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                pin_drop
                            &lt;/span&gt;
                        &lt;/a&gt;
                    &lt;/div&gt;
                    &lt;MudAutocomplete T=&quot;E_Emplazamientos&quot; Value=&quot;add.Emplazamiento&quot; Class=&quot;w-full rounded border border-slate-300/50&quot;
                    Clearable
                    OnClearButtonClick='()=&gt; add.Emplazamiento=null'
                    Variant=&quot;Variant.Outlined&quot; ValueChanged=&quot;(e)=&gt; {add.Emplazamiento = e;}&quot;
                    SearchFunc=&quot;ReloadEmplazamientos&quot; Placeholder=&quot;C&oacute;digo asignado...&quot;
                    ToStringFunc=&quot;e =&gt; e == null ? null : (e.Codigo + ' ' + e.Propietario.Nombre)&quot;&gt;
                    &lt;/MudAutocomplete&gt;
                &lt;/div&gt;

                @if (add.Emplazamiento != null)
                {
                    if (add.Emplazamiento.Localidad != null)
                    {
                        &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                            &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Provincia&lt;/h2&gt;
                            @if (!string.IsNullOrEmpty(add.Emplazamiento.Localidad.Provincia))
                            {
                                &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; Value=&quot;add.Emplazamiento.Localidad.Provincia&quot; ReadOnly&gt;&lt;/MudTextField&gt;
                            }
                            else
                            {
                                &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; Value=&quot;add.Emplazamiento.Localidad.Localidad&quot; ReadOnly&gt;&lt;/MudTextField&gt;

                            }

                        &lt;/div&gt;

                        &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                            &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Localidad&lt;/h2&gt;
                            &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; Value=&quot;add.Emplazamiento.Localidad.Localidad&quot; ReadOnly&gt;&lt;/MudTextField&gt;
                        &lt;/div&gt;
                    }
                }

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Propietario&lt;/h2&gt;
                    @if (add.Emplazamiento != null)
                    {
                        &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; Value=&quot;add.Emplazamiento.Propietario.Nombre&quot; ReadOnly&gt;&lt;/MudTextField&gt;
                    }
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Proyecto&lt;/h2&gt;
                    &lt;select class=&quot;w-full rounded border border-slate-300/50 p-2&quot; value=&quot;@selectedProjectId&quot; @onchange=&quot;OnProyectoSelected&quot;&gt;
                        &lt;option value=&quot;&quot;&gt;Seleccione un proyecto&lt;/option&gt;
                        @if (baseData?.Proyectos != null)
                        {
                            @foreach (var v in baseData.Proyectos)
                            {
                                &lt;option value=&quot;@v.Id&quot;&gt;@v.nombre&lt;/option&gt;
                            }
                        }
                    &lt;/select&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Obras&lt;/h2&gt;
                    &lt;select class=&quot;w-full rounded border border-slate-300/50 p-2&quot; @bind=&quot;selectedObraId&quot;&gt;
                        &lt;!-- Opci&oacute;n que indica &quot;No Aplica&quot;. Su valor es cadena vac&iacute;a. --&gt;
                        &lt;option value=&quot;&quot;&gt;No Aplica&lt;/option&gt;
                        @if (seguimientos != null &amp;&amp; seguimientos.Any())
                        {
                            @foreach (var v in seguimientos)
                            {
                                &lt;option value=&quot;@v.CodigoLPS&quot;&gt;
                                    @($&quot;{v.Nombre} ({v.CodigoLPS}) - {v.CreatedOn:dd/MM/yyyy}&quot;)
                                &lt;/option&gt;
                            }
                        }
                        else
                        {
                            &lt;option disabled&gt;No hay obras disponibles&lt;/option&gt;
                        }
                    &lt;/select&gt;
                &lt;/div&gt;


                @*      @if (seguimientos != null &amp;&amp; seguimientos.Any())
                {
                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Obras del Proyecto&lt;/h2&gt;
                    @foreach (var seguimiento in seguimientos)
                    {
                        &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; Value=&quot;seguimiento.Nombre&quot; ReadOnly class=&quot;w-full&quot;&gt;&lt;/MudTextField&gt;
                    }
                &lt;/div&gt;
                } *@

                &lt;div class=&quot;col-span-3 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Cliente&lt;/h2&gt;
                    &lt;MudSelect T=&quot;E_Propietarios&quot; Variant=&quot;Variant.Outlined&quot; Clearable class=&quot;w-full rounded border border-slate-300/50&quot;
                    @bind-Value=&quot;add.Cliente&quot; ToStringFunc=&quot;e=&gt; e == null ? null :  e.Nombre&quot;&gt;
                        @if (baseData.Clientes != null)
                        {
                            foreach (var v in baseData.Clientes)
                            {
                                &lt;MudSelectItem Value=&quot;@v&quot;&gt;@($&quot;{v.Nombre}&quot;)&lt;/MudSelectItem&gt;
                            }
                        }
                    &lt;/MudSelect&gt;
                &lt;/div&gt;



                &lt;div class=&quot;col-span-3 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Operador&lt;/h2&gt;
                    &lt;MudSelect T=&quot;E_Operador&quot; Variant=&quot;Variant.Outlined&quot; Clearable class=&quot;w-full rounded border border-slate-300/50&quot;
                    @bind-Value=&quot;add.Operador&quot; ToStringFunc=&quot;e=&gt; e == null ? null :  e.Nombre&quot;&gt;
                        @if (baseData.Operadores != null)
                        {
                            foreach (var v in baseData.Operadores)
                            {
                                &lt;MudSelectItem Value=&quot;@v&quot;&gt;@($&quot;{v.Nombre}&quot;)&lt;/MudSelectItem&gt;
                            }
                        }
                    &lt;/MudSelect&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Asignado a...&lt;/h2&gt;
                    &lt;div class=&quot;col-span-3 flex justify-center items-center display: inline-block&quot;&gt;
                        &lt;div class=&quot;col-span-4 flex flex-wrap object-rigth&quot;&gt;
                            &lt;Checkbox Checked=add.AsignacionExterna
                            ChangeCheck=&quot;()=&gt; {add.AsignacionExterna = !add.AsignacionExterna; StateHasChanged();}&quot; Message=&quot;&iquest;Asignaci&oacute;n externa?&quot;&gt;
                            &lt;/Checkbox&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;

                    @if (add.AsignacionExterna)
                    {
                        &lt;MudTextField T=&quot;string&quot; Variant=&quot;Variant.Outlined&quot; @bind-Value=&quot;add.AsigExterna&quot;&gt;&lt;/MudTextField&gt;
                    }
                    else
                    {
                        &lt;MudSelect T=&quot;string&quot; Clearable class=&quot;w-full rounded border border-slate-300/50&quot;
                        @bind-SelectedValues=&quot;SelectedAsignado&quot; MultiSelection @ref=&quot;selectAsignados&quot;
                        MultiSelectionTextFunc=&quot;@((e)=&gt;string.Join(',', add.AsignadoA.Select(x=&gt; $&quot;{x.Name} {x.LastName}&quot;)))&quot; Variant=&quot;Variant.Outlined&quot;&gt;

                            @if (usersAsignar != null)
                            {
                                foreach (var v in usersAsignar)
                                {
                                    &lt;MudSelectItem Value=&quot;@v.Id.ToString()&quot;&gt;@($&quot;{v.Name} {v.LastName}&quot;)&lt;/MudSelectItem&gt;
                                }
                            }
                        &lt;/MudSelect&gt;

                        @if (!add.AsignacionExterna &amp;&amp; !SelectedAsignado.Any())
                        {
                            &lt;div class=&quot;w-full text-red-500 mt-2&quot;&gt;Este campo es obligatorio.&lt;/div&gt;
                        }
                    }

                &lt;/div&gt;


                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Semana&lt;/h2&gt;
                    &lt;MudNumericField Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border border-slate-300/50&quot; @bind-Value=&quot;add.Semana&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Fecha estimada de visita&lt;/h2&gt;
                    &lt;MudDatePicker Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border-slate-300/50&quot; @bind-Date=&quot;add.FechaEstimadaVisita&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Fecha real de visita&lt;/h2&gt;
                    &lt;MudDatePicker Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border-slate-300/50&quot; @bind-Date=&quot;add.FechaRealVisita&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Tipo de visita&lt;/h2&gt;
                    &lt;MudSelect T=&quot;string&quot; Clearable class=&quot;w-full rounded border border-slate-300/50&quot;
                    @bind-SelectedValues=&quot;SelectedTiposVisita&quot; MultiSelection Variant=&quot;Variant.Outlined&quot;&gt;
                        @foreach (var v in E_Visitas.TiposVisita())
                        {
                            &lt;MudSelectItem Value=&quot;@v&quot;&gt;@($&quot;{v}&quot;)&lt;/MudSelectItem&gt;
                        }
                    &lt;/MudSelect&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-6 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Creado por...&lt;/h2&gt;
                    &lt;MudTextField Variant=&quot;Variant.Outlined&quot; class=&quot;w-full rounded border border-slate-300/50&quot; @bind-Value=&quot;add.CreatedByName&quot; ReadOnly /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-12 rounded shadow-md border border-slate-300/50 flex flex-wrap p-2 gap-3&quot;&gt;
                    &lt;h2 class=&quot;w-full text-blue-400 text-base&quot;&gt;Comentarios&lt;/h2&gt;
                    &lt;div class=&quot;w-full flex flex-wrap gap-3&quot;&gt;
                        &lt;button type=&quot;button&quot; class=&quot;rounded bg-blue-400 text-white p-2 flex flex-wrap gap-2&quot;
                        @onclick=&quot;@(()=&gt;add.Comentarios.Add(new (){Id = _user.id, Name= $&quot;{_user.name} {_user.surname}&quot;, ProfilePic = _user.profilePic, Fecha = DateTime.Now}))&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                rate_review
                            &lt;/span&gt;
                            A&ntilde;adir comentario
                        &lt;/button&gt;
                    &lt;/div&gt;


                    &lt;div class=&quot;w-full flex flex-wrap gap-3 py-3&quot;&gt;
                        @foreach (var v in add.Comentarios)
                        {
                            &lt;div class=&quot;w-full flex flex-wrap gap-2&quot;&gt;
                                @if (v.Id == _user.id)
                                {
                                    &lt;span class=&quot;w-full text-blue-400 text-sm flex flex-wrap justify-between items-center gap-3&quot;&gt;
                                        &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                            &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                            &lt;/div&gt;

                                            @v.Name
                                        &lt;/div&gt;

                                        &lt;button type=&quot;button&quot; class=&quot;rounded bg-red-600 text-white py-0 px-1 w-fit h-fit&quot; @onclick=&quot;()=&gt; add.Comentarios.Remove(v)&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined text-lg w-fit h-fit&quot;&gt;
                                                delete
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/span&gt;
                                }
                                else
                                {
                                    &lt;div class=&quot;w-fit text-sm flex flex-wrap items-center gap-3&quot;&gt;
                                        &lt;div class=&quot;h-[40px] aspect-square rounded-full&quot; style=&quot;background-image: url(@(v.ProfilePic)); background-size: cover;&quot;&gt;
                                        &lt;/div&gt;

                                        @v.Name
                                    &lt;/div&gt;
                                }

                                &lt;InputTextArea class=&quot;w-full border border-slate-300/50 rounded p-2&quot; @bind-Value=&quot;v.Comentario&quot; readonly=&quot;@(v.Id != _user.id)&quot;&gt;&lt;/InputTextArea&gt;
                            &lt;/div&gt;
                        }
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class=&quot;col-span-12 flex flex-wrap justify-end items-end p-2 gap-3&quot;&gt;
                    @if (string.IsNullOrEmpty(add.Id))
                    {
                        &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-red-600 text-white rounded flex flex-wrap gap-3&quot;
                        @onclick=&quot;@(()=&gt; _nav.NavigateTo(&quot;/visitas&quot;))&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                cancel
                            &lt;/span&gt;
                            Cancelar
                        &lt;/button&gt;

                        &lt;button type=&quot;submit&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-teal-600 text-white rounded flex flex-wrap gap-3&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Guardar
                        &lt;/button&gt;
                    }
                    else if (add.Estados.Last().Index != 8 &amp;&amp; add.Estados.Last().Index != 9)
                    {
                        if (add.Estados.Last().Index == 5 || add.Estados.Last().Index == 7)
                        {
                            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-blue-400 text-white rounded flex flex-wrap gap-3&quot;
                            @onclick=&quot;@(()=&gt; {add.Estados.Add(baseData.Estados.First(x=&gt; x.Index== 6)); SaveAsync();})&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    resume
                                &lt;/span&gt;
                                Iniciar
                            &lt;/button&gt;
                        }
                        else if (add.Estados.Last().Index == 6)
                        {
                            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-amber-600 text-white rounded flex flex-wrap gap-3&quot;
                            @onclick=&quot;@(()=&gt; {add.Estados.Add(baseData.Estados.First(x=&gt; x.Index== 7)); SaveAsync();})&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    stop
                                &lt;/span&gt;
                                Parar
                            &lt;/button&gt;

                            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-slate-950 text-white rounded flex flex-wrap gap-3&quot;
                            @onclick=&quot;@(()=&gt; {add.Estados.Add(baseData.Estados.First(x=&gt; x.Index== 8)); SaveAsync();})&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    cancel
                                &lt;/span&gt;
                                Cancelar
                            &lt;/button&gt;

                            &lt;button type=&quot;button&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-teal-600 text-white rounded flex flex-wrap gap-3&quot;
                            @onclick=&quot;@(()=&gt; {add.Estados.Add(baseData.Estados.First(x=&gt; x.Index== 9)); SaveAsync();})&quot;&gt;
                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                    send
                                &lt;/span&gt;
                                Finalizar
                            &lt;/button&gt;
                        }

                        &lt;button type=&quot;submit&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-blue-400 text-white rounded flex flex-wrap gap-3&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Guardar
                        &lt;/button&gt;
                    }
                    else
                    {

                        &lt;button type=&quot;submit&quot; class=&quot;col-span-1 w-fit h-fit p-2 bg-blue-400 text-white rounded flex flex-wrap gap-3&quot;&gt;
                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                save
                            &lt;/span&gt;
                            Guardar
                        &lt;/button&gt;
                    }
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/form&gt;
    &lt;style&gt;
        * {
        transition: none;
        }
    &lt;/style&gt;

    @code {
        [Parameter] public string id { get; set; } //// -------------

        List&lt;VisitasLogic.EditUserDTORequest&gt; usersAsignar = new(); //// -------------
        PaginatedResult&lt;E_Seguimiento&gt; Seguimientos { get; set; } = new(); //// -------------
        MudSelect&lt;string&gt; selectAsignados { get; set; }



        E_Visitas add { get; set; } = new E_Visitas
            {
                AccesoDocumentacion = new() // Asegura que las listas tambi&eacute;n est&aacute;n inicializadas
            };

        public E_Seguimiento segui { get; set; } //// -------------

        private List&lt;E_Seguimiento&gt; seguimientos = new List&lt;E_Seguimiento&gt;();   //// -------------


        BaseDataDTO baseData { get; set; }																	

        private GetPaginatedSeguimientoMovilDTORequest filters = new() //// -------------
            {
                PageNumber = 1,
                PageSize = 10000,
                Search = &quot;&quot;
            };

        private string selectedProjectId { get; set; } //// -------------
        private string NombreFechaObra { get; set; } //// -------------
        private string selectedObraId { get; set; } //// -------------


        private async Task LoadWorks()
        {
            if (!string.IsNullOrEmpty(filters.IdProyecto))
            {
                try
                {
                            var resultSeguimientos = await _mongoContext.GetPaginatedSeguimientoMovil(filters);
                            seguimientos = resultSeguimientos.Documents;
                }
                catch (Exception e)
                {
                    
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;LoadWorks&quot;, DateTime.UtcNow);

                    throw;
                }

                
            }
            else
            {
                seguimientos.Clear();
            }
            await InvokeAsync(StateHasChanged);
        }

        private async Task OnProyectoSelected(ChangeEventArgs e)
        {
            selectedProjectId = e.Value?.ToString() ?? &quot;&quot;;

            // Limpiar la obra seleccionada previamente
            add.IdSeguimiento = null;
            selectedObraId = null;

            if (!string.IsNullOrEmpty(selectedProjectId))
            {
                add.Proyecto = baseData.Proyectos.FirstOrDefault(p =&gt; p.Id == selectedProjectId);
                filters.IdProyecto = selectedProjectId;
                // Actualizar solo la lista de obras, sin recargar la visita completa
                await LoadWorks();
            // Recargar los datos, incluyendo la lista de obras para el proyecto seleccionado
            }
            else
            {
                add.Proyecto = null;
                filters.IdProyecto = null;
                seguimientos.Clear();
                await InvokeAsync(StateHasChanged);
            }

        }


        private async Task OnObraSelected(ChangeEventArgs e)
        {
            selectedObraId = e.Value?.ToString() ?? &quot;&quot;;

            if (!string.IsNullOrEmpty(selectedObraId))
            {
                segui = seguimientos.FirstOrDefault(x =&gt; x.CodigoLPS == selectedObraId);
                add.IdSeguimiento = segui?.CodigoLPS;
            }

            await InvokeAsync(StateHasChanged);
        }

        protected override async Task OnInitializedAsync()
        {
            
            await LoadApi();
        }

        public async Task LoadApi()
        {

            // 1. Configurar la imagen de fondo
            _main.BackgroundImage = &quot;&quot;;

            // 2. Cargar datos base (clientes, proyectos, operadores, etc.)
            await LoadBaseData();

            // 3. Registrar el evento para guardar el estado en localStorage
            _disconnection.SaveStatus += async () =&gt;
            {
                try
                {
                    if (add != null)
                        await _localStorage.SetItemAsync(&quot;visitasadd&quot;, add);
                    else
                        await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                }
                catch (Exception e)
                {
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                    throw;
                }
            };

            // 4. Leer los par&aacute;metros de la URL (query string)
            var query = _main.QueryParameters(_nav);
            string idParam = query[&quot;id&quot;];
            string codigoParam = query[&quot;codigo&quot;];
            string codpropietarioParam = query[&quot;codpropietario&quot;];
            string proyectoParam = query[&quot;proyecto&quot;];

            // 5. Si no se proporciona un &quot;id&quot;, es una nueva visita
            if (string.IsNullOrEmpty(idParam))
            {
                add = new E_Visitas()
                    {
                        AsignadoA = new(),
                        Comentarios = new(),
                        IdSeguimiento = codigoParam, // Se asigna el c&oacute;digo (posible identificador de seguimiento)
                        AccesoDocumentacion = new()
                    };

                // 5.1. Si se proporciona &quot;codpropietario&quot;, se carga el emplazamiento
                if (!string.IsNullOrEmpty(codpropietarioParam))
                {
                    try
                    {
                        var responseEmplazamiento = await _mongoContext.GetOneEmplazamientos(codpropietarioParam);
                        if (responseEmplazamiento.IsSuccess)
                        {
                            add.Emplazamiento = responseEmplazamiento.Value;
                        }
                    }
                    catch (Exception e)
                    {
                        
                        await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                        throw;
                    }
                    
                }

                // 5.2. Si se proporciona &quot;proyecto&quot;, se asigna el proyecto desde baseData
                if (!string.IsNullOrEmpty(proyectoParam) &amp;&amp; int.TryParse(proyectoParam, out int proyectoIndex))
                {
                    add.Proyecto = baseData.Proyectos.FirstOrDefault(x =&gt; x.index == proyectoIndex);
                    if (add.Proyecto != null)
                    {
                        selectedProjectId = add.Proyecto.Id;
                        filters.IdProyecto = selectedProjectId;
                    }
                }

                await InvokeAsync(StateHasChanged);
            }
            else
            {
                try
                {
                    // 6. Si se proporciona un &quot;id&quot;, se carga la visita existente
                                var responseVisita = await _mongoContext.GetOneVisitas(idParam);
                                if (responseVisita.Value != null)
                                {
                                    add = responseVisita.Value;

                                    // 6.1. Actualizar el proyecto seleccionado
                                    if (add.Proyecto != null)
                                    {
                                        selectedProjectId = add.Proyecto.Id;
                                        filters.IdProyecto = selectedProjectId;
                                    }
                                    else if (!string.IsNullOrEmpty(add.Modulo?.Nombre))
                                    {
                                        // Si no hay proyecto asignado pero existe un m&oacute;dulo, buscar el proyecto por el nombre del m&oacute;dulo
                                        var proyectoEncontrado = baseData.Proyectos
                                            .FirstOrDefault(x =&gt; x.nombre.ToLower() == add.Modulo.Nombre.ToLower());
                                        if (proyectoEncontrado != null)
                                        {
                                            add.Proyecto = proyectoEncontrado;
                                            selectedProjectId = proyectoEncontrado.Id;
                                            filters.IdProyecto = selectedProjectId;
                                        }
                                    }

                                    // 6.2. Actualizar el identificador de obra (seguimiento)
                                    if (!string.IsNullOrEmpty(add.IdSeguimiento))
                                    {
                                        selectedObraId = add.IdSeguimiento;
                                    }
                                }
                }
                catch (Exception e)
                {
                    
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                    throw;
                }

                await InvokeAsync(StateHasChanged);
            }

            // 7. Asegurarse de que AccesoDocumentacion no sea nulo
            if (add.AccesoDocumentacion == null)
            {
                add.AccesoDocumentacion = new();
            }

            // 8. Consultar los seguimientos (obras) correspondientes al proyecto seleccionado
            if (!string.IsNullOrEmpty(filters.IdProyecto))
            {
                try
                {
                    var resultSeguimientos = await _mongoContext.GetPaginatedSeguimientoMovil(filters);
                    seguimientos = resultSeguimientos.Documents;
                }
                catch (Exception e)
                {
                    
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;LoadApi&quot;, DateTime.UtcNow);

                    throw;
                }
                

                // Solo si ya hay una obra guardada se actualiza la selecci&oacute;n
                if (!string.IsNullOrEmpty(add.IdSeguimiento))
                {
                    segui = seguimientos.FirstOrDefault(x =&gt; x.CodigoLPS == add.IdSeguimiento);
                    if (segui != null)
                    {
                        selectedObraId = segui.CodigoLPS;
                    }
                }
            }
            else
            {
                seguimientos.Clear();
            }

            await InvokeAsync(StateHasChanged);
        }





        string SelectedOperador
        {
            get
            {
                return &quot;&quot;;
            }
            set
            {
                add.Operador = baseData.Operadores.First(x =&gt; x.Nombre == value);
                Task.Delay(100).ContinueWith((e) =&gt;
                {
                    StateHasChanged();
                });
            }
        }


        IEnumerable&lt;string&gt; SelectedAsignado
        {
            get
            {
                return add.AsignadoA.Select(x =&gt; x.Id.ToString()).AsEnumerable&lt;string&gt;();
            }
            set
            {
                add.AsignadoA.Clear();

                foreach (var v in value)
                {
                    add.AsignadoA.Add(usersAsignar.First(x =&gt; x.Id.ToString() == v));
                }

                Task.Run(async () =&gt;
                {
                    await Task.Delay(200);

                    await selectAsignados.ForceUpdate();
                });
            }
        }

        IEnumerable&lt;string&gt; SelectedTiposVisita
        {
            get
            {
                return add.TiposDeVisita.AsEnumerable&lt;string&gt;();
            }
            set
            {
                add.TiposDeVisita.Clear();

                foreach (var v in value)
                {
                    add.TiposDeVisita.Add(v);
                }
            }
        }

        

        // protected override async Task OnAfterRenderAsync(bool firstRender)
        // {
        // 	if (!firstRender) return;
        // 	_main.BackgroundImage = &quot;&quot;;
        // 	await LoadBaseData();

        // 	_disconnection.SaveStatus += (async () =&gt;
        // {
        // 	try
        // 	{
        // 		if (add != null)
        // 			await _localStorage.SetItemAsync(&quot;visitasadd&quot;, add);
        // 		else
        // 		{
        // 			await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);

        // 		}
        // 	}

        // 	catch (Exception)
        // 	{ }
        // });

        // 	if (string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;id&quot;]))
        // 	{
        // 		add = new E_Visitas()
        // 			{
        // 				AsignadoA = new(),
        // 				Comentarios = new(),
        // 				IdSeguimiento = _main.QueryParameters(_nav)[&quot;codigo&quot;],
        // 				AccesoDocumentacion = new()
        // 			};

        // 		@if (!string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;codpropietario&quot;]))
        // 		{
        // 			var response = await _mongoContext.GetOneEmplazamientos(_main.QueryParameters(_nav)[&quot;codpropietario&quot;]);

        // 			if (response.IsSuccess)
        // 			{
        // 				add.Emplazamiento = response.Value != null ? response.Value : null;
        // 			}
        // 		}

        // 		@if (!string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;proyecto&quot;]))
        // 		{
        // 			add.Proyecto = baseData.Proyectos.FirstOrDefault(x =&gt; x.index == int.Parse(_main.QueryParameters(_nav)[&quot;proyecto&quot;]));
        // 		}
        // 		await InvokeAsync(StateHasChanged);

        // 		return;
        // 	}
        // 	else
        // 	{
        // 		await LoadVisita();
        // 	}



        // 	if (add.AccesoDocumentacion == null)
        // 	{
        // 		add.AccesoDocumentacion = new();
        // 	}

        // 	await InvokeAsync(StateHasChanged);
        // }

        async Task&lt;IEnumerable&lt;E_Emplazamientos&gt;&gt; ReloadEmplazamientos(string s) //// -------------
        {
            if (string.IsNullOrEmpty(s)) return new List&lt;E_Emplazamientos&gt;();

            if (s.Length &lt; 4) return new List&lt;E_Emplazamientos&gt;();

            try
            {
                var response = await _mongoContext.GetPaginatedEmplazamientos(new()
                    {
                        PageNumber = 1,
                        PageSize = 1000000,
                        Search = s
                    });

                return response.Documents;
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;ReloadEmplazamientos&quot;, DateTime.UtcNow);

                throw;
            }

            
        }
        // async Task LoadVisita()
        // {
        // 	if (!string.IsNullOrEmpty(_main.QueryParameters(_nav)[&quot;id&quot;]))
        // 	{
        // 		var response = await _mongoContext.GetOneVisitas(_main.QueryParameters(_nav)[&quot;id&quot;]);

        // 		if (response.Value != null)
        // 		{
        // 			add = response.Value;

        // 			// Asegurar que selectedProjectId se actualiza con el proyecto guardado
        // 			if (add.Proyecto != null)
        // 			{
        // 				selectedProjectId = add.Proyecto.Id;
        // 			}
        // 			else if (!string.IsNullOrEmpty(add.Modulo?.Nombre))
        // 			{
        // 				var proyecto = baseData.Proyectos.FirstOrDefault(x =&gt; x.nombre.ToLower() == add.Modulo.Nombre.ToLower());
        // 				if (proyecto != null)
        // 				{
        // 					add.Proyecto = proyecto;
        // 					selectedProjectId = proyecto.Id;
        // 				}
        // 			}

        // 			// Asegurar que selectedObraId se actualiza con la obra guardada
        // 			if (!string.IsNullOrEmpty(add.IdSeguimiento))
        // 			{
        // 				selectedObraId = add.IdSeguimiento;
        // 			}
        // 		}
        // 	}

        // 	Console.WriteLine($&quot;Proyecto cargado: {selectedProjectId}&quot;);
        // 	Console.WriteLine($&quot;Obra cargada: {selectedObraId}&quot;);

        // 	await InvokeAsync(StateHasChanged);
        // }




        async Task LoadBaseData()
        {
            try
            {
                var response = await _mongoContext.BaseDataVisitas();

                        baseData = response.Value;

                        usersAsignar = await _mongoUsers.Users
                        .Find(x =&gt; new List&lt;string&gt;() { &quot;Visitas.Ingeniero&quot;, &quot;Visitas.Tecnico&quot;, &quot;Visitas.Supervisor&quot; }.Any(c =&gt; x.Roles.Any(d =&gt; d.Name.ToLower() == c.ToLower())))
                        .As&lt;VisitasLogic.EditUserDTORequest&gt;().ToListAsync();
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;LoadBaseData&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        async Task SaveAsync()  //// -------------
        {
            _main.IsLoading = true;

            if (!ValidateData())
            {
                _main.IsLoading = false;
                return;
            }

            // Convertir el valor del select a null si se seleccion&oacute; &quot;No Aplica&quot;
            if (string.IsNullOrWhiteSpace(selectedObraId))
            {
                add.IdSeguimiento = null;
            }
            else
            {
                add.IdSeguimiento = selectedObraId;
            }

            try
            {
                    if (string.IsNullOrEmpty(add.Id))
                    {
                        await _mongoContext.AddVisitas(add, _mail);
                    }
                    else
                    {
                        await _mongoContext.EditVisitas(add, _mail);
                    }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;AddVisitasPage&quot;, &quot;SaveAsync&quot;, DateTime.UtcNow);

                throw;
            }

        

            _main.IsLoading = false;
            _nav.NavigateTo(&quot;/visitasmovil/visitas&quot;);
        }

        
        bool ValidateData() //// -------------
        {
            if (add.TiposDeVisita.Count == 0)
            {
                _snackbar.InsertSnackbar(new(&quot;Selecciona el tipo/s de visita/s para continuar&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                return false;
            }
            else if (add.Emplazamiento == null)
            {
                _snackbar.InsertSnackbar(new(&quot;Introduce el emplazamiento&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                return false;
            }
            else if (add.Modulo == null &amp;&amp; add.Proyecto == null)
            {
                _snackbar.InsertSnackbar(new(&quot;Introduce el proyecto&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                return false;
            }
            else if (add.Cliente == null)
            {
                _snackbar.InsertSnackbar(new(&quot;Es necesario seleccionar un Cliente&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                return false;
            }
            else if (add.Operador == null)
            {
                _snackbar.InsertSnackbar(new(&quot;Es necesario seleccionar un Operador&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                return false;
            }

            if (!_user.Roles.Contains(&quot;Visitas.AccesoDocumentacion&quot;))
            {
                if (add.Cliente == null)
                {
                    _snackbar.InsertSnackbar(new(&quot;Selecciona el cliente de la visita&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    return false;
                }
                else if (string.IsNullOrEmpty(add.AccesoDocumentacion.ResponsableCliente))
                {
                    _snackbar.InsertSnackbar(new(&quot;Introduce el responsable del cliente para el acceso de la visita&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    return false;
                }
                else if (string.IsNullOrEmpty(add.AccesoDocumentacion.CodigoJIRA) &amp;&amp; (add.Cliente.Nombre == &quot;VODAFONE&quot; || add.Cliente.Nombre == &quot;SEMI&quot;))
                {
                    _snackbar.InsertSnackbar(new(&quot;Introduce el c&oacute;digo JIRA para el acceso de la visita&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    return false;
                }
                else if (string.IsNullOrEmpty(add.AccesoDocumentacion.Contratista) &amp;&amp; (add.Cliente.Nombre == &quot;VODAFONE&quot; || add.Cliente.Nombre == &quot;SEMI&quot;))
                {
                    _snackbar.InsertSnackbar(new(&quot;Introduce contratista princial para el acceso de la visita&quot;, &quot;cancel&quot;, 5000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    return false;
                }
                else if (string.IsNullOrEmpty(add.Emplazamiento.Nombre))
                {
                    _snackbar.InsertSnackbar(new(&quot;El emplazamiento seleccionado no tiene nombre. Indica el nombre en el emplazamiento antes de crear una visita.&quot;, &quot;cancel&quot;, 10000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    return false;
                }

                else if (add.AccesoDocumentacion.SolicitarAcceso &amp;&amp; add.FechaEstimadaVisita == null)
                {
                    _snackbar.InsertSnackbar(new(&quot;No guardar una visita con solicitud de acceso y sin fecha de previsi&oacute;n&quot;, &quot;cancel&quot;, 10000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                    return false;
                }

                if (add.Operador.Nombre.NormalizeText() != add.Emplazamiento.Propietario.Nombre.NormalizeText())
                {
                    if (add.Emplazamiento.Operadores.FirstOrDefault(x =&gt; x.Operador.Nombre == add.Operador.Nombre) != null)
                    {
                        if (string.IsNullOrEmpty(add.Emplazamiento.Operadores.First(x =&gt; x.Operador.Nombre == add.Operador.Nombre).Codigo))
                        {
                            _snackbar.InsertSnackbar(new(&quot;Has seleccionado un operador distinto al propietario del emplazamiento, y este no tiene un c&oacute;digo de operador asignado. Por favor, actualiza el emplazamiento a&ntilde;adiendo el c&oacute;digo del operador asociado.&quot;, &quot;cancel&quot;, 10000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                            return false;
                        }
                    }
                    else
                    {
                        _snackbar.InsertSnackbar(new(&quot;Has seleccionado un operador distinto al propietario del emplazamiento, y este no tiene un c&oacute;digo de operador asignado. Por favor, actualiza el emplazamiento a&ntilde;adiendo el c&oacute;digo del operador asociado.&quot;, &quot;cancel&quot;, 10000, &quot;bg-red-600&quot;, &quot;text-white&quot;));
                        return false;
                    }
                }
            }

            return true;
        }
    }
    `
  },
  {
    "ID": 92,
    "ServicesName": "PersonalVisitasPage",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Visitas/PersonalVisitasPage",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil/visitas/misvisitas&quot;
    @using System.Text.Json
    @using VisitasLogic.Entities



    &lt;AuthorizePage Roles=&quot;@(new(){&quot;Visitas.AccesoDocumentacion&quot;,&quot;Visitas.Ingeniero&quot;,&quot;Visitas.Tecnico&quot;,
    &quot;Visitas.Supervisor&quot;})&quot; /&gt;

    &lt;div class=&quot;grid gap-4&quot;&gt;
        &lt;!-- Fila 1: Mapa con dos columnas --&gt;
        &lt;div class=&quot;grid grid-cols-10 gap-4 w-full max-h-[70vh] overflow-hidden&quot;&gt;
            &lt;!-- Columna para el mapa (60%) col-span-6| Mientras no aplique la ruta, sera 100%, col-span-10--&gt;
            &lt;div id=&quot;map&quot; class=&quot;col-span-10 min-h-[900px] h-[90%] rounded shadow-md&quot; style=&quot;transition: none;&quot;&gt;
            &lt;/div&gt;

            &lt;!-- Columna para los datos adicionales (40%) --&gt;
        
        &lt;/div&gt;



        &lt;!-- Fila 2: Tabla de datos --&gt;
        &lt;div class=&quot;w-full h-fit overflow-auto flex flex-wrap gap-3&quot;&gt;
        @if (Visitas.Documents != null)
        {
            &lt;table class=&quot;table-auto overflow-x-auto w-full h-fit rounded border border-slate-300/50&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Acciones
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Estado
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Cod. propietario
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Cod. operador
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Proyecto
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Nombre
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Creado por...
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Asignado a
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Provincia
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            Localidad
                        &lt;/th&gt;
                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            F. estimada
                        &lt;/th&gt;

                        &lt;th class=&quot;p-2 border border-slate-300/50 min-w-[100px]&quot;&gt;
                            F. real
                        &lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    @foreach (var v in Visitas.Documents)
                    {
                        &lt;tr&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                &lt;div class=&quot;w-full h-fit flex flex-warp gap-3&quot;&gt;
                                    @if (v.AsignadoA.Select(x =&gt; x.Id).Contains(_user.id) || _user.Permissions.Contains(PermissionConstantsFestivos.GetPaginatedFestivos)
                                || _user.Permissions.Contains(PermissionConstantsVisitas.AddVisitas) || _user.Roles.Contains(&quot;Admin&quot;))
                                    {
                                        @if (CanEditAcceso(v))
                                        {
                                            &lt;button class=&quot;p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        { };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={v.Id}&quot;);
                                                        })&quot;&gt;
                                                &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                    edit
                                                &lt;/span&gt;
                                            &lt;/button&gt;
                                        }
                                    }
                                    @if (v.Emplazamiento != null)
                                    {
                                        &lt;button class=&quot;p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async () =&gt; {

                                                            try
                                                            {
                                                                await _localStorage.RemoveItemAsync(&quot;emplazamientoId&quot;);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                // Manejar la excepci&oacute;n si es necesario
                                                            }
                                                            // Navegar a la p&aacute;gina de emplazamiento con el ID asociado
                                                            _nav.NavigateTo($&quot;/visitasmovil/emplazamientos/add?id={v.Emplazamiento.Id}&quot;);
                                                            })&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                zoom_in
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    }


                                    @* 
                                    &lt;AuthorizedContent Roles=&quot;@(new(){&quot;Visitas.Supervisor&quot;})&quot;&gt;
                                        &lt;button class=&quot;p-2 rounded bg-red-600 text-white&quot; @onclick=&quot;()=&gt;{IdBorrarVisita = v.Id; OpenModalConfirmation();}&quot;&gt;
                                            &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                delete
                                            &lt;/span&gt;
                                        &lt;/button&gt;
                                    &lt;/AuthorizedContent&gt; *@
                                &lt;/div&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[210px]&quot;&gt;
                                &lt;span class=&quot;p-2 rounded @(ColorEstados(v.Estados.Last().Index)) text-white&quot;&gt;@(v.Estados.Last().Nombre)&lt;/span&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                @(v.Emplazamiento != null ? v.Emplazamiento.Codigo : &quot;Sin datos&quot;)
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                @{
                                    var op = v.Emplazamiento != null ? v.Emplazamiento.Operadores.FirstOrDefault(x =&gt; x.Operador.Nombre == (v.Operador != null ? v.Operador.Nombre : &quot;&quot;)) : null;
                                }
                                @(op != null ? op.Codigo : &quot;&quot;)
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                @(v.Proyecto != null ? v.Proyecto.nombre : (v.Modulo != null ? v.Modulo.Nombre : &quot;Sin proyecto&quot;))
                            &lt;/td&gt;

                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                @(v.Emplazamiento != null ? v.Emplazamiento.Nombre : &quot;Sin datos&quot;)
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                @(v.CreatedByName)
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                &lt;div class=&quot;justify-center mx-auto w-full&quot;&gt;
                                    @if (v.AsignacionExterna)
                                    {
                                        &lt;span class=&quot;w-full text-center&quot;&gt;@(v.AsigExterna)&lt;/span&gt;
                                    }
                                    else
                                    {
                                        foreach (var user in v.AsignadoA)
                                        {
                                            &lt;span class=&quot;w-full text-center&quot;&gt;@($&quot;{user.Name} {user.LastName}&quot;)&lt;/span&gt;
                                            &lt;hr&gt;
                                            &lt;br /&gt;
                                        }
                                    }
                                &lt;/div&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                @(v.Emplazamiento != null &amp;&amp; v.Emplazamiento.Localidad != null ? (!string.IsNullOrEmpty(v.Emplazamiento.Localidad.Provincia) ? v.Emplazamiento.Localidad.Provincia : v.Emplazamiento.Localidad.Localidad) : &quot;Sin datos&quot;)
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                @(v.Emplazamiento != null &amp;&amp; v.Emplazamiento.Localidad != null ? v.Emplazamiento.Localidad.Localidad : &quot;Sin datos&quot;)
                            &lt;/td&gt;
                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                @(v.FechaEstimadaVisita != null ? v.FechaEstimadaVisita.Value.ToString(&quot;dd/MM/yyyy&quot;) : &quot;Sin datos&quot;)
                            &lt;/td&gt;

                            &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                @(v.FechaRealVisita != null ? v.FechaRealVisita.Value.ToString(&quot;dd/MM/yyyy&quot;) : &quot;Sin datos&quot;)
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;Paginator countAllDocuments=&quot;(int)Visitas.CountAllDocuments&quot; countPages=&quot;Visitas.PageCount&quot; filters=&quot;get&quot; ReloadData=&quot;()=&gt;LoadDataApi()&quot;&gt;

            &lt;/Paginator&gt;
        }
    &lt;/div&gt;
    &lt;/div&gt;

    &lt;style&gt;
        * {
            transition: none;
        }

        .tooltip-custom:hover {
            background-color: #333;
            color: #fff;
            font-size: 14px;
            padding: 4px 8px;
            border-radius: 4px;
        }
    &lt;/style&gt;

    @code {
        [Parameter] 
        public string? id { get; set; }

        List&lt;E_Emplazamientos&gt; EmplazamientosMap = new();
        List&lt;E_Emplazamientos&gt; EmplazamientosRutas = new();

        PaginatedResult&lt;E_Visitas&gt; Visitas = new();


        GetPaginatedVisitasDTORequest get;

        E_Rutas add;

        private string routeName = string.Empty;
        // Diccionario para mapear los IDs a las coordenadas
        private Dictionary&lt;string, string&gt; routePointsMap = new Dictionary&lt;string, string&gt;();

        private List&lt;string&gt; selectedPoints = new List&lt;string&gt;();
        // Verificar si 'Visitas.Documents' est&aacute; disponible y tiene elementos
        private bool HasVisitas =&gt; Visitas?.Documents != null &amp;&amp; Visitas.Documents.Any();



        protected override async Task OnAfterRenderAsync(bool firstRender)
        {



        }

        protected override async Task OnInitializedAsync()
        {
            // Inicializamos get aqu&iacute;, usando el valor de id
            get = new GetPaginatedVisitasDTORequest
            {
                    Search = &quot;&quot;,
                    PageNumber = 1,
                    PageSize = 10,
                    UserId = _user.id // Aqu&iacute; ya puedes usar el valor de id
            };

            await LoadDataApi(); 

            await LoadMap();
        
            await InvokeAsync(StateHasChanged);

        }
        async Task LoadDataApi()
        {
            try
            {
                    // Implementaci&oacute;n de carga de datos con get
                    Visitas = await _mongoContext.GetPaginatedVisitas(get);
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;PersonalVisitasPage&quot;, &quot;LoadDataApi&quot;, DateTime.UtcNow);

                throw;
            }

        

            // Cualquier otro c&oacute;digo adicional aqu&iacute;
            await InvokeAsync(StateHasChanged);
        }


        private async Task LoadMap()
        {

            double latitudPredeterminada = 40.4167; // Por ejemplo, Madrid
            double longitudPredeterminada = -3.70325;

            try
            {
                if (Visitas.Documents != null)
                        {

                            foreach (var Documento in Visitas.Documents)
                            {
                                // Llama al m&eacute;todo y almacena el resultado en una variable Result&lt;E_Emplazamientos&gt;
                                var result = await _mongoContext.GetOneEmplazamientos(Documento.Emplazamiento.Id);

                                EmplazamientosMap.Add(result.Value);

                            }   

            
                            await _js.InvokeVoidAsync(&quot;GenerarMapa&quot;, latitudPredeterminada, longitudPredeterminada, EmplazamientosMap);
                        }
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;PersonalVisitasPage&quot;, &quot;LoadMap&quot;, DateTime.UtcNow);

                throw;
            }
            
        }


        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };


        bool CanEditAcceso(E_Visitas data)
        {
            if (data.Estados.Last().Nombre == &quot;Pte. Autorizaci&oacute;n Acceso&quot; || data.Estados.Last().Nombre == &quot;Pte. Solicitud Acceso&quot;)
            {
                if (!_user.Roles.Contains(&quot;Visitas.AccesoDocumentacion&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Visitas.Supervisor&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Admin&quot;))
                {
                    return false;
                }
            }

            return true;
        }

    

    

        #region   --Zona para manejar la creaci&oacute;n y visualizaci&oacute;n de rutas --
        

        //// M&eacute;todo que se ejecuta cuando se carga el mapa o cuando las visitas est&aacute;n disponibles
        //private void LoadRoutePoints()
        //{
        //    // Llenar routePointsMap con los IDs y las coordenadas (Latitud, Longitud)
        //    foreach (var visita in Visitas.Documents)
        //    {
        //        if (visita.Emplazamiento != null)
        //        {
        //            var lat = visita.Emplazamiento.Latitud;
        //            var lon = visita.Emplazamiento.Longitud;
        //            string coordinates = $&quot;{lat} | {lon}&quot;;
        //
        //            // Suponiendo que visita.Id es el ID &uacute;nico del punto de ruta
        //            routePointsMap[visita.Id] = coordinates;
        //        }
        //    }
        //}
        //
        //
        //
        //// M&eacute;todo para obtener las coordenadas de los puntos seleccionados
        //private IEnumerable&lt;string&gt; GetSelectedCoordinates()
        //{
        //    return selectedPoints.Select(id =&gt;
        // {
        //     var emplazamiento = EmplazamientosMap.FirstOrDefault(e =&gt; e.Id == id);
        //     return emplazamiento != null
        //         ? $&quot;{emplazamiento.Latitud} | {emplazamiento.Longitud}&quot;
        //         : &quot;Desconocido&quot;;
        // });
        //}


    // private void HandleRoutePointChange(ChangeEventArgs e)
    // {
    //     // Convertir el valor de ChangeEventArgs en una lista de string para los Ids seleccionados.
    //     if (e.Value is IEnumerable&lt;string&gt; selectedValues)
    //     {
    //         selectedPoints = selectedValues.ToList();
    //         StateHasChanged();
    //     }
    //     // Limpiar la lista EmplazamientosRutas para evitar duplicados
    //     EmplazamientosRutas.Clear();
    //
    //     foreach (var point in selectedPoints)
    //     {
    //         var emplazamiento = EmplazamientosMap.FirstOrDefault(x =&gt; x.Id == point);
    //
    //         // Verificar si el emplazamiento no es nulo y si no est&aacute; ya en EmplazamientosRutas
    //         if (emplazamiento != null &amp;&amp; !EmplazamientosRutas.Any(e =&gt; e.Id == emplazamiento.Id))
    //         {
    //             EmplazamientosRutas.Add(emplazamiento);
    //         }
    //     }
    //    
    //  
    //  
    // }

        //private async Task SaveRoute()
        //{
        //    if (string.IsNullOrEmpty(routeName) || !EmplazamientosRutas.Any())
        //    {
        //        // Opcional: agregar l&oacute;gica de validaci&oacute;n si no hay nombre o puntos seleccionados
        //        return;
        //    }
        //
        //    // Crear un objeto de ruta para almacenar en la base de datos o donde se necesite
        //    var nuevaRuta = new E_Rutas
        //        {
        //            PropietarioRuta = _user.id,
        //            NombreRuta = routeName,
        //            Emplazamientos = new List&lt;E_Emplazamientos&gt;(EmplazamientosRutas)
        //        };
        //
        //    // L&oacute;gica para guardar nuevaRuta, ya sea en tu base de datos o en el almacenamiento local
        //    await _mongoContext.AddRutas(nuevaRuta);
        //
        //    // Opcional: reiniciar los valores despu&eacute;s de guardar
        //    routeName = string.Empty;
        //    EmplazamientosRutas.Clear();
        //    selectedPoints.Clear();
        //
        //    await InvokeAsync(StateHasChanged);
        //}
        //
        //private void CreateRoute()
        //{
        //    // Aqu&iacute; puedes implementar la l&oacute;gica para crear una nueva ruta
        //    // Puedes navegar a otra p&aacute;gina o mostrar un formulario adicional si es necesario
        //    Console.WriteLine(&quot;Creando nueva ruta...&quot;);
        //}

        #endregion
    }
    `
  },
  {
    "ID": 93,
    "ServicesName": "VisitasPage",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Visitas/VisitasPage",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil/visitas&quot;
    @using System.Text.Json
    @using MongoDB.Bson.IO
    @using Newtonsoft.Json
    @using System.Web;


    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitas)&quot;&gt;&lt;/AuthorizePage&gt;
    @*&lt;AuthorizePage Roles=&quot;@(new(){&quot;Visitas.AccesoDocumentacion&quot;,&quot;Visitas.Ingeniero&quot;,&quot;Visitas.Tecnico&quot;,
    &quot;Visitas.Supervisor&quot;})&quot; /&gt;*@

    &lt;div class=&quot;w-full flex flex-wrap p-6 gap-3&quot;&gt;
        &lt;h1 class=&quot; w-full text-3xl text-blue-400&quot; tabindex=&quot;none&quot;&gt;Visitas&lt;/h1&gt;
        &lt;h2 class=&quot;w-full text-xl text-slate-950&quot;&gt;Aqu&iacute; se pueden ver todas las visitas&lt;/h2&gt;

        &lt;div class=&quot;w-full flex flex-wrap justify-between items-center&quot;&gt;
            &lt;div class=&quot;flex flex-wrap items-center gap-3&quot;&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasAddVisita)&quot;&gt;
                
                    @*&lt;AuthorizedContent Permissions=&quot;@(PermissionConstantsVisitas.AddVisitas)&quot;&gt;*@
                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                            @onclick='@(async ()=&gt;{    try{
                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                            }
                            catch (Exception)
                            { };
                            _nav.NavigateTo(&quot;/visitasmovil/visitas/add&quot;);})'&gt;
                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            location_on
                        &lt;/span&gt;
                        A&ntilde;adir visita
                    &lt;/button&gt;
                &lt;/AuthorizedContent&gt;
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasExportAccesos)&quot;&gt;
                    @*&lt;AuthorizedContent Roles=&quot;@([&quot;Visitas.Supervisor&quot;])&quot;&gt;*@
                    &lt;a class=&quot;cursor-pointer p-2 rounded bg-blue-400 text-white&quot; href=&quot;api/VisitasCompletas/Export?Password=LPSVisitas2024&quot; target=&quot;_blank&quot; download&gt;Exportar visitas&lt;/a&gt;
                &lt;/AuthorizedContent&gt;

                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasExportVisita)&quot;&gt;
                    @*&lt;AuthorizedContent Roles=&quot;@([&quot;Visitas.AccesoDocumentacion&quot;])&quot;&gt;*@
                    &lt;a class=&quot;cursor-pointer p-2 rounded bg-blue-400 text-white&quot; href=&quot;api/Visitas/Export?Password=LPSVisitas2024&quot; target=&quot;_blank&quot; download&gt;Exportar accesos&lt;/a&gt;
                &lt;/AuthorizedContent&gt;
                        
                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasVerMisVisitas)&quot;&gt;
        
                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white flex flex-wrap items-center gap-3&quot;
                        @onclick='OpenInNewTab'&gt;
                
                
                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                            location_on
                        &lt;/span&gt;
                        Ver mis visitas
                    &lt;/button&gt;
                &lt;/AuthorizedContent&gt;
            &lt;/div&gt;

            &lt;div class=&quot;flex flex-wrap items-center gap-3 mt-3&quot;&gt;
            

                @if (baseData != null)
                {
                    &lt;Checkbox FontSize=&quot;text-base&quot; Message=&quot;Mis creaciones&quot; Checked=get.MisCreaciones
                            ChangeCheck=&quot;()=&gt; {get.MisCreaciones=!get.MisCreaciones; LoadDataApi();}&quot;&gt;&lt;/Checkbox&gt;

                    &lt;Checkbox FontSize=&quot;text-base&quot; Message=&quot;Mis asignaciones&quot; Checked=get.MisAsignaciones
                            ChangeCheck=&quot;()=&gt; {get.MisAsignaciones=!get.MisAsignaciones; LoadDataApi();}&quot;&gt;&lt;/Checkbox&gt;

                    &lt;MultiSelect T=&quot;string&quot; Placeholder=&quot;Estados...&quot;
                                Values=&quot;baseData.Estados.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x=&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList()&quot;
                                InitialValues=&quot;baseData.Estados.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x=&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList()&quot;
                                OptionValue=&quot;(x)=&gt; x&quot; ToString=&quot;@((x)=&gt; string.Join(&quot;, &quot;, x))&quot; ZIndex=&quot;1000&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                SelectValues=&quot;@((x)=&gt;{estadosSearch = x;})&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; Placeholder=&quot;Proyectos...&quot;
                                Values=&quot;baseData.Proyectos.Where(x =&gt; !string.IsNullOrEmpty(x.nombre)).OrderBy(x=&gt; x.nombre).Select(x =&gt; x.nombre).ToList()&quot;
                                InitialValues=&quot;baseData.Proyectos.Where(x =&gt; !string.IsNullOrEmpty(x.nombre)).OrderBy(x=&gt; x.nombre).Select(x =&gt; x.nombre).ToList()&quot;
                                OptionValue=&quot;(x)=&gt; x&quot; ToString=&quot;@((x)=&gt; string.Join(&quot;, &quot;, x))&quot; ZIndex=&quot;999&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                SelectValues=&quot;@((x)=&gt;{proyectosSearch = x;})&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; Placeholder=&quot;Propietarios...&quot;
                                Values=&quot;baseData.Clientes.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x=&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList()&quot;
                                InitialValues=&quot;baseData.Clientes.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x=&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList()&quot;
                                OptionValue=&quot;(x)=&gt; x&quot; ToString=&quot;@((x)=&gt; string.Join(&quot;, &quot;, x))&quot; ZIndex=&quot;998&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                SelectValues=&quot;@((x)=&gt;{propietariosSearch = x;})&quot;&gt;&lt;/MultiSelect&gt;

                    &lt;MultiSelect T=&quot;string&quot; Placeholder=&quot;Clientes...&quot;
                                Values=&quot;baseData.Clientes.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x=&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList()&quot;
                                InitialValues=&quot;baseData.Clientes.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x=&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList()&quot;
                                OptionValue=&quot;(x)=&gt; x&quot; ToString=&quot;@((x)=&gt; string.Join(&quot;, &quot;, x))&quot; ZIndex=&quot;997&quot; WidthClass=&quot;w-[15.5vw]&quot;
                                SelectValues=&quot;@((x)=&gt;{clientesSearch = x;})&quot;&gt;&lt;/MultiSelect&gt;
                }
                
                &lt;input type=&quot;search&quot; placeholder=&quot;Buscar...&quot; class=&quot;p-2 text-base rounded border border-slate-300&quot; @bind-value=&quot;searchSet&quot;&gt;&lt;/input&gt;
                &lt;button type=&quot;button&quot; class=&quot;p-2 rounded bg-green-400 text-white&quot; @onclick=&quot;ResetFilters&quot;&gt;Restablecer filtros&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;w-full min-h-[calc(100dvh_-_55px)] h-fit grid grid-rows-[50vh_auto] gap-3&quot;&gt;
            &lt;!-- Contenedor del mapa, ahora ocupa la parte superior --&gt;
            &lt;div  class=&quot;w-full rounded overflow-hidden&quot;&gt;
                &lt;div id=&quot;map&quot; class=&quot;w-full h-full&quot; style=&quot;transition: none;&quot;&gt;&lt;/div&gt;
            &lt;/div&gt;

            &lt;!-- Contenedor de la tabla --&gt;
            &lt;div class=&quot;w-full overflow-auto&quot;&gt;
                @if (Visitas.Documents != null)
                {
                    &lt;table class=&quot;table-auto overflow-x-auto w-full h-fit rounded border border-slate-300/50&quot;&gt;
                        &lt;thead&gt;
                            &lt;tr&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Acciones
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Estado
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Cod. propietario
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Cod. operador
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Proyecto
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Nombre
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Creado por...
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Asignado a
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Provincia
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    Localidad
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    F. estimada
                                &lt;/th&gt;
                                &lt;th class=&quot;p-2 border border-black-300/50 min-w-[80px] bg-blue-400&quot;&gt;
                                    F. real
                                &lt;/th&gt;
                            &lt;/tr&gt;
                        &lt;/thead&gt;
                        &lt;tbody&gt;
                            @foreach (var v in Visitas.Documents)
                            {
                                &lt;tr&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                        &lt;div class=&quot;w-full h-fit flex flex-warp gap-3&quot;&gt;
                                            @if (v.AsignadoA.Select(x =&gt; x.Id).Contains(_user.id) || _user.Permissions.Contains(PermissionConstantsFestivos.GetPaginatedFestivos)
                                        || _user.Permissions.Contains(PermissionConstantsVisitas.AddVisitas) || _user.Permissions.Contains(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasEditVisita) || _user.Roles.Contains(&quot;Admin&quot;))
                                            {
                                                @if (CanEditAcceso(v))
                                                {
                                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async ()=&gt;{
                                                        try
                                                        {
                                                            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);
                                                        }
                                                        catch (Exception)
                                                        { 
                                                        
                                                        };
                                                        _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={v.Id}&quot;);
                                                        })&quot;&gt;
                                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                            edit
                                                        &lt;/span&gt;
                                                    &lt;/button&gt;
                                                }
                                            }
                                            @if (v.Emplazamiento != null)
                                            {
                                                &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasVerVisita)&quot;&gt;
                
                                                    &lt;button class=&quot;p-2 rounded bg-blue-400 text-white&quot; @onclick=&quot;@(async () =&gt; {

                                                                try
                                                                {
                                                                    await _localStorage.RemoveItemAsync(&quot;emplazamientoId&quot;);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    // Manejar la excepci&oacute;n si es necesario
                                                                }
                                                                // Navegar a la p&aacute;gina de emplazamiento con el ID asociado
                                                                _nav.NavigateTo($&quot;/visitasmovil/emplazamientos/add?id={v.Emplazamiento.Id}&quot;);
                                                                })&quot;&gt;
                                                        &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                            zoom_in
                                                        &lt;/span&gt;
                                                    &lt;/button&gt;
                                                &lt;/AuthorizedContent&gt;
                                            }


                                            &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitasDellVisita)&quot;&gt;
                
                                                @*&lt;AuthorizedContent Roles=&quot;@(new(){&quot;Visitas.Supervisor&quot;})&quot;&gt;*@
                                                &lt;button class=&quot;p-2 rounded bg-red-600 text-white&quot; @onclick=&quot;()=&gt;{IdBorrarVisita = v.Id; OpenModalConfirmation();}&quot;&gt;
                                                    &lt;span class=&quot;material-symbols-outlined&quot;&gt;
                                                        delete
                                                    &lt;/span&gt;
                                                &lt;/button&gt;
                                            &lt;/AuthorizedContent&gt;
                                        &lt;/div&gt;
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[210px]&quot;&gt;
                                        &lt;span class=&quot;p-2 rounded @(ColorEstados(v.Estados.Last().Index)) text-white&quot;&gt;@(v.Estados.Last().Nombre)&lt;/span&gt;
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                        @(v.Emplazamiento != null ? v.Emplazamiento.Codigo : &quot;Sin datos&quot;)
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                        @{
                                            var op = v.Emplazamiento != null ? v.Emplazamiento.Operadores.FirstOrDefault(x =&gt; x.Operador.Nombre == (v.Operador != null ? v.Operador.Nombre : &quot;&quot;)) : null;
                                        }
                                        @(op != null ? op.Codigo : &quot;&quot;)
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                        @(v.Proyecto != null ? v.Proyecto.nombre : (v.Modulo != null ? v.Modulo.Nombre : &quot;Sin proyecto&quot;))
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                        @(v.Emplazamiento != null ? v.Emplazamiento.Nombre : &quot;Sin datos&quot;)
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50&quot;&gt;
                                        @(v.CreatedByName)
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                        &lt;div class=&quot;justify-center mx-auto w-full&quot;&gt;
                                            @if (v.AsignacionExterna)
                                            {
                                                &lt;span class=&quot;w-full text-center&quot;&gt;@(v.AsigExterna)&lt;/span&gt;
                                            }
                                            else
                                            {
                                                foreach (var user in v.AsignadoA)
                                                {
                                                    &lt;span class=&quot;w-full text-center&quot;&gt;@($&quot;{user.Name} {user.LastName}&quot;)&lt;/span&gt;
                                                    &lt;hr&gt;
                                                    &lt;br /&gt;
                                                }
                                            }
                                        &lt;/div&gt;
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                        @(v.Emplazamiento != null &amp;&amp; v.Emplazamiento.Localidad != null ? (!string.IsNullOrEmpty(v.Emplazamiento.Localidad.Provincia) ? v.Emplazamiento.Localidad.Provincia : v.Emplazamiento.Localidad.Localidad) : &quot;Sin datos&quot;)
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 min-w-[150px]&quot;&gt;
                                        @(v.Emplazamiento != null &amp;&amp; v.Emplazamiento.Localidad != null ? v.Emplazamiento.Localidad.Localidad : &quot;Sin datos&quot;)
                                    &lt;/td&gt;
                                    &lt;td class=&quot;p-2 border border-slate-300/50 w-auto&quot;&gt;
                                        @(v.FechaEstimadaVisita != null ? v.FechaEstimadaVisita.Value.ToString(&quot;dd/MM/yyyy&quot;) : &quot;Sin datos&quot;)
                                    &lt;/td&gt;

                                    &lt;td class=&quot;p-2 border border-slate-300/50 w-auto&quot;&gt;
                                        @(v.FechaRealVisita != null ? v.FechaRealVisita.Value.ToString(&quot;dd/MM/yyyy&quot;) : &quot;Sin datos&quot;)
                                    &lt;/td&gt;
                                &lt;/tr&gt;
                            }
                        &lt;/tbody&gt;
                    &lt;/table&gt;
                    &lt;Paginator countAllDocuments=&quot;(int)Visitas.CountAllDocuments&quot; countPages=&quot;Visitas.PageCount&quot; filters=&quot;get&quot; ReloadData=&quot;()=&gt;LoadDataApi()&quot;&gt;
                    &lt;/Paginator&gt;
                }
            &lt;/div&gt;
        &lt;/div&gt;


    
    &lt;/div&gt;

    &lt;style&gt;
        * {
            transition: none;
        }
    &lt;/style&gt;

    @code {


        private List&lt;object&gt; listaEmplazamientosMapa = new();
        List&lt;E_Emplazamientos&gt; EmplazamientosMap = new();
        PaginatedResult&lt;E_Visitas&gt; Visitas = new();

        E_Visitas add { get; set; }

        BaseDataDTO baseData = null;

        GetPaginatedVisitasDTORequest get = new()
            {
                Search = &quot;&quot;,
                PageNumber = 1,
                PageSize = 10,

            };


        GetPaginatedEmplazamientosDTORequest emplazamientosSearch = new()
            {
                Search = &quot;&quot;,
                CheckOperadores = false,
                PageNumber = 1,
                PageSize = 100000000
            };


    
        string searchSet
        {
            get
            {
                return get.Search;
            }
            set
            {
                get.Search = value;

                LoadDataApi();
            }
        }

        IEnumerable&lt;string&gt; estadosSearch
        {
            get
            {
                return get.Estados;
            }
            set
            {
                get.Estados = value.ToList();


                LoadDataApi();
            }
        }

        IEnumerable&lt;string&gt; propietariosSearch
        {
            get
            {
                return get.Propietarios;
            }
            set
            {
                get.Propietarios = value.ToList();
                LoadDataApi();
            }
        }

        IEnumerable&lt;string&gt; clientesSearch
        {
            get
            {
                return get.Clientes;
            }
            set
            {
                get.Clientes = value.ToList();
                LoadDataApi();
            }
        }

        IEnumerable&lt;string&gt; proyectosSearch
        {
            get
            {
                return get.Proyectos;
            }
            set
            {
                get.Proyectos = value.ToList();
                LoadDataApi();
            }
        }

        


        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender) return;
            _main.BackgroundImage = &quot;&quot;;


            await _localStorage.RemoveItemAsync(&quot;visitasadd&quot;);

            await LoadMap();
        }


        bool CanEditAcceso(E_Visitas data)
        {
            if (data.Estados.Last().Nombre == &quot;Pte. Autorizaci&oacute;n Acceso&quot; || data.Estados.Last().Nombre == &quot;Pte. Solicitud Acceso&quot;)
            {
                if (!_user.Roles.Contains(&quot;Visitas.AccesoDocumentacion&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Visitas.Supervisor&quot;) &amp;&amp; !_user.Roles.Contains(&quot;Admin&quot;))
                {
                    return false;
                }
            }

            return true;
        }
        async Task SaveFilters()
        {
            // Guardar los filtros actuales en el almacenamiento local
            await _localStorage.SetItemAsync(&quot;filtrosVisitas&quot;, get);

            try
            {
                // Comprobar si los filtros se han guardado correctamente
                        var savedFilters = await _localStorage.GetItemAsync&lt;GetPaginatedVisitasDTORequest&gt;(&quot;filtrosVisitas&quot;);
                        if (savedFilters != null &amp;&amp; FiltersAreEqual(get, savedFilters))
                        {
                            Console.WriteLine(&quot;Los filtros se han guardado correctamente.&quot;);
                        }
                        else
                        {
                            Console.WriteLine(&quot;Error al guardar los filtros.&quot;);
                        }

                    
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitasPage&quot;, &quot;SaveFilters&quot;, DateTime.UtcNow);

                throw;
            }
            
        }

        bool FiltersAreEqual(GetPaginatedVisitasDTORequest filters1, GetPaginatedVisitasDTORequest filters2)
        {
            // Compara todos los campos relevantes de los filtros
            return filters1.Search == filters2.Search &amp;&amp;
                filters1.PageNumber == filters2.PageNumber &amp;&amp;
                filters1.PageSize == filters2.PageSize &amp;&amp;
                Enumerable.SequenceEqual(filters1.Estados.OrderBy(e =&gt; e), filters2.Estados.OrderBy(e =&gt; e)) &amp;&amp;
                Enumerable.SequenceEqual(filters1.Propietarios.OrderBy(p =&gt; p), filters2.Propietarios.OrderBy(p =&gt; p)) &amp;&amp;
                Enumerable.SequenceEqual(filters1.Clientes.OrderBy(c =&gt; c), filters2.Clientes.OrderBy(c =&gt; c)) &amp;&amp;
                Enumerable.SequenceEqual(filters1.Proyectos.OrderBy(p =&gt; p), filters2.Proyectos.OrderBy(p =&gt; p));


        }


        [JSInvokable]
        async Task LoadMap()
        {
            double latitudPredeterminada = 40.4167; // Por ejemplo, Madrid
            double longitudPredeterminada = -3.70325;


            GetPaginatedVisitasDTORequest getAll = new()
                {
                    Search = &quot;&quot;,
                    PageNumber = 1,
                    PageSize = 100000000
                };

                try
                {
                    PaginatedResult&lt;E_Visitas&gt; VisitasAll = await _mongoContext.GetPaginatedVisitas(getAll);

                            listaEmplazamientosMapa.Clear();
                            foreach (var emp in VisitasAll.Documents)
                            {
                                if (emp.Estados.Select(x =&gt; x.Index).LastOrDefault() != 9)
                                {
                                    listaEmplazamientosMapa.Add(
                                new
                                {
                                    nombreEmplazamiento = emp.Emplazamiento.Nombre,
                                    latitudEmplazamiento = emp.Emplazamiento.Latitud,
                                    longitudEmplazamiento = emp.Emplazamiento.Longitud,
                                    idEmplazamiento = emp.Emplazamiento.Id,
                                    estadoVisita = emp.Estados.Select(x =&gt; x.Index).LastOrDefault()
                                });


                                }


                            }

                            await _js.InvokeAsync&lt;string&gt;(&quot;GenerarMapaPrincipalVisitas&quot;, latitudPredeterminada, longitudPredeterminada, listaEmplazamientosMapa);
                }
                catch (Exception e)
                {
                    
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitasPage&quot;, &quot;SaveFilters&quot;, DateTime.UtcNow);

                    throw;
                }
            




        }

        async Task LoadDataApi()
        {
            _main.IsLoading = true;

            await _localStorage.SetItemAsync(&quot;filtrosVisitas&quot;, get);

            var pageSize = _main.QueryParameters(_nav)[&quot;pageSize&quot;];
            var pageNumber = _main.QueryParameters(_nav)[&quot;pageNumber&quot;];

            if (!string.IsNullOrEmpty(pageSize) &amp;&amp; !string.IsNullOrEmpty(pageNumber))
            {
                get.PageNumber = int.Parse(pageNumber);
                get.PageSize = int.Parse(pageSize);
            }

            try
            {
                Visitas = await _mongoContext.GetPaginatedVisitas(get);

                        var dataBase = await _mongoContext.BaseDataVisitas();

                        baseData = dataBase.Value;

                        //await AssignMarkers();

                        await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                
                await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitasPage&quot;, &quot;LoadDataApi&quot;, DateTime.UtcNow);

                throw;
            }

        

            _main.IsLoading = false;
        }

        protected override async Task OnInitializedAsync()
        {
            // Verificar si la navegaci&oacute;n es una actualizaci&oacute;n de p&aacute;gina
            var shouldResetFilters = new Uri(_nav.Uri).PathAndQuery == _nav.BaseUri;

            if (shouldResetFilters)
            {
                // Si es una actualizaci&oacute;n de p&aacute;gina, restablecer los filtros
                get = new GetPaginatedVisitasDTORequest
                    {
                        Search = &quot;&quot;,
                        PageNumber = 1,
                        PageSize = 10,
                        // Restablecer otros campos de filtro seg&uacute;n sea necesario
                    };
            }
            else
            {
                // Si no es una actualizaci&oacute;n de p&aacute;gina, intentar recuperar los filtros guardados
                get = await _localStorage.GetItemAsync&lt;GetPaginatedVisitasDTORequest&gt;(&quot;filtrosVisitas&quot;) ?? new GetPaginatedVisitasDTORequest
                    {
                        Search = &quot;&quot;,
                        PageNumber = 1,
                        PageSize = 10,
                        // Restablecer otros campos de filtro seg&uacute;n sea necesario
                    };
            }

            await LoadDataApi();

        }

        async Task ResetFilters()
        {
            // Restablecer los checkboxes a su estado por defecto
            get.MisCreaciones = false;
            get.MisAsignaciones = false;

            // Restablecer los MultiSelect a sus valores iniciales
            estadosSearch = baseData.Estados.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x =&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList();
            proyectosSearch = baseData.Proyectos.Where(x =&gt; !string.IsNullOrEmpty(x.nombre)).OrderBy(x =&gt; x.nombre).Select(x =&gt; x.nombre).ToList();
            propietariosSearch = baseData.Clientes.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x =&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList();
            clientesSearch = baseData.Clientes.Where(x =&gt; !string.IsNullOrEmpty(x.Nombre)).OrderBy(x =&gt; x.Nombre).Select(x =&gt; x.Nombre).ToList();

            // Restablecer el campo de b&uacute;squeda
            searchSet = &quot;&quot;;

            // Actualizar la interfaz de usuario y recargar los datos
            await  LoadDataApi();
        }



        public string ColorEstados(int index) =&gt; index switch
        {
            0 =&gt; &quot;bg-amber-600&quot;,
            1 =&gt; &quot;bg-amber-600&quot;,
            2 =&gt; &quot;bg-amber-600&quot;,
            3 =&gt; &quot;bg-red-600&quot;,
            4 =&gt; &quot;bg-blue-600&quot;,
            5 =&gt; &quot;bg-blue-800&quot;,
            6 =&gt; &quot;bg-green-600&quot;,
            7 =&gt; &quot;bg-slate-600&quot;,
            8 =&gt; &quot;bg-slate-950&quot;,
            9 =&gt; &quot;bg-teal-600&quot;,
            10 =&gt; &quot;bg-amber-600&quot;,
            11 =&gt; &quot;bg-amber-600&quot;,
        };



        [JSInvokable]
        public void SetLocation(string id)
        {
            _nav.NavigateTo($&quot;/visitasmovil/visitas/add?id={id}&quot;);
        }





        [JSInvokable]
        private async Task OpenInNewTab()
        {
            var url = _nav.ToAbsoluteUri(&quot;/visitasmovil/visitas/misvisitas&quot;).ToString();
            await _js.InvokeVoidAsync(&quot;window.open&quot;, url, &quot;_blank&quot;);
        }

        // Modal borrar

        public string IdBorrarVisita = &quot;&quot;;

        void OpenModalConfirmation()
        {
            var modal = _modal.ShowModal(typeof(ConfirmationModal), default, FixedWidth: 60);

            modal.OnCloseModal += DeleteVisita;
        }

        async void DeleteVisita(bool success)
        {
            if (success)
            {
                _main.IsLoading = true;
                try
                {
                    await _mongoContext.DeleteVisita(IdBorrarVisita);
                }
                catch (Exception e)
                {
                    
                    await _mongoContext.RegistroError(e.Message, _user.name, _user.id, &quot;VisitasPage&quot;, &quot;DeleteVisita&quot;, DateTime.UtcNow);

                    throw;
                }
            
                await LoadDataApi();
            }
        }
    }
    `
  },
  {
    "ID": 94,
    "ServicesName": "Index",
    "ServicesRoute": "Components/Areas/MovilF/Visitas/Index",
    "ServicesDescription":``,
    "Code":`
    @page &quot;/visitasmovil&quot;
    &lt;AuthorizePage Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisita)&quot;&gt;&lt;/AuthorizePage&gt;
    &lt;div class=&quot;w-full h-[calc(100dvh_-_55px)] flex flex-wrap items-center justify-center gap-20&quot; style=&quot;z-index: 0;&quot;&gt;
        &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasVisitas)&quot;&gt;

            &lt;div class=&quot;w-[200px] h-[275px] p-2 flex flex-wrap gap-[10px] rounded shadow-md bg-white cursor-pointer &quot; @onclick=&quot;@(() =&gt; _nav.NavigateTo(&quot;/visitasmovil/Visitas&quot;))&quot;&gt;
                &lt;div style=&quot;background-image: url(./Images/Index/visitas.jpg); background-size: cover;&quot; class=&quot;w-full h-[175px] rounded-md&quot;&gt;&lt;/div&gt;
                &lt;span class=&quot;w-full text-lg text-center text-blue-400&quot;&gt;Visitas&lt;/span&gt;
            &lt;/div&gt;
        &lt;/AuthorizedContent&gt;
        &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasEmplazamientos)&quot;&gt;

            &lt;div class=&quot;w-[200px] h-[275px] p-2 flex flex-wrap gap-[10px] rounded shadow-md bg-white cursor-pointer &quot; @onclick=&quot;@(() =&gt; _nav.NavigateTo(&quot;/visitasmovil/Emplazamientos&quot;))&quot;&gt;
                &lt;div style=&quot;background-image: url(./Images/Index/emplazamientos.jpg); background-size: cover;&quot; class=&quot;w-full h-[175px] rounded-md&quot;&gt;&lt;/div&gt;
                &lt;span class=&quot;w-full text-lg text-center text-blue-400&quot;&gt;Emplazamientos&lt;/span&gt;
            &lt;/div&gt;
        &lt;/AuthorizedContent&gt;
        &lt;AuthorizedContent Permissions=&quot;@(Security.Permisos.PermissionConstantsMovil.MovilVisitasCalendario)&quot;&gt;

            &lt;div class=&quot;w-[200px] h-[275px] p-2 flex flex-wrap gap-[10px] rounded shadow-md bg-white cursor-pointer &quot; @onclick=&quot;@(() =&gt; _nav.NavigateTo(&quot;/visitasmovil/Calendario&quot;))&quot;&gt;
                &lt;div style=&quot;background-image: url(./Images/Index/calendario.jpg); background-size: cover;&quot; class=&quot;w-full h-[175px] rounded-md&quot;&gt;&lt;/div&gt;
                &lt;span class=&quot;w-full text-lg text-center text-blue-400&quot;&gt;Calendario&lt;/span&gt;
            &lt;/div&gt;
        &lt;/AuthorizedContent&gt;
    &lt;/div&gt;

    @code {
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender) return;

            _main.LoginReloadAction += () =&gt; InvokeAsync(StateHasChanged);

            _main.BackgroundImage = &quot;&quot;;
        }
    }
    `
  }
]

// Variables para la paginación
let currentPage = 1;
const itemsPerPage = 10;
let filteredData = [...data];

// Función para mostrar las aplicaciones con paginación
function displayApps(page = 1) {
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = filteredData.slice(startIndex, endIndex);
    
    let cards = '';
    
    if (paginatedData.length === 0) {
        cards = `
            <div class="no-results">
                <i class="fa-solid fa-search"></i>
                <p>No se encontraron aplicaciones que coincidan con la búsqueda.</p>
                <p>Intenta con otros términos o revisa la ortografía.</p>
            </div>
        `;
    } else {
        paginatedData.forEach(app => {
            cards += `
                <div class="app-card">
                    <div class="app-content">
                        <h2 class="app-title"><i class="fa-solid fa-cube"></i> ${app.ServicesName}</h2>
                        <p class="app-description">${app.ServicesDescription}</p>
                        <div class="app-route"><i class="fa-solid fa-link"></i> Ruta: ${app.ServicesRoute}</div>
                        <div class="app-meta">
                            <span class="app-meta-item"><i class="fa-solid fa-hashtag"></i> ID: ${app.ID}</span>
                            <span class="app-meta-item"><i class="fa-solid fa-code-branch"></i> Versión: 1.0</span>
                            <span class="app-meta-item"><i class="fa-solid fa-calendar-check"></i> Última actualización: 2025-05-13</span>
                        </div>
                    </div>
                    <div class="code-container">
                        <div class="code-header">
                            <span class="code-title">${app.ServicesName}.cs</span>
                            <button class="code-copy" onclick="copyCode(this)">
                                <i class="fa-regular fa-copy"></i> Copiar
                            </button>
                        </div>
                        <pre class="code-content"><code class="lang-csharp">${app.Code}</code></pre>
                    </div>
                </div>
            `;
        });
    }
    
    document.getElementById('app-container').innerHTML = cards;
    Prism.highlightAll();
    
    // Actualizar paginación
    updatePagination();
}

// Función para actualizar los botones de paginación
function updatePagination() {
    const totalPages = Math.ceil(filteredData.length / itemsPerPage);
    let paginationHTML = '';
    
    if (totalPages > 1) {
        // Botón anterior
        paginationHTML += `<button class="pagination-button" ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})"><i class="fa-solid fa-chevron-left"></i></button>`;
        
        // Números de página
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `<button class="pagination-button ${currentPage === i ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
        }
        
        // Botón siguiente
        paginationHTML += `<button class="pagination-button" ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})"><i class="fa-solid fa-chevron-right"></i></button>`;
    }
    
    document.getElementById('pagination').innerHTML = paginationHTML;
}

// Función para cambiar de página
function changePage(page) {
    if (page < 1 || page > Math.ceil(filteredData.length / itemsPerPage)) return;
    
    currentPage = page;
    displayApps(currentPage);
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

// Función para buscar aplicaciones
function searchApps() {
    const searchTerm = document.getElementById('searchBox').value.toLowerCase();
    
    filteredData = data.filter(app => 
        app.ServicesName.toLowerCase().includes(searchTerm) || 
        app.ServicesDescription.toLowerCase().includes(searchTerm) ||
        app.ServicesRoute.toLowerCase().includes(searchTerm)
    );
    
    currentPage = 1;
    displayApps();
}

// Función para Copiar código
function copyCode(button) {
    const codeContent = button.parentElement.nextElementSibling.textContent;
    navigator.clipboard.writeText(codeContent).then(() => {
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fa-solid fa-check"></i> Copiado!';
        setTimeout(() => {
            button.innerHTML = originalText;
        }, 2000);
    });
}

// Inicializar la página
window.onload = function() {
    displayApps();
};

// Funciones para el menú lateral
function openNav() {
    document.getElementById("mySidenav").style.width = "250px";
    document.getElementById("main").style.marginLeft = "250px";
}

function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
    document.getElementById("main").style.marginLeft = "0";
}